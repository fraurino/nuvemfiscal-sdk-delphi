unit NuvemFiscalJson;

interface

uses
  OpenApiJson, 
  NuvemFiscalDtos;

type
  TJsonConverter = class;
  
  TJsonConverter = class(TCustomJsonConverter)
  public
    function TEmpresaEnderecoToJsonValue(Source: TEmpresaEndereco): TJSONValue;
    function TEmpresaEnderecoToJson(Source: TEmpresaEndereco): string;
    function TEmpresaEnderecoFromJsonValue(Source: TJSONValue): TEmpresaEndereco;
    function TEmpresaEnderecoFromJson(Source: string): TEmpresaEndereco;
    function TEmpresaConfigNfeToJsonValue(Source: TEmpresaConfigNfe): TJSONValue;
    function TEmpresaConfigNfeToJson(Source: TEmpresaConfigNfe): string;
    function TEmpresaConfigNfeFromJsonValue(Source: TJSONValue): TEmpresaConfigNfe;
    function TEmpresaConfigNfeFromJson(Source: string): TEmpresaConfigNfe;
    function TEmpresaConfigNfceSefazToJsonValue(Source: TEmpresaConfigNfceSefaz): TJSONValue;
    function TEmpresaConfigNfceSefazToJson(Source: TEmpresaConfigNfceSefaz): string;
    function TEmpresaConfigNfceSefazFromJsonValue(Source: TJSONValue): TEmpresaConfigNfceSefaz;
    function TEmpresaConfigNfceSefazFromJson(Source: string): TEmpresaConfigNfceSefaz;
    function TEmpresaConfigNfceToJsonValue(Source: TEmpresaConfigNfce): TJSONValue;
    function TEmpresaConfigNfceToJson(Source: TEmpresaConfigNfce): string;
    function TEmpresaConfigNfceFromJsonValue(Source: TJSONValue): TEmpresaConfigNfce;
    function TEmpresaConfigNfceFromJson(Source: string): TEmpresaConfigNfce;
    function TEmpresaConfigMdfeToJsonValue(Source: TEmpresaConfigMdfe): TJSONValue;
    function TEmpresaConfigMdfeToJson(Source: TEmpresaConfigMdfe): string;
    function TEmpresaConfigMdfeFromJsonValue(Source: TJSONValue): TEmpresaConfigMdfe;
    function TEmpresaConfigMdfeFromJson(Source: string): TEmpresaConfigMdfe;
    function TEmpresaConfigCteToJsonValue(Source: TEmpresaConfigCte): TJSONValue;
    function TEmpresaConfigCteToJson(Source: TEmpresaConfigCte): string;
    function TEmpresaConfigCteFromJsonValue(Source: TJSONValue): TEmpresaConfigCte;
    function TEmpresaConfigCteFromJson(Source: string): TEmpresaConfigCte;
    function TEmpresaConfigCteOsToJsonValue(Source: TEmpresaConfigCteOs): TJSONValue;
    function TEmpresaConfigCteOsToJson(Source: TEmpresaConfigCteOs): string;
    function TEmpresaConfigCteOsFromJsonValue(Source: TJSONValue): TEmpresaConfigCteOs;
    function TEmpresaConfigCteOsFromJson(Source: string): TEmpresaConfigCteOs;
    function TEmpresaConfigRpsToJsonValue(Source: TEmpresaConfigRps): TJSONValue;
    function TEmpresaConfigRpsToJson(Source: TEmpresaConfigRps): string;
    function TEmpresaConfigRpsFromJsonValue(Source: TJSONValue): TEmpresaConfigRps;
    function TEmpresaConfigRpsFromJson(Source: string): TEmpresaConfigRps;
    function TEmpresaConfigPrefeituraToJsonValue(Source: TEmpresaConfigPrefeitura): TJSONValue;
    function TEmpresaConfigPrefeituraToJson(Source: TEmpresaConfigPrefeitura): string;
    function TEmpresaConfigPrefeituraFromJsonValue(Source: TJSONValue): TEmpresaConfigPrefeitura;
    function TEmpresaConfigPrefeituraFromJson(Source: string): TEmpresaConfigPrefeitura;
    function TEmpresaConfigNfseToJsonValue(Source: TEmpresaConfigNfse): TJSONValue;
    function TEmpresaConfigNfseToJson(Source: TEmpresaConfigNfse): string;
    function TEmpresaConfigNfseFromJsonValue(Source: TJSONValue): TEmpresaConfigNfse;
    function TEmpresaConfigNfseFromJson(Source: string): TEmpresaConfigNfse;
    function TEmpresaToJsonValue(Source: TEmpresa): TJSONValue;
    function TEmpresaToJson(Source: TEmpresa): string;
    function TEmpresaFromJsonValue(Source: TJSONValue): TEmpresa;
    function TEmpresaFromJson(Source: string): TEmpresa;
    function TEmpresaListToJsonValue(Source: TEmpresaList): TJSONValue;
    function TEmpresaListToJson(Source: TEmpresaList): string;
    function TEmpresaListFromJsonValue(Source: TJSONValue): TEmpresaList;
    function TEmpresaListFromJson(Source: string): TEmpresaList;
    function TEmpresaListagemToJsonValue(Source: TEmpresaListagem): TJSONValue;
    function TEmpresaListagemToJson(Source: TEmpresaListagem): string;
    function TEmpresaListagemFromJsonValue(Source: TJSONValue): TEmpresaListagem;
    function TEmpresaListagemFromJson(Source: string): TEmpresaListagem;
    function TEmpresaPedidoCadastroCertificadoToJsonValue(Source: TEmpresaPedidoCadastroCertificado): TJSONValue;
    function TEmpresaPedidoCadastroCertificadoToJson(Source: TEmpresaPedidoCadastroCertificado): string;
    function TEmpresaPedidoCadastroCertificadoFromJsonValue(Source: TJSONValue): TEmpresaPedidoCadastroCertificado;
    function TEmpresaPedidoCadastroCertificadoFromJson(Source: string): TEmpresaPedidoCadastroCertificado;
    function TEmpresaCertificadoToJsonValue(Source: TEmpresaCertificado): TJSONValue;
    function TEmpresaCertificadoToJson(Source: TEmpresaCertificado): string;
    function TEmpresaCertificadoFromJsonValue(Source: TJSONValue): TEmpresaCertificado;
    function TEmpresaCertificadoFromJson(Source: string): TEmpresaCertificado;
    function TRpsIdentificacaoPrestadorToJsonValue(Source: TRpsIdentificacaoPrestador): TJSONValue;
    function TRpsIdentificacaoPrestadorToJson(Source: TRpsIdentificacaoPrestador): string;
    function TRpsIdentificacaoPrestadorFromJsonValue(Source: TJSONValue): TRpsIdentificacaoPrestador;
    function TRpsIdentificacaoPrestadorFromJson(Source: string): TRpsIdentificacaoPrestador;
    function TRpsDadosTomadorToJsonValue(Source: TRpsDadosTomador): TJSONValue;
    function TRpsDadosTomadorToJson(Source: TRpsDadosTomador): string;
    function TRpsDadosTomadorFromJsonValue(Source: TJSONValue): TRpsDadosTomador;
    function TRpsDadosTomadorFromJson(Source: string): TRpsDadosTomador;
    function TRpsDadosIntermediarioToJsonValue(Source: TRpsDadosIntermediario): TJSONValue;
    function TRpsDadosIntermediarioToJson(Source: TRpsDadosIntermediario): string;
    function TRpsDadosIntermediarioFromJsonValue(Source: TJSONValue): TRpsDadosIntermediario;
    function TRpsDadosIntermediarioFromJson(Source: string): TRpsDadosIntermediario;
    function TRpsDadosConstrucaoCivilToJsonValue(Source: TRpsDadosConstrucaoCivil): TJSONValue;
    function TRpsDadosConstrucaoCivilToJson(Source: TRpsDadosConstrucaoCivil): string;
    function TRpsDadosConstrucaoCivilFromJsonValue(Source: TJSONValue): TRpsDadosConstrucaoCivil;
    function TRpsDadosConstrucaoCivilFromJson(Source: string): TRpsDadosConstrucaoCivil;
    function TRpsServicoValoresToJsonValue(Source: TRpsServicoValores): TJSONValue;
    function TRpsServicoValoresToJson(Source: TRpsServicoValores): string;
    function TRpsServicoValoresFromJsonValue(Source: TJSONValue): TRpsServicoValores;
    function TRpsServicoValoresFromJson(Source: string): TRpsServicoValores;
    function TRpsDadosServicoToJsonValue(Source: TRpsDadosServico): TJSONValue;
    function TRpsDadosServicoToJson(Source: TRpsDadosServico): string;
    function TRpsDadosServicoFromJsonValue(Source: TJSONValue): TRpsDadosServico;
    function TRpsDadosServicoFromJson(Source: string): TRpsDadosServico;
    function TRpsDadosServicoListToJsonValue(Source: TRpsDadosServicoList): TJSONValue;
    function TRpsDadosServicoListToJson(Source: TRpsDadosServicoList): string;
    function TRpsDadosServicoListFromJsonValue(Source: TJSONValue): TRpsDadosServicoList;
    function TRpsDadosServicoListFromJson(Source: string): TRpsDadosServicoList;
    function TRpsPedidoEmissaoToJsonValue(Source: TRpsPedidoEmissao): TJSONValue;
    function TRpsPedidoEmissaoToJson(Source: TRpsPedidoEmissao): string;
    function TRpsPedidoEmissaoFromJsonValue(Source: TJSONValue): TRpsPedidoEmissao;
    function TRpsPedidoEmissaoFromJson(Source: string): TRpsPedidoEmissao;
    function TRpsPedidoEmissaoListToJsonValue(Source: TRpsPedidoEmissaoList): TJSONValue;
    function TRpsPedidoEmissaoListToJson(Source: TRpsPedidoEmissaoList): string;
    function TRpsPedidoEmissaoListFromJsonValue(Source: TJSONValue): TRpsPedidoEmissaoList;
    function TRpsPedidoEmissaoListFromJson(Source: string): TRpsPedidoEmissaoList;
    function TRpsPedidoEmissaoLoteToJsonValue(Source: TRpsPedidoEmissaoLote): TJSONValue;
    function TRpsPedidoEmissaoLoteToJson(Source: TRpsPedidoEmissaoLote): string;
    function TRpsPedidoEmissaoLoteFromJsonValue(Source: TJSONValue): TRpsPedidoEmissaoLote;
    function TRpsPedidoEmissaoLoteFromJson(Source: string): TRpsPedidoEmissaoLote;
    function TRpsIdentificacaoToJsonValue(Source: TRpsIdentificacao): TJSONValue;
    function TRpsIdentificacaoToJson(Source: TRpsIdentificacao): string;
    function TRpsIdentificacaoFromJsonValue(Source: TJSONValue): TRpsIdentificacao;
    function TRpsIdentificacaoFromJson(Source: string): TRpsIdentificacao;
    function TRpsDadosToJsonValue(Source: TRpsDados): TJSONValue;
    function TRpsDadosToJson(Source: TRpsDados): string;
    function TRpsDadosFromJsonValue(Source: TJSONValue): TRpsDados;
    function TRpsDadosFromJson(Source: string): TRpsDados;
    function TRpsDadosPrestadorToJsonValue(Source: TRpsDadosPrestador): TJSONValue;
    function TRpsDadosPrestadorToJson(Source: TRpsDadosPrestador): string;
    function TRpsDadosPrestadorFromJsonValue(Source: TJSONValue): TRpsDadosPrestador;
    function TRpsDadosPrestadorFromJson(Source: string): TRpsDadosPrestador;
    function TRpsToJsonValue(Source: TRps): TJSONValue;
    function TRpsToJson(Source: TRps): string;
    function TRpsFromJsonValue(Source: TJSONValue): TRps;
    function TRpsFromJson(Source: string): TRps;
    function TNfseMensagemRetornoToJsonValue(Source: TNfseMensagemRetorno): TJSONValue;
    function TNfseMensagemRetornoToJson(Source: TNfseMensagemRetorno): string;
    function TNfseMensagemRetornoFromJsonValue(Source: TJSONValue): TNfseMensagemRetorno;
    function TNfseMensagemRetornoFromJson(Source: string): TNfseMensagemRetorno;
    function TNfseMensagemRetornoListToJsonValue(Source: TNfseMensagemRetornoList): TJSONValue;
    function TNfseMensagemRetornoListToJson(Source: TNfseMensagemRetornoList): string;
    function TNfseMensagemRetornoListFromJsonValue(Source: TJSONValue): TNfseMensagemRetornoList;
    function TNfseMensagemRetornoListFromJson(Source: string): TNfseMensagemRetornoList;
    function TNfseCancelamentoToJsonValue(Source: TNfseCancelamento): TJSONValue;
    function TNfseCancelamentoToJson(Source: TNfseCancelamento): string;
    function TNfseCancelamentoFromJsonValue(Source: TJSONValue): TNfseCancelamento;
    function TNfseCancelamentoFromJson(Source: string): TNfseCancelamento;
    function TNfseToJsonValue(Source: TNfse): TJSONValue;
    function TNfseToJson(Source: TNfse): string;
    function TNfseFromJsonValue(Source: TJSONValue): TNfse;
    function TNfseFromJson(Source: string): TNfse;
    function TNfseListToJsonValue(Source: TNfseList): TJSONValue;
    function TNfseListToJson(Source: TNfseList): string;
    function TNfseListFromJsonValue(Source: TJSONValue): TNfseList;
    function TNfseListFromJson(Source: string): TNfseList;
    function TRpsLoteToJsonValue(Source: TRpsLote): TJSONValue;
    function TRpsLoteToJson(Source: TRpsLote): string;
    function TRpsLoteFromJsonValue(Source: TJSONValue): TRpsLote;
    function TRpsLoteFromJson(Source: string): TRpsLote;
    function TRpsLoteListToJsonValue(Source: TRpsLoteList): TJSONValue;
    function TRpsLoteListToJson(Source: TRpsLoteList): string;
    function TRpsLoteListFromJsonValue(Source: TJSONValue): TRpsLoteList;
    function TRpsLoteListFromJson(Source: string): TRpsLoteList;
    function TRpsLoteListagemToJsonValue(Source: TRpsLoteListagem): TJSONValue;
    function TRpsLoteListagemToJson(Source: TRpsLoteListagem): string;
    function TRpsLoteListagemFromJsonValue(Source: TJSONValue): TRpsLoteListagem;
    function TRpsLoteListagemFromJson(Source: string): TRpsLoteListagem;
    function TNfsePedidoEmissaoToJsonValue(Source: TNfsePedidoEmissao): TJSONValue;
    function TNfsePedidoEmissaoToJson(Source: TNfsePedidoEmissao): string;
    function TNfsePedidoEmissaoFromJsonValue(Source: TJSONValue): TNfsePedidoEmissao;
    function TNfsePedidoEmissaoFromJson(Source: string): TNfsePedidoEmissao;
    function TNfseListagemToJsonValue(Source: TNfseListagem): TJSONValue;
    function TNfseListagemToJson(Source: TNfseListagem): string;
    function TNfseListagemFromJsonValue(Source: TJSONValue): TNfseListagem;
    function TNfseListagemFromJson(Source: string): TNfseListagem;
    function TDfeSefazStatusToJsonValue(Source: TDfeSefazStatus): TJSONValue;
    function TDfeSefazStatusToJson(Source: TDfeSefazStatus): string;
    function TDfeSefazStatusFromJsonValue(Source: TJSONValue): TDfeSefazStatus;
    function TDfeSefazStatusFromJson(Source: string): TDfeSefazStatus;
    function TDfeVisaoGeralSefazStatusToJsonValue(Source: TDfeVisaoGeralSefazStatus): TJSONValue;
    function TDfeVisaoGeralSefazStatusToJson(Source: TDfeVisaoGeralSefazStatus): string;
    function TDfeVisaoGeralSefazStatusFromJsonValue(Source: TJSONValue): TDfeVisaoGeralSefazStatus;
    function TDfeVisaoGeralSefazStatusFromJson(Source: string): TDfeVisaoGeralSefazStatus;
    function TCteSefazToma3ToJsonValue(Source: TCteSefazToma3): TJSONValue;
    function TCteSefazToma3ToJson(Source: TCteSefazToma3): string;
    function TCteSefazToma3FromJsonValue(Source: TJSONValue): TCteSefazToma3;
    function TCteSefazToma3FromJson(Source: string): TCteSefazToma3;
    function TCteSefazEnderecoToJsonValue(Source: TCteSefazEndereco): TJSONValue;
    function TCteSefazEnderecoToJson(Source: TCteSefazEndereco): string;
    function TCteSefazEnderecoFromJsonValue(Source: TJSONValue): TCteSefazEndereco;
    function TCteSefazEnderecoFromJson(Source: string): TCteSefazEndereco;
    function TCteSefazToma4ToJsonValue(Source: TCteSefazToma4): TJSONValue;
    function TCteSefazToma4ToJson(Source: TCteSefazToma4): string;
    function TCteSefazToma4FromJsonValue(Source: TJSONValue): TCteSefazToma4;
    function TCteSefazToma4FromJson(Source: string): TCteSefazToma4;
    function TCteSefazIdeToJsonValue(Source: TCteSefazIde): TJSONValue;
    function TCteSefazIdeToJson(Source: TCteSefazIde): string;
    function TCteSefazIdeFromJsonValue(Source: TJSONValue): TCteSefazIde;
    function TCteSefazIdeFromJson(Source: string): TCteSefazIde;
    function TCteSefazPassToJsonValue(Source: TCteSefazPass): TJSONValue;
    function TCteSefazPassToJson(Source: TCteSefazPass): string;
    function TCteSefazPassFromJsonValue(Source: TJSONValue): TCteSefazPass;
    function TCteSefazPassFromJson(Source: string): TCteSefazPass;
    function TCteSefazPassListToJsonValue(Source: TCteSefazPassList): TJSONValue;
    function TCteSefazPassListToJson(Source: TCteSefazPassList): string;
    function TCteSefazPassListFromJsonValue(Source: TJSONValue): TCteSefazPassList;
    function TCteSefazPassListFromJson(Source: string): TCteSefazPassList;
    function TCteSefazFluxoToJsonValue(Source: TCteSefazFluxo): TJSONValue;
    function TCteSefazFluxoToJson(Source: TCteSefazFluxo): string;
    function TCteSefazFluxoFromJsonValue(Source: TJSONValue): TCteSefazFluxo;
    function TCteSefazFluxoFromJson(Source: string): TCteSefazFluxo;
    function TCteSefazSemDataToJsonValue(Source: TCteSefazSemData): TJSONValue;
    function TCteSefazSemDataToJson(Source: TCteSefazSemData): string;
    function TCteSefazSemDataFromJsonValue(Source: TJSONValue): TCteSefazSemData;
    function TCteSefazSemDataFromJson(Source: string): TCteSefazSemData;
    function TCteSefazComDataToJsonValue(Source: TCteSefazComData): TJSONValue;
    function TCteSefazComDataToJson(Source: TCteSefazComData): string;
    function TCteSefazComDataFromJsonValue(Source: TJSONValue): TCteSefazComData;
    function TCteSefazComDataFromJson(Source: string): TCteSefazComData;
    function TCteSefazNoPeriodoToJsonValue(Source: TCteSefazNoPeriodo): TJSONValue;
    function TCteSefazNoPeriodoToJson(Source: TCteSefazNoPeriodo): string;
    function TCteSefazNoPeriodoFromJsonValue(Source: TJSONValue): TCteSefazNoPeriodo;
    function TCteSefazNoPeriodoFromJson(Source: string): TCteSefazNoPeriodo;
    function TCteSefazSemHoraToJsonValue(Source: TCteSefazSemHora): TJSONValue;
    function TCteSefazSemHoraToJson(Source: TCteSefazSemHora): string;
    function TCteSefazSemHoraFromJsonValue(Source: TJSONValue): TCteSefazSemHora;
    function TCteSefazSemHoraFromJson(Source: string): TCteSefazSemHora;
    function TCteSefazComHoraToJsonValue(Source: TCteSefazComHora): TJSONValue;
    function TCteSefazComHoraToJson(Source: TCteSefazComHora): string;
    function TCteSefazComHoraFromJsonValue(Source: TJSONValue): TCteSefazComHora;
    function TCteSefazComHoraFromJson(Source: string): TCteSefazComHora;
    function TCteSefazNoInterToJsonValue(Source: TCteSefazNoInter): TJSONValue;
    function TCteSefazNoInterToJson(Source: TCteSefazNoInter): string;
    function TCteSefazNoInterFromJsonValue(Source: TJSONValue): TCteSefazNoInter;
    function TCteSefazNoInterFromJson(Source: string): TCteSefazNoInter;
    function TCteSefazEntregaToJsonValue(Source: TCteSefazEntrega): TJSONValue;
    function TCteSefazEntregaToJson(Source: TCteSefazEntrega): string;
    function TCteSefazEntregaFromJsonValue(Source: TJSONValue): TCteSefazEntrega;
    function TCteSefazEntregaFromJson(Source: string): TCteSefazEntrega;
    function TCteSefazObsContToJsonValue(Source: TCteSefazObsCont): TJSONValue;
    function TCteSefazObsContToJson(Source: TCteSefazObsCont): string;
    function TCteSefazObsContFromJsonValue(Source: TJSONValue): TCteSefazObsCont;
    function TCteSefazObsContFromJson(Source: string): TCteSefazObsCont;
    function TCteSefazObsContListToJsonValue(Source: TCteSefazObsContList): TJSONValue;
    function TCteSefazObsContListToJson(Source: TCteSefazObsContList): string;
    function TCteSefazObsContListFromJsonValue(Source: TJSONValue): TCteSefazObsContList;
    function TCteSefazObsContListFromJson(Source: string): TCteSefazObsContList;
    function TCteSefazObsFiscoToJsonValue(Source: TCteSefazObsFisco): TJSONValue;
    function TCteSefazObsFiscoToJson(Source: TCteSefazObsFisco): string;
    function TCteSefazObsFiscoFromJsonValue(Source: TJSONValue): TCteSefazObsFisco;
    function TCteSefazObsFiscoFromJson(Source: string): TCteSefazObsFisco;
    function TCteSefazObsFiscoListToJsonValue(Source: TCteSefazObsFiscoList): TJSONValue;
    function TCteSefazObsFiscoListToJson(Source: TCteSefazObsFiscoList): string;
    function TCteSefazObsFiscoListFromJsonValue(Source: TJSONValue): TCteSefazObsFiscoList;
    function TCteSefazObsFiscoListFromJson(Source: string): TCteSefazObsFiscoList;
    function TCteSefazComplToJsonValue(Source: TCteSefazCompl): TJSONValue;
    function TCteSefazComplToJson(Source: TCteSefazCompl): string;
    function TCteSefazComplFromJsonValue(Source: TJSONValue): TCteSefazCompl;
    function TCteSefazComplFromJson(Source: string): TCteSefazCompl;
    function TCteSefazEndeEmiToJsonValue(Source: TCteSefazEndeEmi): TJSONValue;
    function TCteSefazEndeEmiToJson(Source: TCteSefazEndeEmi): string;
    function TCteSefazEndeEmiFromJsonValue(Source: TJSONValue): TCteSefazEndeEmi;
    function TCteSefazEndeEmiFromJson(Source: string): TCteSefazEndeEmi;
    function TCteSefazEmitToJsonValue(Source: TCteSefazEmit): TJSONValue;
    function TCteSefazEmitToJson(Source: TCteSefazEmit): string;
    function TCteSefazEmitFromJsonValue(Source: TJSONValue): TCteSefazEmit;
    function TCteSefazEmitFromJson(Source: string): TCteSefazEmit;
    function TCteSefazRemToJsonValue(Source: TCteSefazRem): TJSONValue;
    function TCteSefazRemToJson(Source: TCteSefazRem): string;
    function TCteSefazRemFromJsonValue(Source: TJSONValue): TCteSefazRem;
    function TCteSefazRemFromJson(Source: string): TCteSefazRem;
    function TCteSefazExpedToJsonValue(Source: TCteSefazExped): TJSONValue;
    function TCteSefazExpedToJson(Source: TCteSefazExped): string;
    function TCteSefazExpedFromJsonValue(Source: TJSONValue): TCteSefazExped;
    function TCteSefazExpedFromJson(Source: string): TCteSefazExped;
    function TCteSefazRecebToJsonValue(Source: TCteSefazReceb): TJSONValue;
    function TCteSefazRecebToJson(Source: TCteSefazReceb): string;
    function TCteSefazRecebFromJsonValue(Source: TJSONValue): TCteSefazReceb;
    function TCteSefazRecebFromJson(Source: string): TCteSefazReceb;
    function TCteSefazDestToJsonValue(Source: TCteSefazDest): TJSONValue;
    function TCteSefazDestToJson(Source: TCteSefazDest): string;
    function TCteSefazDestFromJsonValue(Source: TJSONValue): TCteSefazDest;
    function TCteSefazDestFromJson(Source: string): TCteSefazDest;
    function TCteSefazCompToJsonValue(Source: TCteSefazComp): TJSONValue;
    function TCteSefazCompToJson(Source: TCteSefazComp): string;
    function TCteSefazCompFromJsonValue(Source: TJSONValue): TCteSefazComp;
    function TCteSefazCompFromJson(Source: string): TCteSefazComp;
    function TCteSefazCompListToJsonValue(Source: TCteSefazCompList): TJSONValue;
    function TCteSefazCompListToJson(Source: TCteSefazCompList): string;
    function TCteSefazCompListFromJsonValue(Source: TJSONValue): TCteSefazCompList;
    function TCteSefazCompListFromJson(Source: string): TCteSefazCompList;
    function TCteSefazVPrestToJsonValue(Source: TCteSefazVPrest): TJSONValue;
    function TCteSefazVPrestToJson(Source: TCteSefazVPrest): string;
    function TCteSefazVPrestFromJsonValue(Source: TJSONValue): TCteSefazVPrest;
    function TCteSefazVPrestFromJson(Source: string): TCteSefazVPrest;
    function TCteSefazICMS00ToJsonValue(Source: TCteSefazICMS00): TJSONValue;
    function TCteSefazICMS00ToJson(Source: TCteSefazICMS00): string;
    function TCteSefazICMS00FromJsonValue(Source: TJSONValue): TCteSefazICMS00;
    function TCteSefazICMS00FromJson(Source: string): TCteSefazICMS00;
    function TCteSefazICMS20ToJsonValue(Source: TCteSefazICMS20): TJSONValue;
    function TCteSefazICMS20ToJson(Source: TCteSefazICMS20): string;
    function TCteSefazICMS20FromJsonValue(Source: TJSONValue): TCteSefazICMS20;
    function TCteSefazICMS20FromJson(Source: string): TCteSefazICMS20;
    function TCteSefazICMS45ToJsonValue(Source: TCteSefazICMS45): TJSONValue;
    function TCteSefazICMS45ToJson(Source: TCteSefazICMS45): string;
    function TCteSefazICMS45FromJsonValue(Source: TJSONValue): TCteSefazICMS45;
    function TCteSefazICMS45FromJson(Source: string): TCteSefazICMS45;
    function TCteSefazICMS60ToJsonValue(Source: TCteSefazICMS60): TJSONValue;
    function TCteSefazICMS60ToJson(Source: TCteSefazICMS60): string;
    function TCteSefazICMS60FromJsonValue(Source: TJSONValue): TCteSefazICMS60;
    function TCteSefazICMS60FromJson(Source: string): TCteSefazICMS60;
    function TCteSefazICMS90ToJsonValue(Source: TCteSefazICMS90): TJSONValue;
    function TCteSefazICMS90ToJson(Source: TCteSefazICMS90): string;
    function TCteSefazICMS90FromJsonValue(Source: TJSONValue): TCteSefazICMS90;
    function TCteSefazICMS90FromJson(Source: string): TCteSefazICMS90;
    function TCteSefazICMSOutraUFToJsonValue(Source: TCteSefazICMSOutraUF): TJSONValue;
    function TCteSefazICMSOutraUFToJson(Source: TCteSefazICMSOutraUF): string;
    function TCteSefazICMSOutraUFFromJsonValue(Source: TJSONValue): TCteSefazICMSOutraUF;
    function TCteSefazICMSOutraUFFromJson(Source: string): TCteSefazICMSOutraUF;
    function TCteSefazICMSSNToJsonValue(Source: TCteSefazICMSSN): TJSONValue;
    function TCteSefazICMSSNToJson(Source: TCteSefazICMSSN): string;
    function TCteSefazICMSSNFromJsonValue(Source: TJSONValue): TCteSefazICMSSN;
    function TCteSefazICMSSNFromJson(Source: string): TCteSefazICMSSN;
    function TCteSefazImpToJsonValue(Source: TCteSefazImp): TJSONValue;
    function TCteSefazImpToJson(Source: TCteSefazImp): string;
    function TCteSefazImpFromJsonValue(Source: TJSONValue): TCteSefazImp;
    function TCteSefazImpFromJson(Source: string): TCteSefazImp;
    function TCteSefazICMSUFFimToJsonValue(Source: TCteSefazICMSUFFim): TJSONValue;
    function TCteSefazICMSUFFimToJson(Source: TCteSefazICMSUFFim): string;
    function TCteSefazICMSUFFimFromJsonValue(Source: TJSONValue): TCteSefazICMSUFFim;
    function TCteSefazICMSUFFimFromJson(Source: string): TCteSefazICMSUFFim;
    function TCteSefazInfCteImpToJsonValue(Source: TCteSefazInfCteImp): TJSONValue;
    function TCteSefazInfCteImpToJson(Source: TCteSefazInfCteImp): string;
    function TCteSefazInfCteImpFromJsonValue(Source: TJSONValue): TCteSefazInfCteImp;
    function TCteSefazInfCteImpFromJson(Source: string): TCteSefazInfCteImp;
    function TCteSefazInfQToJsonValue(Source: TCteSefazInfQ): TJSONValue;
    function TCteSefazInfQToJson(Source: TCteSefazInfQ): string;
    function TCteSefazInfQFromJsonValue(Source: TJSONValue): TCteSefazInfQ;
    function TCteSefazInfQFromJson(Source: string): TCteSefazInfQ;
    function TCteSefazInfQListToJsonValue(Source: TCteSefazInfQList): TJSONValue;
    function TCteSefazInfQListToJson(Source: TCteSefazInfQList): string;
    function TCteSefazInfQListFromJsonValue(Source: TJSONValue): TCteSefazInfQList;
    function TCteSefazInfQListFromJson(Source: string): TCteSefazInfQList;
    function TCteSefazInfCargaToJsonValue(Source: TCteSefazInfCarga): TJSONValue;
    function TCteSefazInfCargaToJson(Source: TCteSefazInfCarga): string;
    function TCteSefazInfCargaFromJsonValue(Source: TJSONValue): TCteSefazInfCarga;
    function TCteSefazInfCargaFromJson(Source: string): TCteSefazInfCarga;
    function TCteSefazLacUnidCargaToJsonValue(Source: TCteSefazLacUnidCarga): TJSONValue;
    function TCteSefazLacUnidCargaToJson(Source: TCteSefazLacUnidCarga): string;
    function TCteSefazLacUnidCargaFromJsonValue(Source: TJSONValue): TCteSefazLacUnidCarga;
    function TCteSefazLacUnidCargaFromJson(Source: string): TCteSefazLacUnidCarga;
    function TCteSefazLacUnidCargaListToJsonValue(Source: TCteSefazLacUnidCargaList): TJSONValue;
    function TCteSefazLacUnidCargaListToJson(Source: TCteSefazLacUnidCargaList): string;
    function TCteSefazLacUnidCargaListFromJsonValue(Source: TJSONValue): TCteSefazLacUnidCargaList;
    function TCteSefazLacUnidCargaListFromJson(Source: string): TCteSefazLacUnidCargaList;
    function TCteSefazUnidCargaToJsonValue(Source: TCteSefazUnidCarga): TJSONValue;
    function TCteSefazUnidCargaToJson(Source: TCteSefazUnidCarga): string;
    function TCteSefazUnidCargaFromJsonValue(Source: TJSONValue): TCteSefazUnidCarga;
    function TCteSefazUnidCargaFromJson(Source: string): TCteSefazUnidCarga;
    function TCteSefazUnidCargaListToJsonValue(Source: TCteSefazUnidCargaList): TJSONValue;
    function TCteSefazUnidCargaListToJson(Source: TCteSefazUnidCargaList): string;
    function TCteSefazUnidCargaListFromJsonValue(Source: TJSONValue): TCteSefazUnidCargaList;
    function TCteSefazUnidCargaListFromJson(Source: string): TCteSefazUnidCargaList;
    function TCteSefazLacUnidTranspToJsonValue(Source: TCteSefazLacUnidTransp): TJSONValue;
    function TCteSefazLacUnidTranspToJson(Source: TCteSefazLacUnidTransp): string;
    function TCteSefazLacUnidTranspFromJsonValue(Source: TJSONValue): TCteSefazLacUnidTransp;
    function TCteSefazLacUnidTranspFromJson(Source: string): TCteSefazLacUnidTransp;
    function TCteSefazLacUnidTranspListToJsonValue(Source: TCteSefazLacUnidTranspList): TJSONValue;
    function TCteSefazLacUnidTranspListToJson(Source: TCteSefazLacUnidTranspList): string;
    function TCteSefazLacUnidTranspListFromJsonValue(Source: TJSONValue): TCteSefazLacUnidTranspList;
    function TCteSefazLacUnidTranspListFromJson(Source: string): TCteSefazLacUnidTranspList;
    function TCteSefazUnidadeTranspToJsonValue(Source: TCteSefazUnidadeTransp): TJSONValue;
    function TCteSefazUnidadeTranspToJson(Source: TCteSefazUnidadeTransp): string;
    function TCteSefazUnidadeTranspFromJsonValue(Source: TJSONValue): TCteSefazUnidadeTransp;
    function TCteSefazUnidadeTranspFromJson(Source: string): TCteSefazUnidadeTransp;
    function TCteSefazUnidadeTranspListToJsonValue(Source: TCteSefazUnidadeTranspList): TJSONValue;
    function TCteSefazUnidadeTranspListToJson(Source: TCteSefazUnidadeTranspList): string;
    function TCteSefazUnidadeTranspListFromJsonValue(Source: TJSONValue): TCteSefazUnidadeTranspList;
    function TCteSefazUnidadeTranspListFromJson(Source: string): TCteSefazUnidadeTranspList;
    function TCteSefazInfNFToJsonValue(Source: TCteSefazInfNF): TJSONValue;
    function TCteSefazInfNFToJson(Source: TCteSefazInfNF): string;
    function TCteSefazInfNFFromJsonValue(Source: TJSONValue): TCteSefazInfNF;
    function TCteSefazInfNFFromJson(Source: string): TCteSefazInfNF;
    function TCteSefazInfNFListToJsonValue(Source: TCteSefazInfNFList): TJSONValue;
    function TCteSefazInfNFListToJson(Source: TCteSefazInfNFList): string;
    function TCteSefazInfNFListFromJsonValue(Source: TJSONValue): TCteSefazInfNFList;
    function TCteSefazInfNFListFromJson(Source: string): TCteSefazInfNFList;
    function TCteSefazInfNFeToJsonValue(Source: TCteSefazInfNFe): TJSONValue;
    function TCteSefazInfNFeToJson(Source: TCteSefazInfNFe): string;
    function TCteSefazInfNFeFromJsonValue(Source: TJSONValue): TCteSefazInfNFe;
    function TCteSefazInfNFeFromJson(Source: string): TCteSefazInfNFe;
    function TCteSefazInfNFeListToJsonValue(Source: TCteSefazInfNFeList): TJSONValue;
    function TCteSefazInfNFeListToJson(Source: TCteSefazInfNFeList): string;
    function TCteSefazInfNFeListFromJsonValue(Source: TJSONValue): TCteSefazInfNFeList;
    function TCteSefazInfNFeListFromJson(Source: string): TCteSefazInfNFeList;
    function TCteSefazInfOutrosToJsonValue(Source: TCteSefazInfOutros): TJSONValue;
    function TCteSefazInfOutrosToJson(Source: TCteSefazInfOutros): string;
    function TCteSefazInfOutrosFromJsonValue(Source: TJSONValue): TCteSefazInfOutros;
    function TCteSefazInfOutrosFromJson(Source: string): TCteSefazInfOutros;
    function TCteSefazInfOutrosListToJsonValue(Source: TCteSefazInfOutrosList): TJSONValue;
    function TCteSefazInfOutrosListToJson(Source: TCteSefazInfOutrosList): string;
    function TCteSefazInfOutrosListFromJsonValue(Source: TJSONValue): TCteSefazInfOutrosList;
    function TCteSefazInfOutrosListFromJson(Source: string): TCteSefazInfOutrosList;
    function TCteSefazInfDocToJsonValue(Source: TCteSefazInfDoc): TJSONValue;
    function TCteSefazInfDocToJson(Source: TCteSefazInfDoc): string;
    function TCteSefazInfDocFromJsonValue(Source: TJSONValue): TCteSefazInfDoc;
    function TCteSefazInfDocFromJson(Source: string): TCteSefazInfDoc;
    function TCteSefazIdDocAntPapToJsonValue(Source: TCteSefazIdDocAntPap): TJSONValue;
    function TCteSefazIdDocAntPapToJson(Source: TCteSefazIdDocAntPap): string;
    function TCteSefazIdDocAntPapFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntPap;
    function TCteSefazIdDocAntPapFromJson(Source: string): TCteSefazIdDocAntPap;
    function TCteSefazIdDocAntPapListToJsonValue(Source: TCteSefazIdDocAntPapList): TJSONValue;
    function TCteSefazIdDocAntPapListToJson(Source: TCteSefazIdDocAntPapList): string;
    function TCteSefazIdDocAntPapListFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntPapList;
    function TCteSefazIdDocAntPapListFromJson(Source: string): TCteSefazIdDocAntPapList;
    function TCteSefazIdDocAntEleToJsonValue(Source: TCteSefazIdDocAntEle): TJSONValue;
    function TCteSefazIdDocAntEleToJson(Source: TCteSefazIdDocAntEle): string;
    function TCteSefazIdDocAntEleFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntEle;
    function TCteSefazIdDocAntEleFromJson(Source: string): TCteSefazIdDocAntEle;
    function TCteSefazIdDocAntEleListToJsonValue(Source: TCteSefazIdDocAntEleList): TJSONValue;
    function TCteSefazIdDocAntEleListToJson(Source: TCteSefazIdDocAntEleList): string;
    function TCteSefazIdDocAntEleListFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntEleList;
    function TCteSefazIdDocAntEleListFromJson(Source: string): TCteSefazIdDocAntEleList;
    function TCteSefazIdDocAntToJsonValue(Source: TCteSefazIdDocAnt): TJSONValue;
    function TCteSefazIdDocAntToJson(Source: TCteSefazIdDocAnt): string;
    function TCteSefazIdDocAntFromJsonValue(Source: TJSONValue): TCteSefazIdDocAnt;
    function TCteSefazIdDocAntFromJson(Source: string): TCteSefazIdDocAnt;
    function TCteSefazIdDocAntListToJsonValue(Source: TCteSefazIdDocAntList): TJSONValue;
    function TCteSefazIdDocAntListToJson(Source: TCteSefazIdDocAntList): string;
    function TCteSefazIdDocAntListFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntList;
    function TCteSefazIdDocAntListFromJson(Source: string): TCteSefazIdDocAntList;
    function TCteSefazEmiDocAntToJsonValue(Source: TCteSefazEmiDocAnt): TJSONValue;
    function TCteSefazEmiDocAntToJson(Source: TCteSefazEmiDocAnt): string;
    function TCteSefazEmiDocAntFromJsonValue(Source: TJSONValue): TCteSefazEmiDocAnt;
    function TCteSefazEmiDocAntFromJson(Source: string): TCteSefazEmiDocAnt;
    function TCteSefazEmiDocAntListToJsonValue(Source: TCteSefazEmiDocAntList): TJSONValue;
    function TCteSefazEmiDocAntListToJson(Source: TCteSefazEmiDocAntList): string;
    function TCteSefazEmiDocAntListFromJsonValue(Source: TJSONValue): TCteSefazEmiDocAntList;
    function TCteSefazEmiDocAntListFromJson(Source: string): TCteSefazEmiDocAntList;
    function TCteSefazDocAntToJsonValue(Source: TCteSefazDocAnt): TJSONValue;
    function TCteSefazDocAntToJson(Source: TCteSefazDocAnt): string;
    function TCteSefazDocAntFromJsonValue(Source: TJSONValue): TCteSefazDocAnt;
    function TCteSefazDocAntFromJson(Source: string): TCteSefazDocAnt;
    function TCteSefazEmiOccToJsonValue(Source: TCteSefazEmiOcc): TJSONValue;
    function TCteSefazEmiOccToJson(Source: TCteSefazEmiOcc): string;
    function TCteSefazEmiOccFromJsonValue(Source: TJSONValue): TCteSefazEmiOcc;
    function TCteSefazEmiOccFromJson(Source: string): TCteSefazEmiOcc;
    function TCteSefazOccToJsonValue(Source: TCteSefazOcc): TJSONValue;
    function TCteSefazOccToJson(Source: TCteSefazOcc): string;
    function TCteSefazOccFromJsonValue(Source: TJSONValue): TCteSefazOcc;
    function TCteSefazOccFromJson(Source: string): TCteSefazOcc;
    function TCteSefazOccListToJsonValue(Source: TCteSefazOccList): TJSONValue;
    function TCteSefazOccListToJson(Source: TCteSefazOccList): string;
    function TCteSefazOccListFromJsonValue(Source: TJSONValue): TCteSefazOccList;
    function TCteSefazOccListFromJson(Source: string): TCteSefazOccList;
    function TCteSefazRodoToJsonValue(Source: TCteSefazRodo): TJSONValue;
    function TCteSefazRodoToJson(Source: TCteSefazRodo): string;
    function TCteSefazRodoFromJsonValue(Source: TJSONValue): TCteSefazRodo;
    function TCteSefazRodoFromJson(Source: string): TCteSefazRodo;
    function stringListToJsonValue(Source: stringList): TJSONValue;
    function stringListToJson(Source: stringList): string;
    function stringListFromJsonValue(Source: TJSONValue): stringList;
    function stringListFromJson(Source: string): stringList;
    function TCteSefazNatCargaToJsonValue(Source: TCteSefazNatCarga): TJSONValue;
    function TCteSefazNatCargaToJson(Source: TCteSefazNatCarga): string;
    function TCteSefazNatCargaFromJsonValue(Source: TJSONValue): TCteSefazNatCarga;
    function TCteSefazNatCargaFromJson(Source: string): TCteSefazNatCarga;
    function TCteSefazTarifaToJsonValue(Source: TCteSefazTarifa): TJSONValue;
    function TCteSefazTarifaToJson(Source: TCteSefazTarifa): string;
    function TCteSefazTarifaFromJsonValue(Source: TJSONValue): TCteSefazTarifa;
    function TCteSefazTarifaFromJson(Source: string): TCteSefazTarifa;
    function TCteSefazInfTotAPToJsonValue(Source: TCteSefazInfTotAP): TJSONValue;
    function TCteSefazInfTotAPToJson(Source: TCteSefazInfTotAP): string;
    function TCteSefazInfTotAPFromJsonValue(Source: TJSONValue): TCteSefazInfTotAP;
    function TCteSefazInfTotAPFromJson(Source: string): TCteSefazInfTotAP;
    function TCteSefazPeriToJsonValue(Source: TCteSefazPeri): TJSONValue;
    function TCteSefazPeriToJson(Source: TCteSefazPeri): string;
    function TCteSefazPeriFromJsonValue(Source: TJSONValue): TCteSefazPeri;
    function TCteSefazPeriFromJson(Source: string): TCteSefazPeri;
    function TCteSefazPeriListToJsonValue(Source: TCteSefazPeriList): TJSONValue;
    function TCteSefazPeriListToJson(Source: TCteSefazPeriList): string;
    function TCteSefazPeriListFromJsonValue(Source: TJSONValue): TCteSefazPeriList;
    function TCteSefazPeriListFromJson(Source: string): TCteSefazPeriList;
    function TCteSefazAereoToJsonValue(Source: TCteSefazAereo): TJSONValue;
    function TCteSefazAereoToJson(Source: TCteSefazAereo): string;
    function TCteSefazAereoFromJsonValue(Source: TJSONValue): TCteSefazAereo;
    function TCteSefazAereoFromJson(Source: string): TCteSefazAereo;
    function TCteSefazEnderFerToJsonValue(Source: TCteSefazEnderFer): TJSONValue;
    function TCteSefazEnderFerToJson(Source: TCteSefazEnderFer): string;
    function TCteSefazEnderFerFromJsonValue(Source: TJSONValue): TCteSefazEnderFer;
    function TCteSefazEnderFerFromJson(Source: string): TCteSefazEnderFer;
    function TCteSefazFerroEnvToJsonValue(Source: TCteSefazFerroEnv): TJSONValue;
    function TCteSefazFerroEnvToJson(Source: TCteSefazFerroEnv): string;
    function TCteSefazFerroEnvFromJsonValue(Source: TJSONValue): TCteSefazFerroEnv;
    function TCteSefazFerroEnvFromJson(Source: string): TCteSefazFerroEnv;
    function TCteSefazFerroEnvListToJsonValue(Source: TCteSefazFerroEnvList): TJSONValue;
    function TCteSefazFerroEnvListToJson(Source: TCteSefazFerroEnvList): string;
    function TCteSefazFerroEnvListFromJsonValue(Source: TJSONValue): TCteSefazFerroEnvList;
    function TCteSefazFerroEnvListFromJson(Source: string): TCteSefazFerroEnvList;
    function TCteSefazTrafMutToJsonValue(Source: TCteSefazTrafMut): TJSONValue;
    function TCteSefazTrafMutToJson(Source: TCteSefazTrafMut): string;
    function TCteSefazTrafMutFromJsonValue(Source: TJSONValue): TCteSefazTrafMut;
    function TCteSefazTrafMutFromJson(Source: string): TCteSefazTrafMut;
    function TCteSefazFerrovToJsonValue(Source: TCteSefazFerrov): TJSONValue;
    function TCteSefazFerrovToJson(Source: TCteSefazFerrov): string;
    function TCteSefazFerrovFromJsonValue(Source: TJSONValue): TCteSefazFerrov;
    function TCteSefazFerrovFromJson(Source: string): TCteSefazFerrov;
    function TCteSefazBalsaToJsonValue(Source: TCteSefazBalsa): TJSONValue;
    function TCteSefazBalsaToJson(Source: TCteSefazBalsa): string;
    function TCteSefazBalsaFromJsonValue(Source: TJSONValue): TCteSefazBalsa;
    function TCteSefazBalsaFromJson(Source: string): TCteSefazBalsa;
    function TCteSefazBalsaListToJsonValue(Source: TCteSefazBalsaList): TJSONValue;
    function TCteSefazBalsaListToJson(Source: TCteSefazBalsaList): string;
    function TCteSefazBalsaListFromJsonValue(Source: TJSONValue): TCteSefazBalsaList;
    function TCteSefazBalsaListFromJson(Source: string): TCteSefazBalsaList;
    function TCteSefazLacreToJsonValue(Source: TCteSefazLacre): TJSONValue;
    function TCteSefazLacreToJson(Source: TCteSefazLacre): string;
    function TCteSefazLacreFromJsonValue(Source: TJSONValue): TCteSefazLacre;
    function TCteSefazLacreFromJson(Source: string): TCteSefazLacre;
    function TCteSefazLacreListToJsonValue(Source: TCteSefazLacreList): TJSONValue;
    function TCteSefazLacreListToJson(Source: TCteSefazLacreList): string;
    function TCteSefazLacreListFromJsonValue(Source: TJSONValue): TCteSefazLacreList;
    function TCteSefazLacreListFromJson(Source: string): TCteSefazLacreList;
    function TCteSefazDetContInfDocInfNFToJsonValue(Source: TCteSefazDetContInfDocInfNF): TJSONValue;
    function TCteSefazDetContInfDocInfNFToJson(Source: TCteSefazDetContInfDocInfNF): string;
    function TCteSefazDetContInfDocInfNFFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDocInfNF;
    function TCteSefazDetContInfDocInfNFFromJson(Source: string): TCteSefazDetContInfDocInfNF;
    function TCteSefazDetContInfDocInfNFListToJsonValue(Source: TCteSefazDetContInfDocInfNFList): TJSONValue;
    function TCteSefazDetContInfDocInfNFListToJson(Source: TCteSefazDetContInfDocInfNFList): string;
    function TCteSefazDetContInfDocInfNFListFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDocInfNFList;
    function TCteSefazDetContInfDocInfNFListFromJson(Source: string): TCteSefazDetContInfDocInfNFList;
    function TCteSefazDetContInfDocInfNFeToJsonValue(Source: TCteSefazDetContInfDocInfNFe): TJSONValue;
    function TCteSefazDetContInfDocInfNFeToJson(Source: TCteSefazDetContInfDocInfNFe): string;
    function TCteSefazDetContInfDocInfNFeFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDocInfNFe;
    function TCteSefazDetContInfDocInfNFeFromJson(Source: string): TCteSefazDetContInfDocInfNFe;
    function TCteSefazDetContInfDocInfNFeListToJsonValue(Source: TCteSefazDetContInfDocInfNFeList): TJSONValue;
    function TCteSefazDetContInfDocInfNFeListToJson(Source: TCteSefazDetContInfDocInfNFeList): string;
    function TCteSefazDetContInfDocInfNFeListFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDocInfNFeList;
    function TCteSefazDetContInfDocInfNFeListFromJson(Source: string): TCteSefazDetContInfDocInfNFeList;
    function TCteSefazDetContInfDocToJsonValue(Source: TCteSefazDetContInfDoc): TJSONValue;
    function TCteSefazDetContInfDocToJson(Source: TCteSefazDetContInfDoc): string;
    function TCteSefazDetContInfDocFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDoc;
    function TCteSefazDetContInfDocFromJson(Source: string): TCteSefazDetContInfDoc;
    function TCteSefazDetContToJsonValue(Source: TCteSefazDetCont): TJSONValue;
    function TCteSefazDetContToJson(Source: TCteSefazDetCont): string;
    function TCteSefazDetContFromJsonValue(Source: TJSONValue): TCteSefazDetCont;
    function TCteSefazDetContFromJson(Source: string): TCteSefazDetCont;
    function TCteSefazDetContListToJsonValue(Source: TCteSefazDetContList): TJSONValue;
    function TCteSefazDetContListToJson(Source: TCteSefazDetContList): string;
    function TCteSefazDetContListFromJsonValue(Source: TJSONValue): TCteSefazDetContList;
    function TCteSefazDetContListFromJson(Source: string): TCteSefazDetContList;
    function TCteSefazAquavToJsonValue(Source: TCteSefazAquav): TJSONValue;
    function TCteSefazAquavToJson(Source: TCteSefazAquav): string;
    function TCteSefazAquavFromJsonValue(Source: TJSONValue): TCteSefazAquav;
    function TCteSefazAquavFromJson(Source: string): TCteSefazAquav;
    function TCteSefazDutoToJsonValue(Source: TCteSefazDuto): TJSONValue;
    function TCteSefazDutoToJson(Source: TCteSefazDuto): string;
    function TCteSefazDutoFromJsonValue(Source: TJSONValue): TCteSefazDuto;
    function TCteSefazDutoFromJson(Source: string): TCteSefazDuto;
    function TCteSefazInfSegToJsonValue(Source: TCteSefazInfSeg): TJSONValue;
    function TCteSefazInfSegToJson(Source: TCteSefazInfSeg): string;
    function TCteSefazInfSegFromJsonValue(Source: TJSONValue): TCteSefazInfSeg;
    function TCteSefazInfSegFromJson(Source: string): TCteSefazInfSeg;
    function TCteSefazSegToJsonValue(Source: TCteSefazSeg): TJSONValue;
    function TCteSefazSegToJson(Source: TCteSefazSeg): string;
    function TCteSefazSegFromJsonValue(Source: TJSONValue): TCteSefazSeg;
    function TCteSefazSegFromJson(Source: string): TCteSefazSeg;
    function TCteSefazMultimodalToJsonValue(Source: TCteSefazMultimodal): TJSONValue;
    function TCteSefazMultimodalToJson(Source: TCteSefazMultimodal): string;
    function TCteSefazMultimodalFromJsonValue(Source: TJSONValue): TCteSefazMultimodal;
    function TCteSefazMultimodalFromJson(Source: string): TCteSefazMultimodal;
    function TCteSefazInfModalToJsonValue(Source: TCteSefazInfModal): TJSONValue;
    function TCteSefazInfModalToJson(Source: TCteSefazInfModal): string;
    function TCteSefazInfModalFromJsonValue(Source: TJSONValue): TCteSefazInfModal;
    function TCteSefazInfModalFromJson(Source: string): TCteSefazInfModal;
    function TCteSefazVeicNovosToJsonValue(Source: TCteSefazVeicNovos): TJSONValue;
    function TCteSefazVeicNovosToJson(Source: TCteSefazVeicNovos): string;
    function TCteSefazVeicNovosFromJsonValue(Source: TJSONValue): TCteSefazVeicNovos;
    function TCteSefazVeicNovosFromJson(Source: string): TCteSefazVeicNovos;
    function TCteSefazVeicNovosListToJsonValue(Source: TCteSefazVeicNovosList): TJSONValue;
    function TCteSefazVeicNovosListToJson(Source: TCteSefazVeicNovosList): string;
    function TCteSefazVeicNovosListFromJsonValue(Source: TJSONValue): TCteSefazVeicNovosList;
    function TCteSefazVeicNovosListFromJson(Source: string): TCteSefazVeicNovosList;
    function TCteSefazFatToJsonValue(Source: TCteSefazFat): TJSONValue;
    function TCteSefazFatToJson(Source: TCteSefazFat): string;
    function TCteSefazFatFromJsonValue(Source: TJSONValue): TCteSefazFat;
    function TCteSefazFatFromJson(Source: string): TCteSefazFat;
    function TCteSefazDupToJsonValue(Source: TCteSefazDup): TJSONValue;
    function TCteSefazDupToJson(Source: TCteSefazDup): string;
    function TCteSefazDupFromJsonValue(Source: TJSONValue): TCteSefazDup;
    function TCteSefazDupFromJson(Source: string): TCteSefazDup;
    function TCteSefazDupListToJsonValue(Source: TCteSefazDupList): TJSONValue;
    function TCteSefazDupListToJson(Source: TCteSefazDupList): string;
    function TCteSefazDupListFromJsonValue(Source: TJSONValue): TCteSefazDupList;
    function TCteSefazDupListFromJson(Source: string): TCteSefazDupList;
    function TCteSefazCobrToJsonValue(Source: TCteSefazCobr): TJSONValue;
    function TCteSefazCobrToJson(Source: TCteSefazCobr): string;
    function TCteSefazCobrFromJsonValue(Source: TJSONValue): TCteSefazCobr;
    function TCteSefazCobrFromJson(Source: string): TCteSefazCobr;
    function TCteSefazRefNFToJsonValue(Source: TCteSefazRefNF): TJSONValue;
    function TCteSefazRefNFToJson(Source: TCteSefazRefNF): string;
    function TCteSefazRefNFFromJsonValue(Source: TJSONValue): TCteSefazRefNF;
    function TCteSefazRefNFFromJson(Source: string): TCteSefazRefNF;
    function TCteSefazTomaICMSToJsonValue(Source: TCteSefazTomaICMS): TJSONValue;
    function TCteSefazTomaICMSToJson(Source: TCteSefazTomaICMS): string;
    function TCteSefazTomaICMSFromJsonValue(Source: TJSONValue): TCteSefazTomaICMS;
    function TCteSefazTomaICMSFromJson(Source: string): TCteSefazTomaICMS;
    function TCteSefazInfCteSubToJsonValue(Source: TCteSefazInfCteSub): TJSONValue;
    function TCteSefazInfCteSubToJson(Source: TCteSefazInfCteSub): string;
    function TCteSefazInfCteSubFromJsonValue(Source: TJSONValue): TCteSefazInfCteSub;
    function TCteSefazInfCteSubFromJson(Source: string): TCteSefazInfCteSub;
    function TCteSefazInfGlobalizadoToJsonValue(Source: TCteSefazInfGlobalizado): TJSONValue;
    function TCteSefazInfGlobalizadoToJson(Source: TCteSefazInfGlobalizado): string;
    function TCteSefazInfGlobalizadoFromJsonValue(Source: TJSONValue): TCteSefazInfGlobalizado;
    function TCteSefazInfGlobalizadoFromJson(Source: string): TCteSefazInfGlobalizado;
    function TCteSefazInfCTeMultimodalToJsonValue(Source: TCteSefazInfCTeMultimodal): TJSONValue;
    function TCteSefazInfCTeMultimodalToJson(Source: TCteSefazInfCTeMultimodal): string;
    function TCteSefazInfCTeMultimodalFromJsonValue(Source: TJSONValue): TCteSefazInfCTeMultimodal;
    function TCteSefazInfCTeMultimodalFromJson(Source: string): TCteSefazInfCTeMultimodal;
    function TCteSefazInfCTeMultimodalListToJsonValue(Source: TCteSefazInfCTeMultimodalList): TJSONValue;
    function TCteSefazInfCTeMultimodalListToJson(Source: TCteSefazInfCTeMultimodalList): string;
    function TCteSefazInfCTeMultimodalListFromJsonValue(Source: TJSONValue): TCteSefazInfCTeMultimodalList;
    function TCteSefazInfCTeMultimodalListFromJson(Source: string): TCteSefazInfCTeMultimodalList;
    function TCteSefazInfServVincToJsonValue(Source: TCteSefazInfServVinc): TJSONValue;
    function TCteSefazInfServVincToJson(Source: TCteSefazInfServVinc): string;
    function TCteSefazInfServVincFromJsonValue(Source: TJSONValue): TCteSefazInfServVinc;
    function TCteSefazInfServVincFromJson(Source: string): TCteSefazInfServVinc;
    function TCteSefazInfCTeNormToJsonValue(Source: TCteSefazInfCTeNorm): TJSONValue;
    function TCteSefazInfCTeNormToJson(Source: TCteSefazInfCTeNorm): string;
    function TCteSefazInfCTeNormFromJsonValue(Source: TJSONValue): TCteSefazInfCTeNorm;
    function TCteSefazInfCTeNormFromJson(Source: string): TCteSefazInfCTeNorm;
    function TCteSefazInfCteCompToJsonValue(Source: TCteSefazInfCteComp): TJSONValue;
    function TCteSefazInfCteCompToJson(Source: TCteSefazInfCteComp): string;
    function TCteSefazInfCteCompFromJsonValue(Source: TJSONValue): TCteSefazInfCteComp;
    function TCteSefazInfCteCompFromJson(Source: string): TCteSefazInfCteComp;
    function TCteSefazInfCteAnuToJsonValue(Source: TCteSefazInfCteAnu): TJSONValue;
    function TCteSefazInfCteAnuToJson(Source: TCteSefazInfCteAnu): string;
    function TCteSefazInfCteAnuFromJsonValue(Source: TJSONValue): TCteSefazInfCteAnu;
    function TCteSefazInfCteAnuFromJson(Source: string): TCteSefazInfCteAnu;
    function TCteSefazAutXMLToJsonValue(Source: TCteSefazAutXML): TJSONValue;
    function TCteSefazAutXMLToJson(Source: TCteSefazAutXML): string;
    function TCteSefazAutXMLFromJsonValue(Source: TJSONValue): TCteSefazAutXML;
    function TCteSefazAutXMLFromJson(Source: string): TCteSefazAutXML;
    function TCteSefazAutXMLListToJsonValue(Source: TCteSefazAutXMLList): TJSONValue;
    function TCteSefazAutXMLListToJson(Source: TCteSefazAutXMLList): string;
    function TCteSefazAutXMLListFromJsonValue(Source: TJSONValue): TCteSefazAutXMLList;
    function TCteSefazAutXMLListFromJson(Source: string): TCteSefazAutXMLList;
    function TCteSefazRespTecToJsonValue(Source: TCteSefazRespTec): TJSONValue;
    function TCteSefazRespTecToJson(Source: TCteSefazRespTec): string;
    function TCteSefazRespTecFromJsonValue(Source: TJSONValue): TCteSefazRespTec;
    function TCteSefazRespTecFromJson(Source: string): TCteSefazRespTec;
    function TCteSefazInfSolicNFFToJsonValue(Source: TCteSefazInfSolicNFF): TJSONValue;
    function TCteSefazInfSolicNFFToJson(Source: TCteSefazInfSolicNFF): string;
    function TCteSefazInfSolicNFFFromJsonValue(Source: TJSONValue): TCteSefazInfSolicNFF;
    function TCteSefazInfSolicNFFFromJson(Source: string): TCteSefazInfSolicNFF;
    function TCteSefazInfCteToJsonValue(Source: TCteSefazInfCte): TJSONValue;
    function TCteSefazInfCteToJson(Source: TCteSefazInfCte): string;
    function TCteSefazInfCteFromJsonValue(Source: TJSONValue): TCteSefazInfCte;
    function TCteSefazInfCteFromJson(Source: string): TCteSefazInfCte;
    function TCteSefazInfCTeSuplToJsonValue(Source: TCteSefazInfCTeSupl): TJSONValue;
    function TCteSefazInfCTeSuplToJson(Source: TCteSefazInfCTeSupl): string;
    function TCteSefazInfCTeSuplFromJsonValue(Source: TJSONValue): TCteSefazInfCTeSupl;
    function TCteSefazInfCTeSuplFromJson(Source: string): TCteSefazInfCTeSupl;
    function TCtePedidoEmissaoToJsonValue(Source: TCtePedidoEmissao): TJSONValue;
    function TCtePedidoEmissaoToJson(Source: TCtePedidoEmissao): string;
    function TCtePedidoEmissaoFromJsonValue(Source: TJSONValue): TCtePedidoEmissao;
    function TCtePedidoEmissaoFromJson(Source: string): TCtePedidoEmissao;
    function TCtePedidoEmissaoListToJsonValue(Source: TCtePedidoEmissaoList): TJSONValue;
    function TCtePedidoEmissaoListToJson(Source: TCtePedidoEmissaoList): string;
    function TCtePedidoEmissaoListFromJsonValue(Source: TJSONValue): TCtePedidoEmissaoList;
    function TCtePedidoEmissaoListFromJson(Source: string): TCtePedidoEmissaoList;
    function TCtePedidoEmissaoLoteToJsonValue(Source: TCtePedidoEmissaoLote): TJSONValue;
    function TCtePedidoEmissaoLoteToJson(Source: TCtePedidoEmissaoLote): string;
    function TCtePedidoEmissaoLoteFromJsonValue(Source: TJSONValue): TCtePedidoEmissaoLote;
    function TCtePedidoEmissaoLoteFromJson(Source: string): TCtePedidoEmissaoLote;
    function TDfeReciboToJsonValue(Source: TDfeRecibo): TJSONValue;
    function TDfeReciboToJson(Source: TDfeRecibo): string;
    function TDfeReciboFromJsonValue(Source: TJSONValue): TDfeRecibo;
    function TDfeReciboFromJson(Source: string): TDfeRecibo;
    function TDfeAutorEventoToJsonValue(Source: TDfeAutorEvento): TJSONValue;
    function TDfeAutorEventoToJson(Source: TDfeAutorEvento): string;
    function TDfeAutorEventoFromJsonValue(Source: TJSONValue): TDfeAutorEvento;
    function TDfeAutorEventoFromJson(Source: string): TDfeAutorEvento;
    function TDfeAutorizacaoToJsonValue(Source: TDfeAutorizacao): TJSONValue;
    function TDfeAutorizacaoToJson(Source: TDfeAutorizacao): string;
    function TDfeAutorizacaoFromJsonValue(Source: TJSONValue): TDfeAutorizacao;
    function TDfeAutorizacaoFromJson(Source: string): TDfeAutorizacao;
    function TDfeToJsonValue(Source: TDfe): TJSONValue;
    function TDfeToJson(Source: TDfe): string;
    function TDfeFromJsonValue(Source: TJSONValue): TDfe;
    function TDfeFromJson(Source: string): TDfe;
    function TDfeListToJsonValue(Source: TDfeList): TJSONValue;
    function TDfeListToJson(Source: TDfeList): string;
    function TDfeListFromJsonValue(Source: TJSONValue): TDfeList;
    function TDfeListFromJson(Source: string): TDfeList;
    function TDfeLoteToJsonValue(Source: TDfeLote): TJSONValue;
    function TDfeLoteToJson(Source: TDfeLote): string;
    function TDfeLoteFromJsonValue(Source: TJSONValue): TDfeLote;
    function TDfeLoteFromJson(Source: string): TDfeLote;
    function TCtePedidoCancelamentoToJsonValue(Source: TCtePedidoCancelamento): TJSONValue;
    function TCtePedidoCancelamentoToJson(Source: TCtePedidoCancelamento): string;
    function TCtePedidoCancelamentoFromJsonValue(Source: TJSONValue): TCtePedidoCancelamento;
    function TCtePedidoCancelamentoFromJson(Source: string): TCtePedidoCancelamento;
    function TDfeCancelamentoToJsonValue(Source: TDfeCancelamento): TJSONValue;
    function TDfeCancelamentoToJson(Source: TDfeCancelamento): string;
    function TDfeCancelamentoFromJsonValue(Source: TJSONValue): TDfeCancelamento;
    function TDfeCancelamentoFromJson(Source: string): TDfeCancelamento;
    function TCteInfCorrecaoToJsonValue(Source: TCteInfCorrecao): TJSONValue;
    function TCteInfCorrecaoToJson(Source: TCteInfCorrecao): string;
    function TCteInfCorrecaoFromJsonValue(Source: TJSONValue): TCteInfCorrecao;
    function TCteInfCorrecaoFromJson(Source: string): TCteInfCorrecao;
    function TCteInfCorrecaoListToJsonValue(Source: TCteInfCorrecaoList): TJSONValue;
    function TCteInfCorrecaoListToJson(Source: TCteInfCorrecaoList): string;
    function TCteInfCorrecaoListFromJsonValue(Source: TJSONValue): TCteInfCorrecaoList;
    function TCteInfCorrecaoListFromJson(Source: string): TCteInfCorrecaoList;
    function TCtePedidoCartaCorrecaoToJsonValue(Source: TCtePedidoCartaCorrecao): TJSONValue;
    function TCtePedidoCartaCorrecaoToJson(Source: TCtePedidoCartaCorrecao): string;
    function TCtePedidoCartaCorrecaoFromJsonValue(Source: TJSONValue): TCtePedidoCartaCorrecao;
    function TCtePedidoCartaCorrecaoFromJson(Source: string): TCtePedidoCartaCorrecao;
    function TCteCartaCorrecaoToJsonValue(Source: TCteCartaCorrecao): TJSONValue;
    function TCteCartaCorrecaoToJson(Source: TCteCartaCorrecao): string;
    function TCteCartaCorrecaoFromJsonValue(Source: TJSONValue): TCteCartaCorrecao;
    function TCteCartaCorrecaoFromJson(Source: string): TCteCartaCorrecao;
    function TDfePedidoInutilizacaoToJsonValue(Source: TDfePedidoInutilizacao): TJSONValue;
    function TDfePedidoInutilizacaoToJson(Source: TDfePedidoInutilizacao): string;
    function TDfePedidoInutilizacaoFromJsonValue(Source: TJSONValue): TDfePedidoInutilizacao;
    function TDfePedidoInutilizacaoFromJson(Source: string): TDfePedidoInutilizacao;
    function TDfeInutilizacaoToJsonValue(Source: TDfeInutilizacao): TJSONValue;
    function TDfeInutilizacaoToJson(Source: TDfeInutilizacao): string;
    function TDfeInutilizacaoFromJsonValue(Source: TJSONValue): TDfeInutilizacao;
    function TDfeInutilizacaoFromJson(Source: string): TDfeInutilizacao;
    function TDfeEventoToJsonValue(Source: TDfeEvento): TJSONValue;
    function TDfeEventoToJson(Source: TDfeEvento): string;
    function TDfeEventoFromJsonValue(Source: TJSONValue): TDfeEvento;
    function TDfeEventoFromJson(Source: string): TDfeEvento;
    function TMdfeSefazInfMunCarregaToJsonValue(Source: TMdfeSefazInfMunCarrega): TJSONValue;
    function TMdfeSefazInfMunCarregaToJson(Source: TMdfeSefazInfMunCarrega): string;
    function TMdfeSefazInfMunCarregaFromJsonValue(Source: TJSONValue): TMdfeSefazInfMunCarrega;
    function TMdfeSefazInfMunCarregaFromJson(Source: string): TMdfeSefazInfMunCarrega;
    function TMdfeSefazInfMunCarregaListToJsonValue(Source: TMdfeSefazInfMunCarregaList): TJSONValue;
    function TMdfeSefazInfMunCarregaListToJson(Source: TMdfeSefazInfMunCarregaList): string;
    function TMdfeSefazInfMunCarregaListFromJsonValue(Source: TJSONValue): TMdfeSefazInfMunCarregaList;
    function TMdfeSefazInfMunCarregaListFromJson(Source: string): TMdfeSefazInfMunCarregaList;
    function TMdfeSefazInfPercursoToJsonValue(Source: TMdfeSefazInfPercurso): TJSONValue;
    function TMdfeSefazInfPercursoToJson(Source: TMdfeSefazInfPercurso): string;
    function TMdfeSefazInfPercursoFromJsonValue(Source: TJSONValue): TMdfeSefazInfPercurso;
    function TMdfeSefazInfPercursoFromJson(Source: string): TMdfeSefazInfPercurso;
    function TMdfeSefazInfPercursoListToJsonValue(Source: TMdfeSefazInfPercursoList): TJSONValue;
    function TMdfeSefazInfPercursoListToJson(Source: TMdfeSefazInfPercursoList): string;
    function TMdfeSefazInfPercursoListFromJsonValue(Source: TJSONValue): TMdfeSefazInfPercursoList;
    function TMdfeSefazInfPercursoListFromJson(Source: string): TMdfeSefazInfPercursoList;
    function TMdfeSefazIdeToJsonValue(Source: TMdfeSefazIde): TJSONValue;
    function TMdfeSefazIdeToJson(Source: TMdfeSefazIde): string;
    function TMdfeSefazIdeFromJsonValue(Source: TJSONValue): TMdfeSefazIde;
    function TMdfeSefazIdeFromJson(Source: string): TMdfeSefazIde;
    function TMdfeSefazEndeEmiToJsonValue(Source: TMdfeSefazEndeEmi): TJSONValue;
    function TMdfeSefazEndeEmiToJson(Source: TMdfeSefazEndeEmi): string;
    function TMdfeSefazEndeEmiFromJsonValue(Source: TJSONValue): TMdfeSefazEndeEmi;
    function TMdfeSefazEndeEmiFromJson(Source: string): TMdfeSefazEndeEmi;
    function TMdfeSefazEmitToJsonValue(Source: TMdfeSefazEmit): TJSONValue;
    function TMdfeSefazEmitToJson(Source: TMdfeSefazEmit): string;
    function TMdfeSefazEmitFromJsonValue(Source: TJSONValue): TMdfeSefazEmit;
    function TMdfeSefazEmitFromJson(Source: string): TMdfeSefazEmit;
    function TMdfeSefazAereoToJsonValue(Source: TMdfeSefazAereo): TJSONValue;
    function TMdfeSefazAereoToJson(Source: TMdfeSefazAereo): string;
    function TMdfeSefazAereoFromJsonValue(Source: TJSONValue): TMdfeSefazAereo;
    function TMdfeSefazAereoFromJson(Source: string): TMdfeSefazAereo;
    function TMdfeSefazInfCIOTToJsonValue(Source: TMdfeSefazInfCIOT): TJSONValue;
    function TMdfeSefazInfCIOTToJson(Source: TMdfeSefazInfCIOT): string;
    function TMdfeSefazInfCIOTFromJsonValue(Source: TJSONValue): TMdfeSefazInfCIOT;
    function TMdfeSefazInfCIOTFromJson(Source: string): TMdfeSefazInfCIOT;
    function TMdfeSefazInfCIOTListToJsonValue(Source: TMdfeSefazInfCIOTList): TJSONValue;
    function TMdfeSefazInfCIOTListToJson(Source: TMdfeSefazInfCIOTList): string;
    function TMdfeSefazInfCIOTListFromJsonValue(Source: TJSONValue): TMdfeSefazInfCIOTList;
    function TMdfeSefazInfCIOTListFromJson(Source: string): TMdfeSefazInfCIOTList;
    function TMdfeSefazDispToJsonValue(Source: TMdfeSefazDisp): TJSONValue;
    function TMdfeSefazDispToJson(Source: TMdfeSefazDisp): string;
    function TMdfeSefazDispFromJsonValue(Source: TJSONValue): TMdfeSefazDisp;
    function TMdfeSefazDispFromJson(Source: string): TMdfeSefazDisp;
    function TMdfeSefazDispListToJsonValue(Source: TMdfeSefazDispList): TJSONValue;
    function TMdfeSefazDispListToJson(Source: TMdfeSefazDispList): string;
    function TMdfeSefazDispListFromJsonValue(Source: TJSONValue): TMdfeSefazDispList;
    function TMdfeSefazDispListFromJson(Source: string): TMdfeSefazDispList;
    function TMdfeSefazValePedToJsonValue(Source: TMdfeSefazValePed): TJSONValue;
    function TMdfeSefazValePedToJson(Source: TMdfeSefazValePed): string;
    function TMdfeSefazValePedFromJsonValue(Source: TJSONValue): TMdfeSefazValePed;
    function TMdfeSefazValePedFromJson(Source: string): TMdfeSefazValePed;
    function TMdfeSefazInfContratanteToJsonValue(Source: TMdfeSefazInfContratante): TJSONValue;
    function TMdfeSefazInfContratanteToJson(Source: TMdfeSefazInfContratante): string;
    function TMdfeSefazInfContratanteFromJsonValue(Source: TJSONValue): TMdfeSefazInfContratante;
    function TMdfeSefazInfContratanteFromJson(Source: string): TMdfeSefazInfContratante;
    function TMdfeSefazInfContratanteListToJsonValue(Source: TMdfeSefazInfContratanteList): TJSONValue;
    function TMdfeSefazInfContratanteListToJson(Source: TMdfeSefazInfContratanteList): string;
    function TMdfeSefazInfContratanteListFromJsonValue(Source: TJSONValue): TMdfeSefazInfContratanteList;
    function TMdfeSefazInfContratanteListFromJson(Source: string): TMdfeSefazInfContratanteList;
    function TMdfeSefazCompToJsonValue(Source: TMdfeSefazComp): TJSONValue;
    function TMdfeSefazCompToJson(Source: TMdfeSefazComp): string;
    function TMdfeSefazCompFromJsonValue(Source: TJSONValue): TMdfeSefazComp;
    function TMdfeSefazCompFromJson(Source: string): TMdfeSefazComp;
    function TMdfeSefazCompListToJsonValue(Source: TMdfeSefazCompList): TJSONValue;
    function TMdfeSefazCompListToJson(Source: TMdfeSefazCompList): string;
    function TMdfeSefazCompListFromJsonValue(Source: TJSONValue): TMdfeSefazCompList;
    function TMdfeSefazCompListFromJson(Source: string): TMdfeSefazCompList;
    function TMdfeSefazInfPrazoToJsonValue(Source: TMdfeSefazInfPrazo): TJSONValue;
    function TMdfeSefazInfPrazoToJson(Source: TMdfeSefazInfPrazo): string;
    function TMdfeSefazInfPrazoFromJsonValue(Source: TJSONValue): TMdfeSefazInfPrazo;
    function TMdfeSefazInfPrazoFromJson(Source: string): TMdfeSefazInfPrazo;
    function TMdfeSefazInfPrazoListToJsonValue(Source: TMdfeSefazInfPrazoList): TJSONValue;
    function TMdfeSefazInfPrazoListToJson(Source: TMdfeSefazInfPrazoList): string;
    function TMdfeSefazInfPrazoListFromJsonValue(Source: TJSONValue): TMdfeSefazInfPrazoList;
    function TMdfeSefazInfPrazoListFromJson(Source: string): TMdfeSefazInfPrazoList;
    function TMdfeSefazInfBancToJsonValue(Source: TMdfeSefazInfBanc): TJSONValue;
    function TMdfeSefazInfBancToJson(Source: TMdfeSefazInfBanc): string;
    function TMdfeSefazInfBancFromJsonValue(Source: TJSONValue): TMdfeSefazInfBanc;
    function TMdfeSefazInfBancFromJson(Source: string): TMdfeSefazInfBanc;
    function TMdfeSefazInfPagToJsonValue(Source: TMdfeSefazInfPag): TJSONValue;
    function TMdfeSefazInfPagToJson(Source: TMdfeSefazInfPag): string;
    function TMdfeSefazInfPagFromJsonValue(Source: TJSONValue): TMdfeSefazInfPag;
    function TMdfeSefazInfPagFromJson(Source: string): TMdfeSefazInfPag;
    function TMdfeSefazInfPagListToJsonValue(Source: TMdfeSefazInfPagList): TJSONValue;
    function TMdfeSefazInfPagListToJson(Source: TMdfeSefazInfPagList): string;
    function TMdfeSefazInfPagListFromJsonValue(Source: TJSONValue): TMdfeSefazInfPagList;
    function TMdfeSefazInfPagListFromJson(Source: string): TMdfeSefazInfPagList;
    function TMdfeSefazInfANTTToJsonValue(Source: TMdfeSefazInfANTT): TJSONValue;
    function TMdfeSefazInfANTTToJson(Source: TMdfeSefazInfANTT): string;
    function TMdfeSefazInfANTTFromJsonValue(Source: TJSONValue): TMdfeSefazInfANTT;
    function TMdfeSefazInfANTTFromJson(Source: string): TMdfeSefazInfANTT;
    function TMdfeSefazPropToJsonValue(Source: TMdfeSefazProp): TJSONValue;
    function TMdfeSefazPropToJson(Source: TMdfeSefazProp): string;
    function TMdfeSefazPropFromJsonValue(Source: TJSONValue): TMdfeSefazProp;
    function TMdfeSefazPropFromJson(Source: string): TMdfeSefazProp;
    function TMdfeSefazCondutorToJsonValue(Source: TMdfeSefazCondutor): TJSONValue;
    function TMdfeSefazCondutorToJson(Source: TMdfeSefazCondutor): string;
    function TMdfeSefazCondutorFromJsonValue(Source: TJSONValue): TMdfeSefazCondutor;
    function TMdfeSefazCondutorFromJson(Source: string): TMdfeSefazCondutor;
    function TMdfeSefazCondutorListToJsonValue(Source: TMdfeSefazCondutorList): TJSONValue;
    function TMdfeSefazCondutorListToJson(Source: TMdfeSefazCondutorList): string;
    function TMdfeSefazCondutorListFromJsonValue(Source: TJSONValue): TMdfeSefazCondutorList;
    function TMdfeSefazCondutorListFromJson(Source: string): TMdfeSefazCondutorList;
    function TMdfeSefazVeicTracaoToJsonValue(Source: TMdfeSefazVeicTracao): TJSONValue;
    function TMdfeSefazVeicTracaoToJson(Source: TMdfeSefazVeicTracao): string;
    function TMdfeSefazVeicTracaoFromJsonValue(Source: TJSONValue): TMdfeSefazVeicTracao;
    function TMdfeSefazVeicTracaoFromJson(Source: string): TMdfeSefazVeicTracao;
    function TMdfeSefazVeicReboquePropToJsonValue(Source: TMdfeSefazVeicReboqueProp): TJSONValue;
    function TMdfeSefazVeicReboquePropToJson(Source: TMdfeSefazVeicReboqueProp): string;
    function TMdfeSefazVeicReboquePropFromJsonValue(Source: TJSONValue): TMdfeSefazVeicReboqueProp;
    function TMdfeSefazVeicReboquePropFromJson(Source: string): TMdfeSefazVeicReboqueProp;
    function TMdfeSefazVeicReboqueToJsonValue(Source: TMdfeSefazVeicReboque): TJSONValue;
    function TMdfeSefazVeicReboqueToJson(Source: TMdfeSefazVeicReboque): string;
    function TMdfeSefazVeicReboqueFromJsonValue(Source: TJSONValue): TMdfeSefazVeicReboque;
    function TMdfeSefazVeicReboqueFromJson(Source: string): TMdfeSefazVeicReboque;
    function TMdfeSefazVeicReboqueListToJsonValue(Source: TMdfeSefazVeicReboqueList): TJSONValue;
    function TMdfeSefazVeicReboqueListToJson(Source: TMdfeSefazVeicReboqueList): string;
    function TMdfeSefazVeicReboqueListFromJsonValue(Source: TJSONValue): TMdfeSefazVeicReboqueList;
    function TMdfeSefazVeicReboqueListFromJson(Source: string): TMdfeSefazVeicReboqueList;
    function TMdfeSefazLacRodoToJsonValue(Source: TMdfeSefazLacRodo): TJSONValue;
    function TMdfeSefazLacRodoToJson(Source: TMdfeSefazLacRodo): string;
    function TMdfeSefazLacRodoFromJsonValue(Source: TJSONValue): TMdfeSefazLacRodo;
    function TMdfeSefazLacRodoFromJson(Source: string): TMdfeSefazLacRodo;
    function TMdfeSefazLacRodoListToJsonValue(Source: TMdfeSefazLacRodoList): TJSONValue;
    function TMdfeSefazLacRodoListToJson(Source: TMdfeSefazLacRodoList): string;
    function TMdfeSefazLacRodoListFromJsonValue(Source: TJSONValue): TMdfeSefazLacRodoList;
    function TMdfeSefazLacRodoListFromJson(Source: string): TMdfeSefazLacRodoList;
    function TMdfeSefazRodoToJsonValue(Source: TMdfeSefazRodo): TJSONValue;
    function TMdfeSefazRodoToJson(Source: TMdfeSefazRodo): string;
    function TMdfeSefazRodoFromJsonValue(Source: TJSONValue): TMdfeSefazRodo;
    function TMdfeSefazRodoFromJson(Source: string): TMdfeSefazRodo;
    function TMdfeSefazInfTermCarregToJsonValue(Source: TMdfeSefazInfTermCarreg): TJSONValue;
    function TMdfeSefazInfTermCarregToJson(Source: TMdfeSefazInfTermCarreg): string;
    function TMdfeSefazInfTermCarregFromJsonValue(Source: TJSONValue): TMdfeSefazInfTermCarreg;
    function TMdfeSefazInfTermCarregFromJson(Source: string): TMdfeSefazInfTermCarreg;
    function TMdfeSefazInfTermCarregListToJsonValue(Source: TMdfeSefazInfTermCarregList): TJSONValue;
    function TMdfeSefazInfTermCarregListToJson(Source: TMdfeSefazInfTermCarregList): string;
    function TMdfeSefazInfTermCarregListFromJsonValue(Source: TJSONValue): TMdfeSefazInfTermCarregList;
    function TMdfeSefazInfTermCarregListFromJson(Source: string): TMdfeSefazInfTermCarregList;
    function TMdfeSefazInfTermDescarregToJsonValue(Source: TMdfeSefazInfTermDescarreg): TJSONValue;
    function TMdfeSefazInfTermDescarregToJson(Source: TMdfeSefazInfTermDescarreg): string;
    function TMdfeSefazInfTermDescarregFromJsonValue(Source: TJSONValue): TMdfeSefazInfTermDescarreg;
    function TMdfeSefazInfTermDescarregFromJson(Source: string): TMdfeSefazInfTermDescarreg;
    function TMdfeSefazInfTermDescarregListToJsonValue(Source: TMdfeSefazInfTermDescarregList): TJSONValue;
    function TMdfeSefazInfTermDescarregListToJson(Source: TMdfeSefazInfTermDescarregList): string;
    function TMdfeSefazInfTermDescarregListFromJsonValue(Source: TJSONValue): TMdfeSefazInfTermDescarregList;
    function TMdfeSefazInfTermDescarregListFromJson(Source: string): TMdfeSefazInfTermDescarregList;
    function TMdfeSefazInfEmbCombToJsonValue(Source: TMdfeSefazInfEmbComb): TJSONValue;
    function TMdfeSefazInfEmbCombToJson(Source: TMdfeSefazInfEmbComb): string;
    function TMdfeSefazInfEmbCombFromJsonValue(Source: TJSONValue): TMdfeSefazInfEmbComb;
    function TMdfeSefazInfEmbCombFromJson(Source: string): TMdfeSefazInfEmbComb;
    function TMdfeSefazInfEmbCombListToJsonValue(Source: TMdfeSefazInfEmbCombList): TJSONValue;
    function TMdfeSefazInfEmbCombListToJson(Source: TMdfeSefazInfEmbCombList): string;
    function TMdfeSefazInfEmbCombListFromJsonValue(Source: TJSONValue): TMdfeSefazInfEmbCombList;
    function TMdfeSefazInfEmbCombListFromJson(Source: string): TMdfeSefazInfEmbCombList;
    function TMdfeSefazInfUnidCargaVaziaToJsonValue(Source: TMdfeSefazInfUnidCargaVazia): TJSONValue;
    function TMdfeSefazInfUnidCargaVaziaToJson(Source: TMdfeSefazInfUnidCargaVazia): string;
    function TMdfeSefazInfUnidCargaVaziaFromJsonValue(Source: TJSONValue): TMdfeSefazInfUnidCargaVazia;
    function TMdfeSefazInfUnidCargaVaziaFromJson(Source: string): TMdfeSefazInfUnidCargaVazia;
    function TMdfeSefazInfUnidCargaVaziaListToJsonValue(Source: TMdfeSefazInfUnidCargaVaziaList): TJSONValue;
    function TMdfeSefazInfUnidCargaVaziaListToJson(Source: TMdfeSefazInfUnidCargaVaziaList): string;
    function TMdfeSefazInfUnidCargaVaziaListFromJsonValue(Source: TJSONValue): TMdfeSefazInfUnidCargaVaziaList;
    function TMdfeSefazInfUnidCargaVaziaListFromJson(Source: string): TMdfeSefazInfUnidCargaVaziaList;
    function TMdfeSefazInfUnidTranspVaziaToJsonValue(Source: TMdfeSefazInfUnidTranspVazia): TJSONValue;
    function TMdfeSefazInfUnidTranspVaziaToJson(Source: TMdfeSefazInfUnidTranspVazia): string;
    function TMdfeSefazInfUnidTranspVaziaFromJsonValue(Source: TJSONValue): TMdfeSefazInfUnidTranspVazia;
    function TMdfeSefazInfUnidTranspVaziaFromJson(Source: string): TMdfeSefazInfUnidTranspVazia;
    function TMdfeSefazInfUnidTranspVaziaListToJsonValue(Source: TMdfeSefazInfUnidTranspVaziaList): TJSONValue;
    function TMdfeSefazInfUnidTranspVaziaListToJson(Source: TMdfeSefazInfUnidTranspVaziaList): string;
    function TMdfeSefazInfUnidTranspVaziaListFromJsonValue(Source: TJSONValue): TMdfeSefazInfUnidTranspVaziaList;
    function TMdfeSefazInfUnidTranspVaziaListFromJson(Source: string): TMdfeSefazInfUnidTranspVaziaList;
    function TMdfeSefazAquavToJsonValue(Source: TMdfeSefazAquav): TJSONValue;
    function TMdfeSefazAquavToJson(Source: TMdfeSefazAquav): string;
    function TMdfeSefazAquavFromJsonValue(Source: TJSONValue): TMdfeSefazAquav;
    function TMdfeSefazAquavFromJson(Source: string): TMdfeSefazAquav;
    function TMdfeSefazTremToJsonValue(Source: TMdfeSefazTrem): TJSONValue;
    function TMdfeSefazTremToJson(Source: TMdfeSefazTrem): string;
    function TMdfeSefazTremFromJsonValue(Source: TJSONValue): TMdfeSefazTrem;
    function TMdfeSefazTremFromJson(Source: string): TMdfeSefazTrem;
    function TMdfeSefazVagToJsonValue(Source: TMdfeSefazVag): TJSONValue;
    function TMdfeSefazVagToJson(Source: TMdfeSefazVag): string;
    function TMdfeSefazVagFromJsonValue(Source: TJSONValue): TMdfeSefazVag;
    function TMdfeSefazVagFromJson(Source: string): TMdfeSefazVag;
    function TMdfeSefazVagListToJsonValue(Source: TMdfeSefazVagList): TJSONValue;
    function TMdfeSefazVagListToJson(Source: TMdfeSefazVagList): string;
    function TMdfeSefazVagListFromJsonValue(Source: TJSONValue): TMdfeSefazVagList;
    function TMdfeSefazVagListFromJson(Source: string): TMdfeSefazVagList;
    function TMdfeSefazFerrovToJsonValue(Source: TMdfeSefazFerrov): TJSONValue;
    function TMdfeSefazFerrovToJson(Source: TMdfeSefazFerrov): string;
    function TMdfeSefazFerrovFromJsonValue(Source: TJSONValue): TMdfeSefazFerrov;
    function TMdfeSefazFerrovFromJson(Source: string): TMdfeSefazFerrov;
    function TMdfeSefazInfModalToJsonValue(Source: TMdfeSefazInfModal): TJSONValue;
    function TMdfeSefazInfModalToJson(Source: TMdfeSefazInfModal): string;
    function TMdfeSefazInfModalFromJsonValue(Source: TJSONValue): TMdfeSefazInfModal;
    function TMdfeSefazInfModalFromJson(Source: string): TMdfeSefazInfModal;
    function TMdfeSefazLacUnidTranspToJsonValue(Source: TMdfeSefazLacUnidTransp): TJSONValue;
    function TMdfeSefazLacUnidTranspToJson(Source: TMdfeSefazLacUnidTransp): string;
    function TMdfeSefazLacUnidTranspFromJsonValue(Source: TJSONValue): TMdfeSefazLacUnidTransp;
    function TMdfeSefazLacUnidTranspFromJson(Source: string): TMdfeSefazLacUnidTransp;
    function TMdfeSefazLacUnidTranspListToJsonValue(Source: TMdfeSefazLacUnidTranspList): TJSONValue;
    function TMdfeSefazLacUnidTranspListToJson(Source: TMdfeSefazLacUnidTranspList): string;
    function TMdfeSefazLacUnidTranspListFromJsonValue(Source: TJSONValue): TMdfeSefazLacUnidTranspList;
    function TMdfeSefazLacUnidTranspListFromJson(Source: string): TMdfeSefazLacUnidTranspList;
    function TMdfeSefazLacUnidCargaToJsonValue(Source: TMdfeSefazLacUnidCarga): TJSONValue;
    function TMdfeSefazLacUnidCargaToJson(Source: TMdfeSefazLacUnidCarga): string;
    function TMdfeSefazLacUnidCargaFromJsonValue(Source: TJSONValue): TMdfeSefazLacUnidCarga;
    function TMdfeSefazLacUnidCargaFromJson(Source: string): TMdfeSefazLacUnidCarga;
    function TMdfeSefazLacUnidCargaListToJsonValue(Source: TMdfeSefazLacUnidCargaList): TJSONValue;
    function TMdfeSefazLacUnidCargaListToJson(Source: TMdfeSefazLacUnidCargaList): string;
    function TMdfeSefazLacUnidCargaListFromJsonValue(Source: TJSONValue): TMdfeSefazLacUnidCargaList;
    function TMdfeSefazLacUnidCargaListFromJson(Source: string): TMdfeSefazLacUnidCargaList;
    function TMdfeSefazUnidCargaToJsonValue(Source: TMdfeSefazUnidCarga): TJSONValue;
    function TMdfeSefazUnidCargaToJson(Source: TMdfeSefazUnidCarga): string;
    function TMdfeSefazUnidCargaFromJsonValue(Source: TJSONValue): TMdfeSefazUnidCarga;
    function TMdfeSefazUnidCargaFromJson(Source: string): TMdfeSefazUnidCarga;
    function TMdfeSefazUnidCargaListToJsonValue(Source: TMdfeSefazUnidCargaList): TJSONValue;
    function TMdfeSefazUnidCargaListToJson(Source: TMdfeSefazUnidCargaList): string;
    function TMdfeSefazUnidCargaListFromJsonValue(Source: TJSONValue): TMdfeSefazUnidCargaList;
    function TMdfeSefazUnidCargaListFromJson(Source: string): TMdfeSefazUnidCargaList;
    function TMdfeSefazUnidadeTranspToJsonValue(Source: TMdfeSefazUnidadeTransp): TJSONValue;
    function TMdfeSefazUnidadeTranspToJson(Source: TMdfeSefazUnidadeTransp): string;
    function TMdfeSefazUnidadeTranspFromJsonValue(Source: TJSONValue): TMdfeSefazUnidadeTransp;
    function TMdfeSefazUnidadeTranspFromJson(Source: string): TMdfeSefazUnidadeTransp;
    function TMdfeSefazUnidadeTranspListToJsonValue(Source: TMdfeSefazUnidadeTranspList): TJSONValue;
    function TMdfeSefazUnidadeTranspListToJson(Source: TMdfeSefazUnidadeTranspList): string;
    function TMdfeSefazUnidadeTranspListFromJsonValue(Source: TJSONValue): TMdfeSefazUnidadeTranspList;
    function TMdfeSefazUnidadeTranspListFromJson(Source: string): TMdfeSefazUnidadeTranspList;
    function TMdfeSefazPeriToJsonValue(Source: TMdfeSefazPeri): TJSONValue;
    function TMdfeSefazPeriToJson(Source: TMdfeSefazPeri): string;
    function TMdfeSefazPeriFromJsonValue(Source: TJSONValue): TMdfeSefazPeri;
    function TMdfeSefazPeriFromJson(Source: string): TMdfeSefazPeri;
    function TMdfeSefazPeriListToJsonValue(Source: TMdfeSefazPeriList): TJSONValue;
    function TMdfeSefazPeriListToJson(Source: TMdfeSefazPeriList): string;
    function TMdfeSefazPeriListFromJsonValue(Source: TJSONValue): TMdfeSefazPeriList;
    function TMdfeSefazPeriListFromJson(Source: string): TMdfeSefazPeriList;
    function TMdfeSefazInfEntregaParcialToJsonValue(Source: TMdfeSefazInfEntregaParcial): TJSONValue;
    function TMdfeSefazInfEntregaParcialToJson(Source: TMdfeSefazInfEntregaParcial): string;
    function TMdfeSefazInfEntregaParcialFromJsonValue(Source: TJSONValue): TMdfeSefazInfEntregaParcial;
    function TMdfeSefazInfEntregaParcialFromJson(Source: string): TMdfeSefazInfEntregaParcial;
    function TMdfeSefazInfCTeToJsonValue(Source: TMdfeSefazInfCTe): TJSONValue;
    function TMdfeSefazInfCTeToJson(Source: TMdfeSefazInfCTe): string;
    function TMdfeSefazInfCTeFromJsonValue(Source: TJSONValue): TMdfeSefazInfCTe;
    function TMdfeSefazInfCTeFromJson(Source: string): TMdfeSefazInfCTe;
    function TMdfeSefazInfCTeListToJsonValue(Source: TMdfeSefazInfCTeList): TJSONValue;
    function TMdfeSefazInfCTeListToJson(Source: TMdfeSefazInfCTeList): string;
    function TMdfeSefazInfCTeListFromJsonValue(Source: TJSONValue): TMdfeSefazInfCTeList;
    function TMdfeSefazInfCTeListFromJson(Source: string): TMdfeSefazInfCTeList;
    function TMdfeSefazInfNFePeriToJsonValue(Source: TMdfeSefazInfNFePeri): TJSONValue;
    function TMdfeSefazInfNFePeriToJson(Source: TMdfeSefazInfNFePeri): string;
    function TMdfeSefazInfNFePeriFromJsonValue(Source: TJSONValue): TMdfeSefazInfNFePeri;
    function TMdfeSefazInfNFePeriFromJson(Source: string): TMdfeSefazInfNFePeri;
    function TMdfeSefazInfNFePeriListToJsonValue(Source: TMdfeSefazInfNFePeriList): TJSONValue;
    function TMdfeSefazInfNFePeriListToJson(Source: TMdfeSefazInfNFePeriList): string;
    function TMdfeSefazInfNFePeriListFromJsonValue(Source: TJSONValue): TMdfeSefazInfNFePeriList;
    function TMdfeSefazInfNFePeriListFromJson(Source: string): TMdfeSefazInfNFePeriList;
    function TMdfeSefazInfNFeToJsonValue(Source: TMdfeSefazInfNFe): TJSONValue;
    function TMdfeSefazInfNFeToJson(Source: TMdfeSefazInfNFe): string;
    function TMdfeSefazInfNFeFromJsonValue(Source: TJSONValue): TMdfeSefazInfNFe;
    function TMdfeSefazInfNFeFromJson(Source: string): TMdfeSefazInfNFe;
    function TMdfeSefazInfNFeListToJsonValue(Source: TMdfeSefazInfNFeList): TJSONValue;
    function TMdfeSefazInfNFeListToJson(Source: TMdfeSefazInfNFeList): string;
    function TMdfeSefazInfNFeListFromJsonValue(Source: TJSONValue): TMdfeSefazInfNFeList;
    function TMdfeSefazInfNFeListFromJson(Source: string): TMdfeSefazInfNFeList;
    function TMdfeSefazInfMDFeTranspPeriToJsonValue(Source: TMdfeSefazInfMDFeTranspPeri): TJSONValue;
    function TMdfeSefazInfMDFeTranspPeriToJson(Source: TMdfeSefazInfMDFeTranspPeri): string;
    function TMdfeSefazInfMDFeTranspPeriFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeTranspPeri;
    function TMdfeSefazInfMDFeTranspPeriFromJson(Source: string): TMdfeSefazInfMDFeTranspPeri;
    function TMdfeSefazInfMDFeTranspPeriListToJsonValue(Source: TMdfeSefazInfMDFeTranspPeriList): TJSONValue;
    function TMdfeSefazInfMDFeTranspPeriListToJson(Source: TMdfeSefazInfMDFeTranspPeriList): string;
    function TMdfeSefazInfMDFeTranspPeriListFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeTranspPeriList;
    function TMdfeSefazInfMDFeTranspPeriListFromJson(Source: string): TMdfeSefazInfMDFeTranspPeriList;
    function TMdfeSefazInfMDFeTranspToJsonValue(Source: TMdfeSefazInfMDFeTransp): TJSONValue;
    function TMdfeSefazInfMDFeTranspToJson(Source: TMdfeSefazInfMDFeTransp): string;
    function TMdfeSefazInfMDFeTranspFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeTransp;
    function TMdfeSefazInfMDFeTranspFromJson(Source: string): TMdfeSefazInfMDFeTransp;
    function TMdfeSefazInfMDFeTranspListToJsonValue(Source: TMdfeSefazInfMDFeTranspList): TJSONValue;
    function TMdfeSefazInfMDFeTranspListToJson(Source: TMdfeSefazInfMDFeTranspList): string;
    function TMdfeSefazInfMDFeTranspListFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeTranspList;
    function TMdfeSefazInfMDFeTranspListFromJson(Source: string): TMdfeSefazInfMDFeTranspList;
    function TMdfeSefazInfMunDescargaToJsonValue(Source: TMdfeSefazInfMunDescarga): TJSONValue;
    function TMdfeSefazInfMunDescargaToJson(Source: TMdfeSefazInfMunDescarga): string;
    function TMdfeSefazInfMunDescargaFromJsonValue(Source: TJSONValue): TMdfeSefazInfMunDescarga;
    function TMdfeSefazInfMunDescargaFromJson(Source: string): TMdfeSefazInfMunDescarga;
    function TMdfeSefazInfMunDescargaListToJsonValue(Source: TMdfeSefazInfMunDescargaList): TJSONValue;
    function TMdfeSefazInfMunDescargaListToJson(Source: TMdfeSefazInfMunDescargaList): string;
    function TMdfeSefazInfMunDescargaListFromJsonValue(Source: TJSONValue): TMdfeSefazInfMunDescargaList;
    function TMdfeSefazInfMunDescargaListFromJson(Source: string): TMdfeSefazInfMunDescargaList;
    function TMdfeSefazInfDocToJsonValue(Source: TMdfeSefazInfDoc): TJSONValue;
    function TMdfeSefazInfDocToJson(Source: TMdfeSefazInfDoc): string;
    function TMdfeSefazInfDocFromJsonValue(Source: TJSONValue): TMdfeSefazInfDoc;
    function TMdfeSefazInfDocFromJson(Source: string): TMdfeSefazInfDoc;
    function TMdfeSefazInfRespToJsonValue(Source: TMdfeSefazInfResp): TJSONValue;
    function TMdfeSefazInfRespToJson(Source: TMdfeSefazInfResp): string;
    function TMdfeSefazInfRespFromJsonValue(Source: TJSONValue): TMdfeSefazInfResp;
    function TMdfeSefazInfRespFromJson(Source: string): TMdfeSefazInfResp;
    function TMdfeSefazInfSegToJsonValue(Source: TMdfeSefazInfSeg): TJSONValue;
    function TMdfeSefazInfSegToJson(Source: TMdfeSefazInfSeg): string;
    function TMdfeSefazInfSegFromJsonValue(Source: TJSONValue): TMdfeSefazInfSeg;
    function TMdfeSefazInfSegFromJson(Source: string): TMdfeSefazInfSeg;
    function TMdfeSefazSegToJsonValue(Source: TMdfeSefazSeg): TJSONValue;
    function TMdfeSefazSegToJson(Source: TMdfeSefazSeg): string;
    function TMdfeSefazSegFromJsonValue(Source: TJSONValue): TMdfeSefazSeg;
    function TMdfeSefazSegFromJson(Source: string): TMdfeSefazSeg;
    function TMdfeSefazSegListToJsonValue(Source: TMdfeSefazSegList): TJSONValue;
    function TMdfeSefazSegListToJson(Source: TMdfeSefazSegList): string;
    function TMdfeSefazSegListFromJsonValue(Source: TJSONValue): TMdfeSefazSegList;
    function TMdfeSefazSegListFromJson(Source: string): TMdfeSefazSegList;
    function TMdfeSefazInfLocalCarregaToJsonValue(Source: TMdfeSefazInfLocalCarrega): TJSONValue;
    function TMdfeSefazInfLocalCarregaToJson(Source: TMdfeSefazInfLocalCarrega): string;
    function TMdfeSefazInfLocalCarregaFromJsonValue(Source: TJSONValue): TMdfeSefazInfLocalCarrega;
    function TMdfeSefazInfLocalCarregaFromJson(Source: string): TMdfeSefazInfLocalCarrega;
    function TMdfeSefazInfLocalDescarregaToJsonValue(Source: TMdfeSefazInfLocalDescarrega): TJSONValue;
    function TMdfeSefazInfLocalDescarregaToJson(Source: TMdfeSefazInfLocalDescarrega): string;
    function TMdfeSefazInfLocalDescarregaFromJsonValue(Source: TJSONValue): TMdfeSefazInfLocalDescarrega;
    function TMdfeSefazInfLocalDescarregaFromJson(Source: string): TMdfeSefazInfLocalDescarrega;
    function TMdfeSefazInfLotacaoToJsonValue(Source: TMdfeSefazInfLotacao): TJSONValue;
    function TMdfeSefazInfLotacaoToJson(Source: TMdfeSefazInfLotacao): string;
    function TMdfeSefazInfLotacaoFromJsonValue(Source: TJSONValue): TMdfeSefazInfLotacao;
    function TMdfeSefazInfLotacaoFromJson(Source: string): TMdfeSefazInfLotacao;
    function TMdfeSefazProdPredToJsonValue(Source: TMdfeSefazProdPred): TJSONValue;
    function TMdfeSefazProdPredToJson(Source: TMdfeSefazProdPred): string;
    function TMdfeSefazProdPredFromJsonValue(Source: TJSONValue): TMdfeSefazProdPred;
    function TMdfeSefazProdPredFromJson(Source: string): TMdfeSefazProdPred;
    function TMdfeSefazTotToJsonValue(Source: TMdfeSefazTot): TJSONValue;
    function TMdfeSefazTotToJson(Source: TMdfeSefazTot): string;
    function TMdfeSefazTotFromJsonValue(Source: TJSONValue): TMdfeSefazTot;
    function TMdfeSefazTotFromJson(Source: string): TMdfeSefazTot;
    function TMdfeSefazLacresToJsonValue(Source: TMdfeSefazLacres): TJSONValue;
    function TMdfeSefazLacresToJson(Source: TMdfeSefazLacres): string;
    function TMdfeSefazLacresFromJsonValue(Source: TJSONValue): TMdfeSefazLacres;
    function TMdfeSefazLacresFromJson(Source: string): TMdfeSefazLacres;
    function TMdfeSefazLacresListToJsonValue(Source: TMdfeSefazLacresList): TJSONValue;
    function TMdfeSefazLacresListToJson(Source: TMdfeSefazLacresList): string;
    function TMdfeSefazLacresListFromJsonValue(Source: TJSONValue): TMdfeSefazLacresList;
    function TMdfeSefazLacresListFromJson(Source: string): TMdfeSefazLacresList;
    function TMdfeSefazAutXMLToJsonValue(Source: TMdfeSefazAutXML): TJSONValue;
    function TMdfeSefazAutXMLToJson(Source: TMdfeSefazAutXML): string;
    function TMdfeSefazAutXMLFromJsonValue(Source: TJSONValue): TMdfeSefazAutXML;
    function TMdfeSefazAutXMLFromJson(Source: string): TMdfeSefazAutXML;
    function TMdfeSefazAutXMLListToJsonValue(Source: TMdfeSefazAutXMLList): TJSONValue;
    function TMdfeSefazAutXMLListToJson(Source: TMdfeSefazAutXMLList): string;
    function TMdfeSefazAutXMLListFromJsonValue(Source: TJSONValue): TMdfeSefazAutXMLList;
    function TMdfeSefazAutXMLListFromJson(Source: string): TMdfeSefazAutXMLList;
    function TMdfeSefazInfAdicToJsonValue(Source: TMdfeSefazInfAdic): TJSONValue;
    function TMdfeSefazInfAdicToJson(Source: TMdfeSefazInfAdic): string;
    function TMdfeSefazInfAdicFromJsonValue(Source: TJSONValue): TMdfeSefazInfAdic;
    function TMdfeSefazInfAdicFromJson(Source: string): TMdfeSefazInfAdic;
    function TMdfeSefazRespTecToJsonValue(Source: TMdfeSefazRespTec): TJSONValue;
    function TMdfeSefazRespTecToJson(Source: TMdfeSefazRespTec): string;
    function TMdfeSefazRespTecFromJsonValue(Source: TJSONValue): TMdfeSefazRespTec;
    function TMdfeSefazRespTecFromJson(Source: string): TMdfeSefazRespTec;
    function TMdfeSefazInfSolicNFFToJsonValue(Source: TMdfeSefazInfSolicNFF): TJSONValue;
    function TMdfeSefazInfSolicNFFToJson(Source: TMdfeSefazInfSolicNFF): string;
    function TMdfeSefazInfSolicNFFFromJsonValue(Source: TJSONValue): TMdfeSefazInfSolicNFF;
    function TMdfeSefazInfSolicNFFFromJson(Source: string): TMdfeSefazInfSolicNFF;
    function TMdfeSefazInfMDFeToJsonValue(Source: TMdfeSefazInfMDFe): TJSONValue;
    function TMdfeSefazInfMDFeToJson(Source: TMdfeSefazInfMDFe): string;
    function TMdfeSefazInfMDFeFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFe;
    function TMdfeSefazInfMDFeFromJson(Source: string): TMdfeSefazInfMDFe;
    function TMdfeSefazInfMDFeSuplToJsonValue(Source: TMdfeSefazInfMDFeSupl): TJSONValue;
    function TMdfeSefazInfMDFeSuplToJson(Source: TMdfeSefazInfMDFeSupl): string;
    function TMdfeSefazInfMDFeSuplFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeSupl;
    function TMdfeSefazInfMDFeSuplFromJson(Source: string): TMdfeSefazInfMDFeSupl;
    function TMdfePedidoEmissaoToJsonValue(Source: TMdfePedidoEmissao): TJSONValue;
    function TMdfePedidoEmissaoToJson(Source: TMdfePedidoEmissao): string;
    function TMdfePedidoEmissaoFromJsonValue(Source: TJSONValue): TMdfePedidoEmissao;
    function TMdfePedidoEmissaoFromJson(Source: string): TMdfePedidoEmissao;
    function TMdfePedidoEmissaoListToJsonValue(Source: TMdfePedidoEmissaoList): TJSONValue;
    function TMdfePedidoEmissaoListToJson(Source: TMdfePedidoEmissaoList): string;
    function TMdfePedidoEmissaoListFromJsonValue(Source: TJSONValue): TMdfePedidoEmissaoList;
    function TMdfePedidoEmissaoListFromJson(Source: string): TMdfePedidoEmissaoList;
    function TMdfePedidoEmissaoLoteToJsonValue(Source: TMdfePedidoEmissaoLote): TJSONValue;
    function TMdfePedidoEmissaoLoteToJson(Source: TMdfePedidoEmissaoLote): string;
    function TMdfePedidoEmissaoLoteFromJsonValue(Source: TJSONValue): TMdfePedidoEmissaoLote;
    function TMdfePedidoEmissaoLoteFromJson(Source: string): TMdfePedidoEmissaoLote;
    function TMdfePedidoCancelamentoToJsonValue(Source: TMdfePedidoCancelamento): TJSONValue;
    function TMdfePedidoCancelamentoToJson(Source: TMdfePedidoCancelamento): string;
    function TMdfePedidoCancelamentoFromJsonValue(Source: TJSONValue): TMdfePedidoCancelamento;
    function TMdfePedidoCancelamentoFromJson(Source: string): TMdfePedidoCancelamento;
    function TMdfePedidoEncerramentoToJsonValue(Source: TMdfePedidoEncerramento): TJSONValue;
    function TMdfePedidoEncerramentoToJson(Source: TMdfePedidoEncerramento): string;
    function TMdfePedidoEncerramentoFromJsonValue(Source: TJSONValue): TMdfePedidoEncerramento;
    function TMdfePedidoEncerramentoFromJson(Source: string): TMdfePedidoEncerramento;
    function TMdfeEncerramentoToJsonValue(Source: TMdfeEncerramento): TJSONValue;
    function TMdfeEncerramentoToJson(Source: TMdfeEncerramento): string;
    function TMdfeEncerramentoFromJsonValue(Source: TJSONValue): TMdfeEncerramento;
    function TMdfeEncerramentoFromJson(Source: string): TMdfeEncerramento;
    function TMdfePedidoInclusaoCondutorToJsonValue(Source: TMdfePedidoInclusaoCondutor): TJSONValue;
    function TMdfePedidoInclusaoCondutorToJson(Source: TMdfePedidoInclusaoCondutor): string;
    function TMdfePedidoInclusaoCondutorFromJsonValue(Source: TJSONValue): TMdfePedidoInclusaoCondutor;
    function TMdfePedidoInclusaoCondutorFromJson(Source: string): TMdfePedidoInclusaoCondutor;
    function TMdfeInclusaoCondutorToJsonValue(Source: TMdfeInclusaoCondutor): TJSONValue;
    function TMdfeInclusaoCondutorToJson(Source: TMdfeInclusaoCondutor): string;
    function TMdfeInclusaoCondutorFromJsonValue(Source: TJSONValue): TMdfeInclusaoCondutor;
    function TMdfeInclusaoCondutorFromJson(Source: string): TMdfeInclusaoCondutor;
    function TMdfeDocumentoVinculadoToJsonValue(Source: TMdfeDocumentoVinculado): TJSONValue;
    function TMdfeDocumentoVinculadoToJson(Source: TMdfeDocumentoVinculado): string;
    function TMdfeDocumentoVinculadoFromJsonValue(Source: TJSONValue): TMdfeDocumentoVinculado;
    function TMdfeDocumentoVinculadoFromJson(Source: string): TMdfeDocumentoVinculado;
    function TMdfeDocumentoVinculadoListToJsonValue(Source: TMdfeDocumentoVinculadoList): TJSONValue;
    function TMdfeDocumentoVinculadoListToJson(Source: TMdfeDocumentoVinculadoList): string;
    function TMdfeDocumentoVinculadoListFromJsonValue(Source: TJSONValue): TMdfeDocumentoVinculadoList;
    function TMdfeDocumentoVinculadoListFromJson(Source: string): TMdfeDocumentoVinculadoList;
    function TMdfePedidoInclusaoDfeToJsonValue(Source: TMdfePedidoInclusaoDfe): TJSONValue;
    function TMdfePedidoInclusaoDfeToJson(Source: TMdfePedidoInclusaoDfe): string;
    function TMdfePedidoInclusaoDfeFromJsonValue(Source: TJSONValue): TMdfePedidoInclusaoDfe;
    function TMdfePedidoInclusaoDfeFromJson(Source: string): TMdfePedidoInclusaoDfe;
    function TMdfeInclusaoDfeToJsonValue(Source: TMdfeInclusaoDfe): TJSONValue;
    function TMdfeInclusaoDfeToJson(Source: TMdfeInclusaoDfe): string;
    function TMdfeInclusaoDfeFromJsonValue(Source: TJSONValue): TMdfeInclusaoDfe;
    function TMdfeInclusaoDfeFromJson(Source: string): TMdfeInclusaoDfe;
    function TNfeSefazRefNFToJsonValue(Source: TNfeSefazRefNF): TJSONValue;
    function TNfeSefazRefNFToJson(Source: TNfeSefazRefNF): string;
    function TNfeSefazRefNFFromJsonValue(Source: TJSONValue): TNfeSefazRefNF;
    function TNfeSefazRefNFFromJson(Source: string): TNfeSefazRefNF;
    function TNfeSefazRefNFPToJsonValue(Source: TNfeSefazRefNFP): TJSONValue;
    function TNfeSefazRefNFPToJson(Source: TNfeSefazRefNFP): string;
    function TNfeSefazRefNFPFromJsonValue(Source: TJSONValue): TNfeSefazRefNFP;
    function TNfeSefazRefNFPFromJson(Source: string): TNfeSefazRefNFP;
    function TNfeSefazRefECFToJsonValue(Source: TNfeSefazRefECF): TJSONValue;
    function TNfeSefazRefECFToJson(Source: TNfeSefazRefECF): string;
    function TNfeSefazRefECFFromJsonValue(Source: TJSONValue): TNfeSefazRefECF;
    function TNfeSefazRefECFFromJson(Source: string): TNfeSefazRefECF;
    function TNfeSefazNFrefToJsonValue(Source: TNfeSefazNFref): TJSONValue;
    function TNfeSefazNFrefToJson(Source: TNfeSefazNFref): string;
    function TNfeSefazNFrefFromJsonValue(Source: TJSONValue): TNfeSefazNFref;
    function TNfeSefazNFrefFromJson(Source: string): TNfeSefazNFref;
    function TNfeSefazNFrefListToJsonValue(Source: TNfeSefazNFrefList): TJSONValue;
    function TNfeSefazNFrefListToJson(Source: TNfeSefazNFrefList): string;
    function TNfeSefazNFrefListFromJsonValue(Source: TJSONValue): TNfeSefazNFrefList;
    function TNfeSefazNFrefListFromJson(Source: string): TNfeSefazNFrefList;
    function TNfeSefazIdeToJsonValue(Source: TNfeSefazIde): TJSONValue;
    function TNfeSefazIdeToJson(Source: TNfeSefazIde): string;
    function TNfeSefazIdeFromJsonValue(Source: TJSONValue): TNfeSefazIde;
    function TNfeSefazIdeFromJson(Source: string): TNfeSefazIde;
    function TNfeSefazEnderEmiToJsonValue(Source: TNfeSefazEnderEmi): TJSONValue;
    function TNfeSefazEnderEmiToJson(Source: TNfeSefazEnderEmi): string;
    function TNfeSefazEnderEmiFromJsonValue(Source: TJSONValue): TNfeSefazEnderEmi;
    function TNfeSefazEnderEmiFromJson(Source: string): TNfeSefazEnderEmi;
    function TNfeSefazEmitToJsonValue(Source: TNfeSefazEmit): TJSONValue;
    function TNfeSefazEmitToJson(Source: TNfeSefazEmit): string;
    function TNfeSefazEmitFromJsonValue(Source: TJSONValue): TNfeSefazEmit;
    function TNfeSefazEmitFromJson(Source: string): TNfeSefazEmit;
    function TNfeSefazAvulsaToJsonValue(Source: TNfeSefazAvulsa): TJSONValue;
    function TNfeSefazAvulsaToJson(Source: TNfeSefazAvulsa): string;
    function TNfeSefazAvulsaFromJsonValue(Source: TJSONValue): TNfeSefazAvulsa;
    function TNfeSefazAvulsaFromJson(Source: string): TNfeSefazAvulsa;
    function TNfeSefazEnderecoToJsonValue(Source: TNfeSefazEndereco): TJSONValue;
    function TNfeSefazEnderecoToJson(Source: TNfeSefazEndereco): string;
    function TNfeSefazEnderecoFromJsonValue(Source: TJSONValue): TNfeSefazEndereco;
    function TNfeSefazEnderecoFromJson(Source: string): TNfeSefazEndereco;
    function TNfeSefazDestToJsonValue(Source: TNfeSefazDest): TJSONValue;
    function TNfeSefazDestToJson(Source: TNfeSefazDest): string;
    function TNfeSefazDestFromJsonValue(Source: TJSONValue): TNfeSefazDest;
    function TNfeSefazDestFromJson(Source: string): TNfeSefazDest;
    function TNfeSefazLocalToJsonValue(Source: TNfeSefazLocal): TJSONValue;
    function TNfeSefazLocalToJson(Source: TNfeSefazLocal): string;
    function TNfeSefazLocalFromJsonValue(Source: TJSONValue): TNfeSefazLocal;
    function TNfeSefazLocalFromJson(Source: string): TNfeSefazLocal;
    function TNfeSefazAutXMLToJsonValue(Source: TNfeSefazAutXML): TJSONValue;
    function TNfeSefazAutXMLToJson(Source: TNfeSefazAutXML): string;
    function TNfeSefazAutXMLFromJsonValue(Source: TJSONValue): TNfeSefazAutXML;
    function TNfeSefazAutXMLFromJson(Source: string): TNfeSefazAutXML;
    function TNfeSefazAutXMLListToJsonValue(Source: TNfeSefazAutXMLList): TJSONValue;
    function TNfeSefazAutXMLListToJson(Source: TNfeSefazAutXMLList): string;
    function TNfeSefazAutXMLListFromJsonValue(Source: TJSONValue): TNfeSefazAutXMLList;
    function TNfeSefazAutXMLListFromJson(Source: string): TNfeSefazAutXMLList;
    function TNfeSefazAdiToJsonValue(Source: TNfeSefazAdi): TJSONValue;
    function TNfeSefazAdiToJson(Source: TNfeSefazAdi): string;
    function TNfeSefazAdiFromJsonValue(Source: TJSONValue): TNfeSefazAdi;
    function TNfeSefazAdiFromJson(Source: string): TNfeSefazAdi;
    function TNfeSefazAdiListToJsonValue(Source: TNfeSefazAdiList): TJSONValue;
    function TNfeSefazAdiListToJson(Source: TNfeSefazAdiList): string;
    function TNfeSefazAdiListFromJsonValue(Source: TJSONValue): TNfeSefazAdiList;
    function TNfeSefazAdiListFromJson(Source: string): TNfeSefazAdiList;
    function TNfeSefazDIToJsonValue(Source: TNfeSefazDI): TJSONValue;
    function TNfeSefazDIToJson(Source: TNfeSefazDI): string;
    function TNfeSefazDIFromJsonValue(Source: TJSONValue): TNfeSefazDI;
    function TNfeSefazDIFromJson(Source: string): TNfeSefazDI;
    function TNfeSefazDIListToJsonValue(Source: TNfeSefazDIList): TJSONValue;
    function TNfeSefazDIListToJson(Source: TNfeSefazDIList): string;
    function TNfeSefazDIListFromJsonValue(Source: TJSONValue): TNfeSefazDIList;
    function TNfeSefazDIListFromJson(Source: string): TNfeSefazDIList;
    function TNfeSefazExportIndToJsonValue(Source: TNfeSefazExportInd): TJSONValue;
    function TNfeSefazExportIndToJson(Source: TNfeSefazExportInd): string;
    function TNfeSefazExportIndFromJsonValue(Source: TJSONValue): TNfeSefazExportInd;
    function TNfeSefazExportIndFromJson(Source: string): TNfeSefazExportInd;
    function TNfeSefazDetExportToJsonValue(Source: TNfeSefazDetExport): TJSONValue;
    function TNfeSefazDetExportToJson(Source: TNfeSefazDetExport): string;
    function TNfeSefazDetExportFromJsonValue(Source: TJSONValue): TNfeSefazDetExport;
    function TNfeSefazDetExportFromJson(Source: string): TNfeSefazDetExport;
    function TNfeSefazDetExportListToJsonValue(Source: TNfeSefazDetExportList): TJSONValue;
    function TNfeSefazDetExportListToJson(Source: TNfeSefazDetExportList): string;
    function TNfeSefazDetExportListFromJsonValue(Source: TJSONValue): TNfeSefazDetExportList;
    function TNfeSefazDetExportListFromJson(Source: string): TNfeSefazDetExportList;
    function TNfeSefazRastroToJsonValue(Source: TNfeSefazRastro): TJSONValue;
    function TNfeSefazRastroToJson(Source: TNfeSefazRastro): string;
    function TNfeSefazRastroFromJsonValue(Source: TJSONValue): TNfeSefazRastro;
    function TNfeSefazRastroFromJson(Source: string): TNfeSefazRastro;
    function TNfeSefazRastroListToJsonValue(Source: TNfeSefazRastroList): TJSONValue;
    function TNfeSefazRastroListToJson(Source: TNfeSefazRastroList): string;
    function TNfeSefazRastroListFromJsonValue(Source: TJSONValue): TNfeSefazRastroList;
    function TNfeSefazRastroListFromJson(Source: string): TNfeSefazRastroList;
    function TNfeSefazInfProdNFFToJsonValue(Source: TNfeSefazInfProdNFF): TJSONValue;
    function TNfeSefazInfProdNFFToJson(Source: TNfeSefazInfProdNFF): string;
    function TNfeSefazInfProdNFFFromJsonValue(Source: TJSONValue): TNfeSefazInfProdNFF;
    function TNfeSefazInfProdNFFFromJson(Source: string): TNfeSefazInfProdNFF;
    function TNfeSefazInfProdEmbToJsonValue(Source: TNfeSefazInfProdEmb): TJSONValue;
    function TNfeSefazInfProdEmbToJson(Source: TNfeSefazInfProdEmb): string;
    function TNfeSefazInfProdEmbFromJsonValue(Source: TJSONValue): TNfeSefazInfProdEmb;
    function TNfeSefazInfProdEmbFromJson(Source: string): TNfeSefazInfProdEmb;
    function TNfeSefazVeicProdToJsonValue(Source: TNfeSefazVeicProd): TJSONValue;
    function TNfeSefazVeicProdToJson(Source: TNfeSefazVeicProd): string;
    function TNfeSefazVeicProdFromJsonValue(Source: TJSONValue): TNfeSefazVeicProd;
    function TNfeSefazVeicProdFromJson(Source: string): TNfeSefazVeicProd;
    function TNfeSefazMedToJsonValue(Source: TNfeSefazMed): TJSONValue;
    function TNfeSefazMedToJson(Source: TNfeSefazMed): string;
    function TNfeSefazMedFromJsonValue(Source: TJSONValue): TNfeSefazMed;
    function TNfeSefazMedFromJson(Source: string): TNfeSefazMed;
    function TNfeSefazArmaToJsonValue(Source: TNfeSefazArma): TJSONValue;
    function TNfeSefazArmaToJson(Source: TNfeSefazArma): string;
    function TNfeSefazArmaFromJsonValue(Source: TJSONValue): TNfeSefazArma;
    function TNfeSefazArmaFromJson(Source: string): TNfeSefazArma;
    function TNfeSefazArmaListToJsonValue(Source: TNfeSefazArmaList): TJSONValue;
    function TNfeSefazArmaListToJson(Source: TNfeSefazArmaList): string;
    function TNfeSefazArmaListFromJsonValue(Source: TJSONValue): TNfeSefazArmaList;
    function TNfeSefazArmaListFromJson(Source: string): TNfeSefazArmaList;
    function TNfeSefazCIDEToJsonValue(Source: TNfeSefazCIDE): TJSONValue;
    function TNfeSefazCIDEToJson(Source: TNfeSefazCIDE): string;
    function TNfeSefazCIDEFromJsonValue(Source: TJSONValue): TNfeSefazCIDE;
    function TNfeSefazCIDEFromJson(Source: string): TNfeSefazCIDE;
    function TNfeSefazEncerranteToJsonValue(Source: TNfeSefazEncerrante): TJSONValue;
    function TNfeSefazEncerranteToJson(Source: TNfeSefazEncerrante): string;
    function TNfeSefazEncerranteFromJsonValue(Source: TJSONValue): TNfeSefazEncerrante;
    function TNfeSefazEncerranteFromJson(Source: string): TNfeSefazEncerrante;
    function TNfeSefazCombToJsonValue(Source: TNfeSefazComb): TJSONValue;
    function TNfeSefazCombToJson(Source: TNfeSefazComb): string;
    function TNfeSefazCombFromJsonValue(Source: TJSONValue): TNfeSefazComb;
    function TNfeSefazCombFromJson(Source: string): TNfeSefazComb;
    function TNfeSefazProdToJsonValue(Source: TNfeSefazProd): TJSONValue;
    function TNfeSefazProdToJson(Source: TNfeSefazProd): string;
    function TNfeSefazProdFromJsonValue(Source: TJSONValue): TNfeSefazProd;
    function TNfeSefazProdFromJson(Source: string): TNfeSefazProd;
    function TNfeSefazICMS00ToJsonValue(Source: TNfeSefazICMS00): TJSONValue;
    function TNfeSefazICMS00ToJson(Source: TNfeSefazICMS00): string;
    function TNfeSefazICMS00FromJsonValue(Source: TJSONValue): TNfeSefazICMS00;
    function TNfeSefazICMS00FromJson(Source: string): TNfeSefazICMS00;
    function TNfeSefazICMS10ToJsonValue(Source: TNfeSefazICMS10): TJSONValue;
    function TNfeSefazICMS10ToJson(Source: TNfeSefazICMS10): string;
    function TNfeSefazICMS10FromJsonValue(Source: TJSONValue): TNfeSefazICMS10;
    function TNfeSefazICMS10FromJson(Source: string): TNfeSefazICMS10;
    function TNfeSefazICMS20ToJsonValue(Source: TNfeSefazICMS20): TJSONValue;
    function TNfeSefazICMS20ToJson(Source: TNfeSefazICMS20): string;
    function TNfeSefazICMS20FromJsonValue(Source: TJSONValue): TNfeSefazICMS20;
    function TNfeSefazICMS20FromJson(Source: string): TNfeSefazICMS20;
    function TNfeSefazICMS30ToJsonValue(Source: TNfeSefazICMS30): TJSONValue;
    function TNfeSefazICMS30ToJson(Source: TNfeSefazICMS30): string;
    function TNfeSefazICMS30FromJsonValue(Source: TJSONValue): TNfeSefazICMS30;
    function TNfeSefazICMS30FromJson(Source: string): TNfeSefazICMS30;
    function TNfeSefazICMS40ToJsonValue(Source: TNfeSefazICMS40): TJSONValue;
    function TNfeSefazICMS40ToJson(Source: TNfeSefazICMS40): string;
    function TNfeSefazICMS40FromJsonValue(Source: TJSONValue): TNfeSefazICMS40;
    function TNfeSefazICMS40FromJson(Source: string): TNfeSefazICMS40;
    function TNfeSefazICMS51ToJsonValue(Source: TNfeSefazICMS51): TJSONValue;
    function TNfeSefazICMS51ToJson(Source: TNfeSefazICMS51): string;
    function TNfeSefazICMS51FromJsonValue(Source: TJSONValue): TNfeSefazICMS51;
    function TNfeSefazICMS51FromJson(Source: string): TNfeSefazICMS51;
    function TNfeSefazICMS60ToJsonValue(Source: TNfeSefazICMS60): TJSONValue;
    function TNfeSefazICMS60ToJson(Source: TNfeSefazICMS60): string;
    function TNfeSefazICMS60FromJsonValue(Source: TJSONValue): TNfeSefazICMS60;
    function TNfeSefazICMS60FromJson(Source: string): TNfeSefazICMS60;
    function TNfeSefazICMS70ToJsonValue(Source: TNfeSefazICMS70): TJSONValue;
    function TNfeSefazICMS70ToJson(Source: TNfeSefazICMS70): string;
    function TNfeSefazICMS70FromJsonValue(Source: TJSONValue): TNfeSefazICMS70;
    function TNfeSefazICMS70FromJson(Source: string): TNfeSefazICMS70;
    function TNfeSefazICMS90ToJsonValue(Source: TNfeSefazICMS90): TJSONValue;
    function TNfeSefazICMS90ToJson(Source: TNfeSefazICMS90): string;
    function TNfeSefazICMS90FromJsonValue(Source: TJSONValue): TNfeSefazICMS90;
    function TNfeSefazICMS90FromJson(Source: string): TNfeSefazICMS90;
    function TNfeSefazICMSPartToJsonValue(Source: TNfeSefazICMSPart): TJSONValue;
    function TNfeSefazICMSPartToJson(Source: TNfeSefazICMSPart): string;
    function TNfeSefazICMSPartFromJsonValue(Source: TJSONValue): TNfeSefazICMSPart;
    function TNfeSefazICMSPartFromJson(Source: string): TNfeSefazICMSPart;
    function TNfeSefazICMSSTToJsonValue(Source: TNfeSefazICMSST): TJSONValue;
    function TNfeSefazICMSSTToJson(Source: TNfeSefazICMSST): string;
    function TNfeSefazICMSSTFromJsonValue(Source: TJSONValue): TNfeSefazICMSST;
    function TNfeSefazICMSSTFromJson(Source: string): TNfeSefazICMSST;
    function TNfeSefazICMSSN101ToJsonValue(Source: TNfeSefazICMSSN101): TJSONValue;
    function TNfeSefazICMSSN101ToJson(Source: TNfeSefazICMSSN101): string;
    function TNfeSefazICMSSN101FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN101;
    function TNfeSefazICMSSN101FromJson(Source: string): TNfeSefazICMSSN101;
    function TNfeSefazICMSSN102ToJsonValue(Source: TNfeSefazICMSSN102): TJSONValue;
    function TNfeSefazICMSSN102ToJson(Source: TNfeSefazICMSSN102): string;
    function TNfeSefazICMSSN102FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN102;
    function TNfeSefazICMSSN102FromJson(Source: string): TNfeSefazICMSSN102;
    function TNfeSefazICMSSN201ToJsonValue(Source: TNfeSefazICMSSN201): TJSONValue;
    function TNfeSefazICMSSN201ToJson(Source: TNfeSefazICMSSN201): string;
    function TNfeSefazICMSSN201FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN201;
    function TNfeSefazICMSSN201FromJson(Source: string): TNfeSefazICMSSN201;
    function TNfeSefazICMSSN202ToJsonValue(Source: TNfeSefazICMSSN202): TJSONValue;
    function TNfeSefazICMSSN202ToJson(Source: TNfeSefazICMSSN202): string;
    function TNfeSefazICMSSN202FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN202;
    function TNfeSefazICMSSN202FromJson(Source: string): TNfeSefazICMSSN202;
    function TNfeSefazICMSSN500ToJsonValue(Source: TNfeSefazICMSSN500): TJSONValue;
    function TNfeSefazICMSSN500ToJson(Source: TNfeSefazICMSSN500): string;
    function TNfeSefazICMSSN500FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN500;
    function TNfeSefazICMSSN500FromJson(Source: string): TNfeSefazICMSSN500;
    function TNfeSefazICMSSN900ToJsonValue(Source: TNfeSefazICMSSN900): TJSONValue;
    function TNfeSefazICMSSN900ToJson(Source: TNfeSefazICMSSN900): string;
    function TNfeSefazICMSSN900FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN900;
    function TNfeSefazICMSSN900FromJson(Source: string): TNfeSefazICMSSN900;
    function TNfeSefazICMSToJsonValue(Source: TNfeSefazICMS): TJSONValue;
    function TNfeSefazICMSToJson(Source: TNfeSefazICMS): string;
    function TNfeSefazICMSFromJsonValue(Source: TJSONValue): TNfeSefazICMS;
    function TNfeSefazICMSFromJson(Source: string): TNfeSefazICMS;
    function TNfeSefazIPITribToJsonValue(Source: TNfeSefazIPITrib): TJSONValue;
    function TNfeSefazIPITribToJson(Source: TNfeSefazIPITrib): string;
    function TNfeSefazIPITribFromJsonValue(Source: TJSONValue): TNfeSefazIPITrib;
    function TNfeSefazIPITribFromJson(Source: string): TNfeSefazIPITrib;
    function TNfeSefazIPINTToJsonValue(Source: TNfeSefazIPINT): TJSONValue;
    function TNfeSefazIPINTToJson(Source: TNfeSefazIPINT): string;
    function TNfeSefazIPINTFromJsonValue(Source: TJSONValue): TNfeSefazIPINT;
    function TNfeSefazIPINTFromJson(Source: string): TNfeSefazIPINT;
    function TNfeSefazIpiToJsonValue(Source: TNfeSefazIpi): TJSONValue;
    function TNfeSefazIpiToJson(Source: TNfeSefazIpi): string;
    function TNfeSefazIpiFromJsonValue(Source: TJSONValue): TNfeSefazIpi;
    function TNfeSefazIpiFromJson(Source: string): TNfeSefazIpi;
    function TNfeSefazIIToJsonValue(Source: TNfeSefazII): TJSONValue;
    function TNfeSefazIIToJson(Source: TNfeSefazII): string;
    function TNfeSefazIIFromJsonValue(Source: TJSONValue): TNfeSefazII;
    function TNfeSefazIIFromJson(Source: string): TNfeSefazII;
    function TNfeSefazISSQNToJsonValue(Source: TNfeSefazISSQN): TJSONValue;
    function TNfeSefazISSQNToJson(Source: TNfeSefazISSQN): string;
    function TNfeSefazISSQNFromJsonValue(Source: TJSONValue): TNfeSefazISSQN;
    function TNfeSefazISSQNFromJson(Source: string): TNfeSefazISSQN;
    function TNfeSefazPISAliqToJsonValue(Source: TNfeSefazPISAliq): TJSONValue;
    function TNfeSefazPISAliqToJson(Source: TNfeSefazPISAliq): string;
    function TNfeSefazPISAliqFromJsonValue(Source: TJSONValue): TNfeSefazPISAliq;
    function TNfeSefazPISAliqFromJson(Source: string): TNfeSefazPISAliq;
    function TNfeSefazPISQtdeToJsonValue(Source: TNfeSefazPISQtde): TJSONValue;
    function TNfeSefazPISQtdeToJson(Source: TNfeSefazPISQtde): string;
    function TNfeSefazPISQtdeFromJsonValue(Source: TJSONValue): TNfeSefazPISQtde;
    function TNfeSefazPISQtdeFromJson(Source: string): TNfeSefazPISQtde;
    function TNfeSefazPISNTToJsonValue(Source: TNfeSefazPISNT): TJSONValue;
    function TNfeSefazPISNTToJson(Source: TNfeSefazPISNT): string;
    function TNfeSefazPISNTFromJsonValue(Source: TJSONValue): TNfeSefazPISNT;
    function TNfeSefazPISNTFromJson(Source: string): TNfeSefazPISNT;
    function TNfeSefazPISOutrToJsonValue(Source: TNfeSefazPISOutr): TJSONValue;
    function TNfeSefazPISOutrToJson(Source: TNfeSefazPISOutr): string;
    function TNfeSefazPISOutrFromJsonValue(Source: TJSONValue): TNfeSefazPISOutr;
    function TNfeSefazPISOutrFromJson(Source: string): TNfeSefazPISOutr;
    function TNfeSefazPISToJsonValue(Source: TNfeSefazPIS): TJSONValue;
    function TNfeSefazPISToJson(Source: TNfeSefazPIS): string;
    function TNfeSefazPISFromJsonValue(Source: TJSONValue): TNfeSefazPIS;
    function TNfeSefazPISFromJson(Source: string): TNfeSefazPIS;
    function TNfeSefazPISSTToJsonValue(Source: TNfeSefazPISST): TJSONValue;
    function TNfeSefazPISSTToJson(Source: TNfeSefazPISST): string;
    function TNfeSefazPISSTFromJsonValue(Source: TJSONValue): TNfeSefazPISST;
    function TNfeSefazPISSTFromJson(Source: string): TNfeSefazPISST;
    function TNfeSefazCOFINSAliqToJsonValue(Source: TNfeSefazCOFINSAliq): TJSONValue;
    function TNfeSefazCOFINSAliqToJson(Source: TNfeSefazCOFINSAliq): string;
    function TNfeSefazCOFINSAliqFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSAliq;
    function TNfeSefazCOFINSAliqFromJson(Source: string): TNfeSefazCOFINSAliq;
    function TNfeSefazCOFINSQtdeToJsonValue(Source: TNfeSefazCOFINSQtde): TJSONValue;
    function TNfeSefazCOFINSQtdeToJson(Source: TNfeSefazCOFINSQtde): string;
    function TNfeSefazCOFINSQtdeFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSQtde;
    function TNfeSefazCOFINSQtdeFromJson(Source: string): TNfeSefazCOFINSQtde;
    function TNfeSefazCOFINSNTToJsonValue(Source: TNfeSefazCOFINSNT): TJSONValue;
    function TNfeSefazCOFINSNTToJson(Source: TNfeSefazCOFINSNT): string;
    function TNfeSefazCOFINSNTFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSNT;
    function TNfeSefazCOFINSNTFromJson(Source: string): TNfeSefazCOFINSNT;
    function TNfeSefazCOFINSOutrToJsonValue(Source: TNfeSefazCOFINSOutr): TJSONValue;
    function TNfeSefazCOFINSOutrToJson(Source: TNfeSefazCOFINSOutr): string;
    function TNfeSefazCOFINSOutrFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSOutr;
    function TNfeSefazCOFINSOutrFromJson(Source: string): TNfeSefazCOFINSOutr;
    function TNfeSefazCOFINSToJsonValue(Source: TNfeSefazCOFINS): TJSONValue;
    function TNfeSefazCOFINSToJson(Source: TNfeSefazCOFINS): string;
    function TNfeSefazCOFINSFromJsonValue(Source: TJSONValue): TNfeSefazCOFINS;
    function TNfeSefazCOFINSFromJson(Source: string): TNfeSefazCOFINS;
    function TNfeSefazCOFINSSTToJsonValue(Source: TNfeSefazCOFINSST): TJSONValue;
    function TNfeSefazCOFINSSTToJson(Source: TNfeSefazCOFINSST): string;
    function TNfeSefazCOFINSSTFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSST;
    function TNfeSefazCOFINSSTFromJson(Source: string): TNfeSefazCOFINSST;
    function TNfeSefazICMSUFDestToJsonValue(Source: TNfeSefazICMSUFDest): TJSONValue;
    function TNfeSefazICMSUFDestToJson(Source: TNfeSefazICMSUFDest): string;
    function TNfeSefazICMSUFDestFromJsonValue(Source: TJSONValue): TNfeSefazICMSUFDest;
    function TNfeSefazICMSUFDestFromJson(Source: string): TNfeSefazICMSUFDest;
    function TNfeSefazImpostoToJsonValue(Source: TNfeSefazImposto): TJSONValue;
    function TNfeSefazImpostoToJson(Source: TNfeSefazImposto): string;
    function TNfeSefazImpostoFromJsonValue(Source: TJSONValue): TNfeSefazImposto;
    function TNfeSefazImpostoFromJson(Source: string): TNfeSefazImposto;
    function TNfeSefazImpostoDevolIPIToJsonValue(Source: TNfeSefazImpostoDevolIPI): TJSONValue;
    function TNfeSefazImpostoDevolIPIToJson(Source: TNfeSefazImpostoDevolIPI): string;
    function TNfeSefazImpostoDevolIPIFromJsonValue(Source: TJSONValue): TNfeSefazImpostoDevolIPI;
    function TNfeSefazImpostoDevolIPIFromJson(Source: string): TNfeSefazImpostoDevolIPI;
    function TNfeSefazImpostoDevolToJsonValue(Source: TNfeSefazImpostoDevol): TJSONValue;
    function TNfeSefazImpostoDevolToJson(Source: TNfeSefazImpostoDevol): string;
    function TNfeSefazImpostoDevolFromJsonValue(Source: TJSONValue): TNfeSefazImpostoDevol;
    function TNfeSefazImpostoDevolFromJson(Source: string): TNfeSefazImpostoDevol;
    function TNfeSefazDetToJsonValue(Source: TNfeSefazDet): TJSONValue;
    function TNfeSefazDetToJson(Source: TNfeSefazDet): string;
    function TNfeSefazDetFromJsonValue(Source: TJSONValue): TNfeSefazDet;
    function TNfeSefazDetFromJson(Source: string): TNfeSefazDet;
    function TNfeSefazDetListToJsonValue(Source: TNfeSefazDetList): TJSONValue;
    function TNfeSefazDetListToJson(Source: TNfeSefazDetList): string;
    function TNfeSefazDetListFromJsonValue(Source: TJSONValue): TNfeSefazDetList;
    function TNfeSefazDetListFromJson(Source: string): TNfeSefazDetList;
    function TNfeSefazICMSTotToJsonValue(Source: TNfeSefazICMSTot): TJSONValue;
    function TNfeSefazICMSTotToJson(Source: TNfeSefazICMSTot): string;
    function TNfeSefazICMSTotFromJsonValue(Source: TJSONValue): TNfeSefazICMSTot;
    function TNfeSefazICMSTotFromJson(Source: string): TNfeSefazICMSTot;
    function TNfeSefazISSQNtotToJsonValue(Source: TNfeSefazISSQNtot): TJSONValue;
    function TNfeSefazISSQNtotToJson(Source: TNfeSefazISSQNtot): string;
    function TNfeSefazISSQNtotFromJsonValue(Source: TJSONValue): TNfeSefazISSQNtot;
    function TNfeSefazISSQNtotFromJson(Source: string): TNfeSefazISSQNtot;
    function TNfeSefazRetTribToJsonValue(Source: TNfeSefazRetTrib): TJSONValue;
    function TNfeSefazRetTribToJson(Source: TNfeSefazRetTrib): string;
    function TNfeSefazRetTribFromJsonValue(Source: TJSONValue): TNfeSefazRetTrib;
    function TNfeSefazRetTribFromJson(Source: string): TNfeSefazRetTrib;
    function TNfeSefazTotalToJsonValue(Source: TNfeSefazTotal): TJSONValue;
    function TNfeSefazTotalToJson(Source: TNfeSefazTotal): string;
    function TNfeSefazTotalFromJsonValue(Source: TJSONValue): TNfeSefazTotal;
    function TNfeSefazTotalFromJson(Source: string): TNfeSefazTotal;
    function TNfeSefazTransportaToJsonValue(Source: TNfeSefazTransporta): TJSONValue;
    function TNfeSefazTransportaToJson(Source: TNfeSefazTransporta): string;
    function TNfeSefazTransportaFromJsonValue(Source: TJSONValue): TNfeSefazTransporta;
    function TNfeSefazTransportaFromJson(Source: string): TNfeSefazTransporta;
    function TNfeSefazRetTranspToJsonValue(Source: TNfeSefazRetTransp): TJSONValue;
    function TNfeSefazRetTranspToJson(Source: TNfeSefazRetTransp): string;
    function TNfeSefazRetTranspFromJsonValue(Source: TJSONValue): TNfeSefazRetTransp;
    function TNfeSefazRetTranspFromJson(Source: string): TNfeSefazRetTransp;
    function TNfeSefazVeiculoToJsonValue(Source: TNfeSefazVeiculo): TJSONValue;
    function TNfeSefazVeiculoToJson(Source: TNfeSefazVeiculo): string;
    function TNfeSefazVeiculoFromJsonValue(Source: TJSONValue): TNfeSefazVeiculo;
    function TNfeSefazVeiculoFromJson(Source: string): TNfeSefazVeiculo;
    function TNfeSefazVeiculoListToJsonValue(Source: TNfeSefazVeiculoList): TJSONValue;
    function TNfeSefazVeiculoListToJson(Source: TNfeSefazVeiculoList): string;
    function TNfeSefazVeiculoListFromJsonValue(Source: TJSONValue): TNfeSefazVeiculoList;
    function TNfeSefazVeiculoListFromJson(Source: string): TNfeSefazVeiculoList;
    function TNfeSefazLacresToJsonValue(Source: TNfeSefazLacres): TJSONValue;
    function TNfeSefazLacresToJson(Source: TNfeSefazLacres): string;
    function TNfeSefazLacresFromJsonValue(Source: TJSONValue): TNfeSefazLacres;
    function TNfeSefazLacresFromJson(Source: string): TNfeSefazLacres;
    function TNfeSefazLacresListToJsonValue(Source: TNfeSefazLacresList): TJSONValue;
    function TNfeSefazLacresListToJson(Source: TNfeSefazLacresList): string;
    function TNfeSefazLacresListFromJsonValue(Source: TJSONValue): TNfeSefazLacresList;
    function TNfeSefazLacresListFromJson(Source: string): TNfeSefazLacresList;
    function TNfeSefazVolToJsonValue(Source: TNfeSefazVol): TJSONValue;
    function TNfeSefazVolToJson(Source: TNfeSefazVol): string;
    function TNfeSefazVolFromJsonValue(Source: TJSONValue): TNfeSefazVol;
    function TNfeSefazVolFromJson(Source: string): TNfeSefazVol;
    function TNfeSefazVolListToJsonValue(Source: TNfeSefazVolList): TJSONValue;
    function TNfeSefazVolListToJson(Source: TNfeSefazVolList): string;
    function TNfeSefazVolListFromJsonValue(Source: TJSONValue): TNfeSefazVolList;
    function TNfeSefazVolListFromJson(Source: string): TNfeSefazVolList;
    function TNfeSefazTranspToJsonValue(Source: TNfeSefazTransp): TJSONValue;
    function TNfeSefazTranspToJson(Source: TNfeSefazTransp): string;
    function TNfeSefazTranspFromJsonValue(Source: TJSONValue): TNfeSefazTransp;
    function TNfeSefazTranspFromJson(Source: string): TNfeSefazTransp;
    function TNfeSefazFatToJsonValue(Source: TNfeSefazFat): TJSONValue;
    function TNfeSefazFatToJson(Source: TNfeSefazFat): string;
    function TNfeSefazFatFromJsonValue(Source: TJSONValue): TNfeSefazFat;
    function TNfeSefazFatFromJson(Source: string): TNfeSefazFat;
    function TNfeSefazDupToJsonValue(Source: TNfeSefazDup): TJSONValue;
    function TNfeSefazDupToJson(Source: TNfeSefazDup): string;
    function TNfeSefazDupFromJsonValue(Source: TJSONValue): TNfeSefazDup;
    function TNfeSefazDupFromJson(Source: string): TNfeSefazDup;
    function TNfeSefazDupListToJsonValue(Source: TNfeSefazDupList): TJSONValue;
    function TNfeSefazDupListToJson(Source: TNfeSefazDupList): string;
    function TNfeSefazDupListFromJsonValue(Source: TJSONValue): TNfeSefazDupList;
    function TNfeSefazDupListFromJson(Source: string): TNfeSefazDupList;
    function TNfeSefazCobrToJsonValue(Source: TNfeSefazCobr): TJSONValue;
    function TNfeSefazCobrToJson(Source: TNfeSefazCobr): string;
    function TNfeSefazCobrFromJsonValue(Source: TJSONValue): TNfeSefazCobr;
    function TNfeSefazCobrFromJson(Source: string): TNfeSefazCobr;
    function TNfeSefazCardToJsonValue(Source: TNfeSefazCard): TJSONValue;
    function TNfeSefazCardToJson(Source: TNfeSefazCard): string;
    function TNfeSefazCardFromJsonValue(Source: TJSONValue): TNfeSefazCard;
    function TNfeSefazCardFromJson(Source: string): TNfeSefazCard;
    function TNfeSefazDetPagToJsonValue(Source: TNfeSefazDetPag): TJSONValue;
    function TNfeSefazDetPagToJson(Source: TNfeSefazDetPag): string;
    function TNfeSefazDetPagFromJsonValue(Source: TJSONValue): TNfeSefazDetPag;
    function TNfeSefazDetPagFromJson(Source: string): TNfeSefazDetPag;
    function TNfeSefazDetPagListToJsonValue(Source: TNfeSefazDetPagList): TJSONValue;
    function TNfeSefazDetPagListToJson(Source: TNfeSefazDetPagList): string;
    function TNfeSefazDetPagListFromJsonValue(Source: TJSONValue): TNfeSefazDetPagList;
    function TNfeSefazDetPagListFromJson(Source: string): TNfeSefazDetPagList;
    function TNfeSefazPagToJsonValue(Source: TNfeSefazPag): TJSONValue;
    function TNfeSefazPagToJson(Source: TNfeSefazPag): string;
    function TNfeSefazPagFromJsonValue(Source: TJSONValue): TNfeSefazPag;
    function TNfeSefazPagFromJson(Source: string): TNfeSefazPag;
    function TNfeSefazInfIntermedToJsonValue(Source: TNfeSefazInfIntermed): TJSONValue;
    function TNfeSefazInfIntermedToJson(Source: TNfeSefazInfIntermed): string;
    function TNfeSefazInfIntermedFromJsonValue(Source: TJSONValue): TNfeSefazInfIntermed;
    function TNfeSefazInfIntermedFromJson(Source: string): TNfeSefazInfIntermed;
    function TNfeSefazObsContToJsonValue(Source: TNfeSefazObsCont): TJSONValue;
    function TNfeSefazObsContToJson(Source: TNfeSefazObsCont): string;
    function TNfeSefazObsContFromJsonValue(Source: TJSONValue): TNfeSefazObsCont;
    function TNfeSefazObsContFromJson(Source: string): TNfeSefazObsCont;
    function TNfeSefazObsContListToJsonValue(Source: TNfeSefazObsContList): TJSONValue;
    function TNfeSefazObsContListToJson(Source: TNfeSefazObsContList): string;
    function TNfeSefazObsContListFromJsonValue(Source: TJSONValue): TNfeSefazObsContList;
    function TNfeSefazObsContListFromJson(Source: string): TNfeSefazObsContList;
    function TNfeSefazObsFiscoToJsonValue(Source: TNfeSefazObsFisco): TJSONValue;
    function TNfeSefazObsFiscoToJson(Source: TNfeSefazObsFisco): string;
    function TNfeSefazObsFiscoFromJsonValue(Source: TJSONValue): TNfeSefazObsFisco;
    function TNfeSefazObsFiscoFromJson(Source: string): TNfeSefazObsFisco;
    function TNfeSefazObsFiscoListToJsonValue(Source: TNfeSefazObsFiscoList): TJSONValue;
    function TNfeSefazObsFiscoListToJson(Source: TNfeSefazObsFiscoList): string;
    function TNfeSefazObsFiscoListFromJsonValue(Source: TJSONValue): TNfeSefazObsFiscoList;
    function TNfeSefazObsFiscoListFromJson(Source: string): TNfeSefazObsFiscoList;
    function TNfeSefazProcRefToJsonValue(Source: TNfeSefazProcRef): TJSONValue;
    function TNfeSefazProcRefToJson(Source: TNfeSefazProcRef): string;
    function TNfeSefazProcRefFromJsonValue(Source: TJSONValue): TNfeSefazProcRef;
    function TNfeSefazProcRefFromJson(Source: string): TNfeSefazProcRef;
    function TNfeSefazProcRefListToJsonValue(Source: TNfeSefazProcRefList): TJSONValue;
    function TNfeSefazProcRefListToJson(Source: TNfeSefazProcRefList): string;
    function TNfeSefazProcRefListFromJsonValue(Source: TJSONValue): TNfeSefazProcRefList;
    function TNfeSefazProcRefListFromJson(Source: string): TNfeSefazProcRefList;
    function TNfeSefazInfAdicToJsonValue(Source: TNfeSefazInfAdic): TJSONValue;
    function TNfeSefazInfAdicToJson(Source: TNfeSefazInfAdic): string;
    function TNfeSefazInfAdicFromJsonValue(Source: TJSONValue): TNfeSefazInfAdic;
    function TNfeSefazInfAdicFromJson(Source: string): TNfeSefazInfAdic;
    function TNfeSefazExportaToJsonValue(Source: TNfeSefazExporta): TJSONValue;
    function TNfeSefazExportaToJson(Source: TNfeSefazExporta): string;
    function TNfeSefazExportaFromJsonValue(Source: TJSONValue): TNfeSefazExporta;
    function TNfeSefazExportaFromJson(Source: string): TNfeSefazExporta;
    function TNfeSefazCompraToJsonValue(Source: TNfeSefazCompra): TJSONValue;
    function TNfeSefazCompraToJson(Source: TNfeSefazCompra): string;
    function TNfeSefazCompraFromJsonValue(Source: TJSONValue): TNfeSefazCompra;
    function TNfeSefazCompraFromJson(Source: string): TNfeSefazCompra;
    function TNfeSefazForDiaToJsonValue(Source: TNfeSefazForDia): TJSONValue;
    function TNfeSefazForDiaToJson(Source: TNfeSefazForDia): string;
    function TNfeSefazForDiaFromJsonValue(Source: TJSONValue): TNfeSefazForDia;
    function TNfeSefazForDiaFromJson(Source: string): TNfeSefazForDia;
    function TNfeSefazForDiaListToJsonValue(Source: TNfeSefazForDiaList): TJSONValue;
    function TNfeSefazForDiaListToJson(Source: TNfeSefazForDiaList): string;
    function TNfeSefazForDiaListFromJsonValue(Source: TJSONValue): TNfeSefazForDiaList;
    function TNfeSefazForDiaListFromJson(Source: string): TNfeSefazForDiaList;
    function TNfeSefazDeducToJsonValue(Source: TNfeSefazDeduc): TJSONValue;
    function TNfeSefazDeducToJson(Source: TNfeSefazDeduc): string;
    function TNfeSefazDeducFromJsonValue(Source: TJSONValue): TNfeSefazDeduc;
    function TNfeSefazDeducFromJson(Source: string): TNfeSefazDeduc;
    function TNfeSefazDeducListToJsonValue(Source: TNfeSefazDeducList): TJSONValue;
    function TNfeSefazDeducListToJson(Source: TNfeSefazDeducList): string;
    function TNfeSefazDeducListFromJsonValue(Source: TJSONValue): TNfeSefazDeducList;
    function TNfeSefazDeducListFromJson(Source: string): TNfeSefazDeducList;
    function TNfeSefazCanaToJsonValue(Source: TNfeSefazCana): TJSONValue;
    function TNfeSefazCanaToJson(Source: TNfeSefazCana): string;
    function TNfeSefazCanaFromJsonValue(Source: TJSONValue): TNfeSefazCana;
    function TNfeSefazCanaFromJson(Source: string): TNfeSefazCana;
    function TNfeSefazInfRespTecToJsonValue(Source: TNfeSefazInfRespTec): TJSONValue;
    function TNfeSefazInfRespTecToJson(Source: TNfeSefazInfRespTec): string;
    function TNfeSefazInfRespTecFromJsonValue(Source: TJSONValue): TNfeSefazInfRespTec;
    function TNfeSefazInfRespTecFromJson(Source: string): TNfeSefazInfRespTec;
    function TNfeSefazInfSolicNFFToJsonValue(Source: TNfeSefazInfSolicNFF): TJSONValue;
    function TNfeSefazInfSolicNFFToJson(Source: TNfeSefazInfSolicNFF): string;
    function TNfeSefazInfSolicNFFFromJsonValue(Source: TJSONValue): TNfeSefazInfSolicNFF;
    function TNfeSefazInfSolicNFFFromJson(Source: string): TNfeSefazInfSolicNFF;
    function TNfeSefazInfNFeToJsonValue(Source: TNfeSefazInfNFe): TJSONValue;
    function TNfeSefazInfNFeToJson(Source: TNfeSefazInfNFe): string;
    function TNfeSefazInfNFeFromJsonValue(Source: TJSONValue): TNfeSefazInfNFe;
    function TNfeSefazInfNFeFromJson(Source: string): TNfeSefazInfNFe;
    function TNfeSefazInfNFeSuplToJsonValue(Source: TNfeSefazInfNFeSupl): TJSONValue;
    function TNfeSefazInfNFeSuplToJson(Source: TNfeSefazInfNFeSupl): string;
    function TNfeSefazInfNFeSuplFromJsonValue(Source: TJSONValue): TNfeSefazInfNFeSupl;
    function TNfeSefazInfNFeSuplFromJson(Source: string): TNfeSefazInfNFeSupl;
    function TNfePedidoEmissaoToJsonValue(Source: TNfePedidoEmissao): TJSONValue;
    function TNfePedidoEmissaoToJson(Source: TNfePedidoEmissao): string;
    function TNfePedidoEmissaoFromJsonValue(Source: TJSONValue): TNfePedidoEmissao;
    function TNfePedidoEmissaoFromJson(Source: string): TNfePedidoEmissao;
    function TNfePedidoEmissaoListToJsonValue(Source: TNfePedidoEmissaoList): TJSONValue;
    function TNfePedidoEmissaoListToJson(Source: TNfePedidoEmissaoList): string;
    function TNfePedidoEmissaoListFromJsonValue(Source: TJSONValue): TNfePedidoEmissaoList;
    function TNfePedidoEmissaoListFromJson(Source: string): TNfePedidoEmissaoList;
    function TNfePedidoEmissaoLoteToJsonValue(Source: TNfePedidoEmissaoLote): TJSONValue;
    function TNfePedidoEmissaoLoteToJson(Source: TNfePedidoEmissaoLote): string;
    function TNfePedidoEmissaoLoteFromJsonValue(Source: TJSONValue): TNfePedidoEmissaoLote;
    function TNfePedidoEmissaoLoteFromJson(Source: string): TNfePedidoEmissaoLote;
    function TNfePedidoCancelamentoToJsonValue(Source: TNfePedidoCancelamento): TJSONValue;
    function TNfePedidoCancelamentoToJson(Source: TNfePedidoCancelamento): string;
    function TNfePedidoCancelamentoFromJsonValue(Source: TJSONValue): TNfePedidoCancelamento;
    function TNfePedidoCancelamentoFromJson(Source: string): TNfePedidoCancelamento;
    function TNfePedidoCartaCorrecaoToJsonValue(Source: TNfePedidoCartaCorrecao): TJSONValue;
    function TNfePedidoCartaCorrecaoToJson(Source: TNfePedidoCartaCorrecao): string;
    function TNfePedidoCartaCorrecaoFromJsonValue(Source: TJSONValue): TNfePedidoCartaCorrecao;
    function TNfePedidoCartaCorrecaoFromJson(Source: string): TNfePedidoCartaCorrecao;
    function TDfeCartaCorrecaoToJsonValue(Source: TDfeCartaCorrecao): TJSONValue;
    function TDfeCartaCorrecaoToJson(Source: TDfeCartaCorrecao): string;
    function TDfeCartaCorrecaoFromJsonValue(Source: TJSONValue): TDfeCartaCorrecao;
    function TDfeCartaCorrecaoFromJson(Source: string): TDfeCartaCorrecao;
    function TCnpjNaturezaJuridicaToJsonValue(Source: TCnpjNaturezaJuridica): TJSONValue;
    function TCnpjNaturezaJuridicaToJson(Source: TCnpjNaturezaJuridica): string;
    function TCnpjNaturezaJuridicaFromJsonValue(Source: TJSONValue): TCnpjNaturezaJuridica;
    function TCnpjNaturezaJuridicaFromJson(Source: string): TCnpjNaturezaJuridica;
    function TCnpjPorteEmpresaToJsonValue(Source: TCnpjPorteEmpresa): TJSONValue;
    function TCnpjPorteEmpresaToJson(Source: TCnpjPorteEmpresa): string;
    function TCnpjPorteEmpresaFromJsonValue(Source: TJSONValue): TCnpjPorteEmpresa;
    function TCnpjPorteEmpresaFromJson(Source: string): TCnpjPorteEmpresa;
    function TCnpjSituacaoCadastralToJsonValue(Source: TCnpjSituacaoCadastral): TJSONValue;
    function TCnpjSituacaoCadastralToJson(Source: TCnpjSituacaoCadastral): string;
    function TCnpjSituacaoCadastralFromJsonValue(Source: TJSONValue): TCnpjSituacaoCadastral;
    function TCnpjSituacaoCadastralFromJson(Source: string): TCnpjSituacaoCadastral;
    function TCnpjPaisToJsonValue(Source: TCnpjPais): TJSONValue;
    function TCnpjPaisToJson(Source: TCnpjPais): string;
    function TCnpjPaisFromJsonValue(Source: TJSONValue): TCnpjPais;
    function TCnpjPaisFromJson(Source: string): TCnpjPais;
    function TCnpjCnaeToJsonValue(Source: TCnpjCnae): TJSONValue;
    function TCnpjCnaeToJson(Source: TCnpjCnae): string;
    function TCnpjCnaeFromJsonValue(Source: TJSONValue): TCnpjCnae;
    function TCnpjCnaeFromJson(Source: string): TCnpjCnae;
    function TCnpjCnaeListToJsonValue(Source: TCnpjCnaeList): TJSONValue;
    function TCnpjCnaeListToJson(Source: TCnpjCnaeList): string;
    function TCnpjCnaeListFromJsonValue(Source: TJSONValue): TCnpjCnaeList;
    function TCnpjCnaeListFromJson(Source: string): TCnpjCnaeList;
    function TCnpjMunicipioToJsonValue(Source: TCnpjMunicipio): TJSONValue;
    function TCnpjMunicipioToJson(Source: TCnpjMunicipio): string;
    function TCnpjMunicipioFromJsonValue(Source: TJSONValue): TCnpjMunicipio;
    function TCnpjMunicipioFromJson(Source: string): TCnpjMunicipio;
    function TCnpjEnderecoToJsonValue(Source: TCnpjEndereco): TJSONValue;
    function TCnpjEnderecoToJson(Source: TCnpjEndereco): string;
    function TCnpjEnderecoFromJsonValue(Source: TJSONValue): TCnpjEndereco;
    function TCnpjEnderecoFromJson(Source: string): TCnpjEndereco;
    function TCnpjTelefoneToJsonValue(Source: TCnpjTelefone): TJSONValue;
    function TCnpjTelefoneToJson(Source: TCnpjTelefone): string;
    function TCnpjTelefoneFromJsonValue(Source: TJSONValue): TCnpjTelefone;
    function TCnpjTelefoneFromJson(Source: string): TCnpjTelefone;
    function TCnpjTelefoneListToJsonValue(Source: TCnpjTelefoneList): TJSONValue;
    function TCnpjTelefoneListToJson(Source: TCnpjTelefoneList): string;
    function TCnpjTelefoneListFromJsonValue(Source: TJSONValue): TCnpjTelefoneList;
    function TCnpjTelefoneListFromJson(Source: string): TCnpjTelefoneList;
    function TCnpjOpcaoSimplesToJsonValue(Source: TCnpjOpcaoSimples): TJSONValue;
    function TCnpjOpcaoSimplesToJson(Source: TCnpjOpcaoSimples): string;
    function TCnpjOpcaoSimplesFromJsonValue(Source: TJSONValue): TCnpjOpcaoSimples;
    function TCnpjOpcaoSimplesFromJson(Source: string): TCnpjOpcaoSimples;
    function TCnpjIdentificadorSocioToJsonValue(Source: TCnpjIdentificadorSocio): TJSONValue;
    function TCnpjIdentificadorSocioToJson(Source: TCnpjIdentificadorSocio): string;
    function TCnpjIdentificadorSocioFromJsonValue(Source: TJSONValue): TCnpjIdentificadorSocio;
    function TCnpjIdentificadorSocioFromJson(Source: string): TCnpjIdentificadorSocio;
    function TCnpjQualificacaoSocioToJsonValue(Source: TCnpjQualificacaoSocio): TJSONValue;
    function TCnpjQualificacaoSocioToJson(Source: TCnpjQualificacaoSocio): string;
    function TCnpjQualificacaoSocioFromJsonValue(Source: TJSONValue): TCnpjQualificacaoSocio;
    function TCnpjQualificacaoSocioFromJson(Source: string): TCnpjQualificacaoSocio;
    function TCnpjRepresentanteLegalToJsonValue(Source: TCnpjRepresentanteLegal): TJSONValue;
    function TCnpjRepresentanteLegalToJson(Source: TCnpjRepresentanteLegal): string;
    function TCnpjRepresentanteLegalFromJsonValue(Source: TJSONValue): TCnpjRepresentanteLegal;
    function TCnpjRepresentanteLegalFromJson(Source: string): TCnpjRepresentanteLegal;
    function TCnpjFaixaEtariaToJsonValue(Source: TCnpjFaixaEtaria): TJSONValue;
    function TCnpjFaixaEtariaToJson(Source: TCnpjFaixaEtaria): string;
    function TCnpjFaixaEtariaFromJsonValue(Source: TJSONValue): TCnpjFaixaEtaria;
    function TCnpjFaixaEtariaFromJson(Source: string): TCnpjFaixaEtaria;
    function TCnpjSocioToJsonValue(Source: TCnpjSocio): TJSONValue;
    function TCnpjSocioToJson(Source: TCnpjSocio): string;
    function TCnpjSocioFromJsonValue(Source: TJSONValue): TCnpjSocio;
    function TCnpjSocioFromJson(Source: string): TCnpjSocio;
    function TCnpjSocioListToJsonValue(Source: TCnpjSocioList): TJSONValue;
    function TCnpjSocioListToJson(Source: TCnpjSocioList): string;
    function TCnpjSocioListFromJsonValue(Source: TJSONValue): TCnpjSocioList;
    function TCnpjSocioListFromJson(Source: string): TCnpjSocioList;
    function TCnpjEmpresaToJsonValue(Source: TCnpjEmpresa): TJSONValue;
    function TCnpjEmpresaToJson(Source: TCnpjEmpresa): string;
    function TCnpjEmpresaFromJsonValue(Source: TJSONValue): TCnpjEmpresa;
    function TCnpjEmpresaFromJson(Source: string): TCnpjEmpresa;
    function TCepEnderecoToJsonValue(Source: TCepEndereco): TJSONValue;
    function TCepEnderecoToJson(Source: TCepEndereco): string;
    function TCepEnderecoFromJsonValue(Source: TJSONValue): TCepEndereco;
    function TCepEnderecoFromJson(Source: string): TCepEndereco;
  end;
  
implementation

{ TJsonConverter }

function TJsonConverter.TEmpresaEnderecoToJsonValue(Source: TEmpresaEndereco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.LogradouroHasValue then
      Json.ObjAddProp(Result, 'logradouro', Self.stringToJsonValue(Source.Logradouro));
    if Source.NumeroHasValue then
      Json.ObjAddProp(Result, 'numero', Self.stringToJsonValue(Source.Numero));
    if Source.ComplementoHasValue then
      Json.ObjAddProp(Result, 'complemento', Self.stringToJsonValue(Source.Complemento));
    if Source.BairroHasValue then
      Json.ObjAddProp(Result, 'bairro', Self.stringToJsonValue(Source.Bairro));
    if Source.CodigoMunicipioHasValue then
      Json.ObjAddProp(Result, 'codigo_municipio', Self.stringToJsonValue(Source.CodigoMunicipio));
    if Source.CidadeHasValue then
      Json.ObjAddProp(Result, 'cidade', Self.stringToJsonValue(Source.Cidade));
    if Source.UfHasValue then
      Json.ObjAddProp(Result, 'uf', Self.stringToJsonValue(Source.Uf));
    if Source.CodigoPaisHasValue then
      Json.ObjAddProp(Result, 'codigo_pais', Self.stringToJsonValue(Source.CodigoPais));
    if Source.PaisHasValue then
      Json.ObjAddProp(Result, 'pais', Self.stringToJsonValue(Source.Pais));
    if Source.CepHasValue then
      Json.ObjAddProp(Result, 'cep', Self.stringToJsonValue(Source.Cep));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaEnderecoToJson(Source: TEmpresaEndereco): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaEnderecoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaEnderecoFromJsonValue(Source: TJSONValue): TEmpresaEndereco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaEndereco.Create;
  try
    if Json.ObjContains(Source, 'logradouro', JValue) then
      Result.Logradouro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.Numero := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'complemento', JValue) then
      Result.Complemento := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'bairro', JValue) then
      Result.Bairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_municipio', JValue) then
      Result.CodigoMunicipio := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cidade', JValue) then
      Result.Cidade := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf', JValue) then
      Result.Uf := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_pais', JValue) then
      Result.CodigoPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pais', JValue) then
      Result.Pais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cep', JValue) then
      Result.Cep := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaEnderecoFromJson(Source: string): TEmpresaEndereco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaEnderecoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfeToJsonValue(Source: TEmpresaConfigNfe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfeToJson(Source: TEmpresaConfigNfe): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigNfeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfeFromJsonValue(Source: TJSONValue): TEmpresaConfigNfe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigNfe.Create;
  try
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfeFromJson(Source: string): TEmpresaConfigNfe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigNfeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfceSefazToJsonValue(Source: TEmpresaConfigNfceSefaz): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.IdCscHasValue then
      Json.ObjAddProp(Result, 'id_csc', Self.IntegerToJsonValue(Source.IdCsc));
    if Source.CscHasValue then
      Json.ObjAddProp(Result, 'csc', Self.stringToJsonValue(Source.Csc));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfceSefazToJson(Source: TEmpresaConfigNfceSefaz): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigNfceSefazToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfceSefazFromJsonValue(Source: TJSONValue): TEmpresaConfigNfceSefaz;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigNfceSefaz.Create;
  try
    if Json.ObjContains(Source, 'id_csc', JValue) then
      Result.IdCsc := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'csc', JValue) then
      Result.Csc := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfceSefazFromJson(Source: string): TEmpresaConfigNfceSefaz;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigNfceSefazFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfceToJsonValue(Source: TEmpresaConfigNfce): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.Sefaz) then
      Json.ObjAddProp(Result, 'sefaz', Self.TEmpresaConfigNfceSefazToJsonValue(Source.Sefaz));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfceToJson(Source: TEmpresaConfigNfce): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigNfceToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfceFromJsonValue(Source: TJSONValue): TEmpresaConfigNfce;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigNfce.Create;
  try
    if Json.ObjContains(Source, 'sefaz', JValue) then
      Result.Sefaz := Self.TEmpresaConfigNfceSefazFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfceFromJson(Source: string): TEmpresaConfigNfce;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigNfceFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigMdfeToJsonValue(Source: TEmpresaConfigMdfe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigMdfeToJson(Source: TEmpresaConfigMdfe): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigMdfeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigMdfeFromJsonValue(Source: TJSONValue): TEmpresaConfigMdfe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigMdfe.Create;
  try
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigMdfeFromJson(Source: string): TEmpresaConfigMdfe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigMdfeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigCteToJsonValue(Source: TEmpresaConfigCte): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigCteToJson(Source: TEmpresaConfigCte): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigCteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigCteFromJsonValue(Source: TJSONValue): TEmpresaConfigCte;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigCte.Create;
  try
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigCteFromJson(Source: string): TEmpresaConfigCte;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigCteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigCteOsToJsonValue(Source: TEmpresaConfigCteOs): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigCteOsToJson(Source: TEmpresaConfigCteOs): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigCteOsToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigCteOsFromJsonValue(Source: TJSONValue): TEmpresaConfigCteOs;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigCteOs.Create;
  try
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigCteOsFromJson(Source: string): TEmpresaConfigCteOs;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigCteOsFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigRpsToJsonValue(Source: TEmpresaConfigRps): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.LoteHasValue then
      Json.ObjAddProp(Result, 'lote', Self.IntegerToJsonValue(Source.Lote));
    if Source.SerieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.stringToJsonValue(Source.Serie));
    if Source.NumeroHasValue then
      Json.ObjAddProp(Result, 'numero', Self.IntegerToJsonValue(Source.Numero));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigRpsToJson(Source: TEmpresaConfigRps): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigRpsToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigRpsFromJsonValue(Source: TJSONValue): TEmpresaConfigRps;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigRps.Create;
  try
    if Json.ObjContains(Source, 'lote', JValue) then
      Result.Lote := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.Serie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.Numero := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigRpsFromJson(Source: string): TEmpresaConfigRps;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigRpsFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigPrefeituraToJsonValue(Source: TEmpresaConfigPrefeitura): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.LoginHasValue then
      Json.ObjAddProp(Result, 'login', Self.stringToJsonValue(Source.Login));
    if Source.SenhaHasValue then
      Json.ObjAddProp(Result, 'senha', Self.stringToJsonValue(Source.Senha));
    if Source.TokenHasValue then
      Json.ObjAddProp(Result, 'token', Self.stringToJsonValue(Source.Token));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigPrefeituraToJson(Source: TEmpresaConfigPrefeitura): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigPrefeituraToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigPrefeituraFromJsonValue(Source: TJSONValue): TEmpresaConfigPrefeitura;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigPrefeitura.Create;
  try
    if Json.ObjContains(Source, 'login', JValue) then
      Result.Login := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'senha', JValue) then
      Result.Senha := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'token', JValue) then
      Result.Token := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigPrefeituraFromJson(Source: string): TEmpresaConfigPrefeitura;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigPrefeituraFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfseToJsonValue(Source: TEmpresaConfigNfse): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.Rps) then
      Json.ObjAddProp(Result, 'rps', Self.TEmpresaConfigRpsToJsonValue(Source.Rps));
    if Assigned(Source.Prefeitura) then
      Json.ObjAddProp(Result, 'prefeitura', Self.TEmpresaConfigPrefeituraToJsonValue(Source.Prefeitura));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfseToJson(Source: TEmpresaConfigNfse): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigNfseToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfseFromJsonValue(Source: TJSONValue): TEmpresaConfigNfse;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigNfse.Create;
  try
    if Json.ObjContains(Source, 'rps', JValue) then
      Result.Rps := Self.TEmpresaConfigRpsFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prefeitura', JValue) then
      Result.Prefeitura := Self.TEmpresaConfigPrefeituraFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfseFromJson(Source: string): TEmpresaConfigNfse;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigNfseFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaToJsonValue(Source: TEmpresa): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CpfCnpjHasValue then
      Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.CpfCnpj));
    if Source.CreatedAtHasValue then
      Json.ObjAddProp(Result, 'created_at', Self.TDateTimeToJsonValue(Source.CreatedAt));
    if Source.UpdatedAtHasValue then
      Json.ObjAddProp(Result, 'updated_at', Self.TDateTimeToJsonValue(Source.UpdatedAt));
    if Source.InscricaoEstadualHasValue then
      Json.ObjAddProp(Result, 'inscricao_estadual', Self.stringToJsonValue(Source.InscricaoEstadual));
    if Source.InscricaoMunicipalHasValue then
      Json.ObjAddProp(Result, 'inscricao_municipal', Self.stringToJsonValue(Source.InscricaoMunicipal));
    if Source.NomeRazaoSocialHasValue then
      Json.ObjAddProp(Result, 'nome_razao_social', Self.stringToJsonValue(Source.NomeRazaoSocial));
    if Source.NomeFantasiaHasValue then
      Json.ObjAddProp(Result, 'nome_fantasia', Self.stringToJsonValue(Source.NomeFantasia));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
    if Source.EmailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.Email));
    if Assigned(Source.Endereco) then
      Json.ObjAddProp(Result, 'endereco', Self.TEmpresaEnderecoToJsonValue(Source.Endereco));
    if Source.OptanteSimplesNacionalHasValue then
      Json.ObjAddProp(Result, 'optante_simples_nacional', Self.BooleanToJsonValue(Source.OptanteSimplesNacional));
    if Source.RegimeTributacaoHasValue then
      Json.ObjAddProp(Result, 'regime_tributacao', Self.IntegerToJsonValue(Source.RegimeTributacao));
    if Source.RegimeEspecialTributacaoHasValue then
      Json.ObjAddProp(Result, 'regime_especial_tributacao', Self.IntegerToJsonValue(Source.RegimeEspecialTributacao));
    if Source.IncentivoFiscalHasValue then
      Json.ObjAddProp(Result, 'incentivo_fiscal', Self.BooleanToJsonValue(Source.IncentivoFiscal));
    if Source.IncentivadorCulturalHasValue then
      Json.ObjAddProp(Result, 'incentivador_cultural', Self.BooleanToJsonValue(Source.IncentivadorCultural));
    if Assigned(Source.Nfe) then
      Json.ObjAddProp(Result, 'nfe', Self.TEmpresaConfigNfeToJsonValue(Source.Nfe));
    if Assigned(Source.Nfce) then
      Json.ObjAddProp(Result, 'nfce', Self.TEmpresaConfigNfceToJsonValue(Source.Nfce));
    if Assigned(Source.Mdfe) then
      Json.ObjAddProp(Result, 'mdfe', Self.TEmpresaConfigMdfeToJsonValue(Source.Mdfe));
    if Assigned(Source.Cte) then
      Json.ObjAddProp(Result, 'cte', Self.TEmpresaConfigCteToJsonValue(Source.Cte));
    if Assigned(Source.CteOs) then
      Json.ObjAddProp(Result, 'cte_os', Self.TEmpresaConfigCteOsToJsonValue(Source.CteOs));
    if Assigned(Source.Nfse) then
      Json.ObjAddProp(Result, 'nfse', Self.TEmpresaConfigNfseToJsonValue(Source.Nfse));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaToJson(Source: TEmpresa): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaFromJsonValue(Source: TJSONValue): TEmpresa;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresa.Create;
  try
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.CpfCnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'created_at', JValue) then
      Result.CreatedAt := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'updated_at', JValue) then
      Result.UpdatedAt := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'inscricao_estadual', JValue) then
      Result.InscricaoEstadual := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'inscricao_municipal', JValue) then
      Result.InscricaoMunicipal := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_razao_social', JValue) then
      Result.NomeRazaoSocial := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_fantasia', JValue) then
      Result.NomeFantasia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.Email := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'endereco', JValue) then
      Result.Endereco := Self.TEmpresaEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'optante_simples_nacional', JValue) then
      Result.OptanteSimplesNacional := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'regime_tributacao', JValue) then
      Result.RegimeTributacao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'regime_especial_tributacao', JValue) then
      Result.RegimeEspecialTributacao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'incentivo_fiscal', JValue) then
      Result.IncentivoFiscal := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'incentivador_cultural', JValue) then
      Result.IncentivadorCultural := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nfe', JValue) then
      Result.Nfe := Self.TEmpresaConfigNfeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nfce', JValue) then
      Result.Nfce := Self.TEmpresaConfigNfceFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mdfe', JValue) then
      Result.Mdfe := Self.TEmpresaConfigMdfeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cte', JValue) then
      Result.Cte := Self.TEmpresaConfigCteFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cte_os', JValue) then
      Result.CteOs := Self.TEmpresaConfigCteOsFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nfse', JValue) then
      Result.Nfse := Self.TEmpresaConfigNfseFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaFromJson(Source: string): TEmpresa;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaListToJsonValue(Source: TEmpresaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TEmpresaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaListToJson(Source: TEmpresaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaListFromJsonValue(Source: TJSONValue): TEmpresaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TEmpresaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaListFromJson(Source: string): TEmpresaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaListagemToJsonValue(Source: TEmpresaListagem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CountHasValue then
      Json.ObjAddProp(Result, '@count', Self.IntegerToJsonValue(Source.Count));
    if Assigned(Source.Data) then
      Json.ObjAddProp(Result, 'data', Self.TEmpresaListToJsonValue(Source.Data));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaListagemToJson(Source: TEmpresaListagem): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaListagemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaListagemFromJsonValue(Source: TJSONValue): TEmpresaListagem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaListagem.Create;
  try
    if Json.ObjContains(Source, '@count', JValue) then
      Result.Count := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data', JValue) then
      Result.Data := Self.TEmpresaListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaListagemFromJson(Source: string): TEmpresaListagem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaListagemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaPedidoCadastroCertificadoToJsonValue(Source: TEmpresaPedidoCadastroCertificado): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CertificadoHasValue then
      Json.ObjAddProp(Result, 'certificado', Self.TBytesToJsonValue(Source.Certificado));
    if Source.PasswordHasValue then
      Json.ObjAddProp(Result, 'password', Self.stringToJsonValue(Source.Password));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaPedidoCadastroCertificadoToJson(Source: TEmpresaPedidoCadastroCertificado): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaPedidoCadastroCertificadoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaPedidoCadastroCertificadoFromJsonValue(Source: TJSONValue): TEmpresaPedidoCadastroCertificado;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaPedidoCadastroCertificado.Create;
  try
    if Json.ObjContains(Source, 'certificado', JValue) then
      Result.Certificado := Self.TBytesFromJsonValue(JValue);
    if Json.ObjContains(Source, 'password', JValue) then
      Result.Password := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaPedidoCadastroCertificadoFromJson(Source: string): TEmpresaPedidoCadastroCertificado;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaPedidoCadastroCertificadoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaCertificadoToJsonValue(Source: TEmpresaCertificado): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.SerialNumberHasValue then
      Json.ObjAddProp(Result, 'serial_number', Self.stringToJsonValue(Source.SerialNumber));
    if Source.IssuerNameHasValue then
      Json.ObjAddProp(Result, 'issuer_name', Self.stringToJsonValue(Source.IssuerName));
    if Source.NotValidBeforeHasValue then
      Json.ObjAddProp(Result, 'not_valid_before', Self.TDateTimeToJsonValue(Source.NotValidBefore));
    if Source.NotValidAfterHasValue then
      Json.ObjAddProp(Result, 'not_valid_after', Self.TDateTimeToJsonValue(Source.NotValidAfter));
    if Source.ThumbprintHasValue then
      Json.ObjAddProp(Result, 'thumbprint', Self.stringToJsonValue(Source.Thumbprint));
    if Source.SubjectNameHasValue then
      Json.ObjAddProp(Result, 'subject_name', Self.stringToJsonValue(Source.SubjectName));
    if Source.CpfCnpjHasValue then
      Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.CpfCnpj));
    if Source.NomeRazaoSocialHasValue then
      Json.ObjAddProp(Result, 'nome_razao_social', Self.stringToJsonValue(Source.NomeRazaoSocial));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaCertificadoToJson(Source: TEmpresaCertificado): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaCertificadoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaCertificadoFromJsonValue(Source: TJSONValue): TEmpresaCertificado;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaCertificado.Create;
  try
    if Json.ObjContains(Source, 'serial_number', JValue) then
      Result.SerialNumber := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'issuer_name', JValue) then
      Result.IssuerName := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'not_valid_before', JValue) then
      Result.NotValidBefore := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'not_valid_after', JValue) then
      Result.NotValidAfter := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'thumbprint', JValue) then
      Result.Thumbprint := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'subject_name', JValue) then
      Result.SubjectName := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.CpfCnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_razao_social', JValue) then
      Result.NomeRazaoSocial := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaCertificadoFromJson(Source: string): TEmpresaCertificado;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaCertificadoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsIdentificacaoPrestadorToJsonValue(Source: TRpsIdentificacaoPrestador): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CpfCnpjHasValue then
      Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.CpfCnpj));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsIdentificacaoPrestadorToJson(Source: TRpsIdentificacaoPrestador): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsIdentificacaoPrestadorToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsIdentificacaoPrestadorFromJsonValue(Source: TJSONValue): TRpsIdentificacaoPrestador;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsIdentificacaoPrestador.Create;
  try
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.CpfCnpj := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsIdentificacaoPrestadorFromJson(Source: string): TRpsIdentificacaoPrestador;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsIdentificacaoPrestadorFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosTomadorToJsonValue(Source: TRpsDadosTomador): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CpfCnpjHasValue then
      Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.CpfCnpj));
    if Source.InscricaoMunicipalHasValue then
      Json.ObjAddProp(Result, 'inscricao_municipal', Self.stringToJsonValue(Source.InscricaoMunicipal));
    if Source.NomeRazaoSocialHasValue then
      Json.ObjAddProp(Result, 'nome_razao_social', Self.stringToJsonValue(Source.NomeRazaoSocial));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
    if Source.EmailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.Email));
    if Assigned(Source.Endereco) then
      Json.ObjAddProp(Result, 'endereco', Self.TEmpresaEnderecoToJsonValue(Source.Endereco));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosTomadorToJson(Source: TRpsDadosTomador): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsDadosTomadorToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosTomadorFromJsonValue(Source: TJSONValue): TRpsDadosTomador;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsDadosTomador.Create;
  try
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.CpfCnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'inscricao_municipal', JValue) then
      Result.InscricaoMunicipal := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_razao_social', JValue) then
      Result.NomeRazaoSocial := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.Email := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'endereco', JValue) then
      Result.Endereco := Self.TEmpresaEnderecoFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosTomadorFromJson(Source: string): TRpsDadosTomador;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsDadosTomadorFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosIntermediarioToJsonValue(Source: TRpsDadosIntermediario): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CpfCnpjHasValue then
      Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.CpfCnpj));
    if Source.NomeRazaoSocialHasValue then
      Json.ObjAddProp(Result, 'nome_razao_social', Self.stringToJsonValue(Source.NomeRazaoSocial));
    if Source.InscricaoMunicipalHasValue then
      Json.ObjAddProp(Result, 'inscricao_municipal', Self.stringToJsonValue(Source.InscricaoMunicipal));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosIntermediarioToJson(Source: TRpsDadosIntermediario): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsDadosIntermediarioToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosIntermediarioFromJsonValue(Source: TJSONValue): TRpsDadosIntermediario;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsDadosIntermediario.Create;
  try
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.CpfCnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_razao_social', JValue) then
      Result.NomeRazaoSocial := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'inscricao_municipal', JValue) then
      Result.InscricaoMunicipal := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosIntermediarioFromJson(Source: string): TRpsDadosIntermediario;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsDadosIntermediarioFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosConstrucaoCivilToJsonValue(Source: TRpsDadosConstrucaoCivil): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CodigoObraHasValue then
      Json.ObjAddProp(Result, 'codigo_obra', Self.stringToJsonValue(Source.CodigoObra));
    if Source.ArtHasValue then
      Json.ObjAddProp(Result, 'art', Self.stringToJsonValue(Source.Art));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosConstrucaoCivilToJson(Source: TRpsDadosConstrucaoCivil): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsDadosConstrucaoCivilToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosConstrucaoCivilFromJsonValue(Source: TJSONValue): TRpsDadosConstrucaoCivil;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsDadosConstrucaoCivil.Create;
  try
    if Json.ObjContains(Source, 'codigo_obra', JValue) then
      Result.CodigoObra := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'art', JValue) then
      Result.Art := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosConstrucaoCivilFromJson(Source: string): TRpsDadosConstrucaoCivil;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsDadosConstrucaoCivilFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsServicoValoresToJsonValue(Source: TRpsServicoValores): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.ValorUnitarioHasValue then
      Json.ObjAddProp(Result, 'valor_unitario', Self.DoubleToJsonValue(Source.ValorUnitario));
    if Source.ValorServicosHasValue then
      Json.ObjAddProp(Result, 'valor_servicos', Self.DoubleToJsonValue(Source.ValorServicos));
    if Source.ValorDeducoesHasValue then
      Json.ObjAddProp(Result, 'valor_deducoes', Self.DoubleToJsonValue(Source.ValorDeducoes));
    if Source.ValorPisHasValue then
      Json.ObjAddProp(Result, 'valor_pis', Self.DoubleToJsonValue(Source.ValorPis));
    if Source.ValorCofinsHasValue then
      Json.ObjAddProp(Result, 'valor_cofins', Self.DoubleToJsonValue(Source.ValorCofins));
    if Source.ValorInssHasValue then
      Json.ObjAddProp(Result, 'valor_inss', Self.DoubleToJsonValue(Source.ValorInss));
    if Source.ValorIrHasValue then
      Json.ObjAddProp(Result, 'valor_ir', Self.DoubleToJsonValue(Source.ValorIr));
    if Source.ValorCsllHasValue then
      Json.ObjAddProp(Result, 'valor_csll', Self.DoubleToJsonValue(Source.ValorCsll));
    if Source.ValorOutrasRetencoesHasValue then
      Json.ObjAddProp(Result, 'valor_outras_retencoes', Self.DoubleToJsonValue(Source.ValorOutrasRetencoes));
    if Source.ValorIssHasValue then
      Json.ObjAddProp(Result, 'valor_iss', Self.DoubleToJsonValue(Source.ValorIss));
    if Source.ValorIssRetidoHasValue then
      Json.ObjAddProp(Result, 'valor_iss_retido', Self.DoubleToJsonValue(Source.ValorIssRetido));
    if Source.ValorLiquidoHasValue then
      Json.ObjAddProp(Result, 'valor_liquido', Self.DoubleToJsonValue(Source.ValorLiquido));
    if Source.AliquotaIssHasValue then
      Json.ObjAddProp(Result, 'aliquota_iss', Self.DoubleToJsonValue(Source.AliquotaIss));
    if Source.AliquotaPisHasValue then
      Json.ObjAddProp(Result, 'aliquota_pis', Self.DoubleToJsonValue(Source.AliquotaPis));
    if Source.AliquotaCofinsHasValue then
      Json.ObjAddProp(Result, 'aliquota_cofins', Self.DoubleToJsonValue(Source.AliquotaCofins));
    if Source.AliquotaInssHasValue then
      Json.ObjAddProp(Result, 'aliquota_inss', Self.DoubleToJsonValue(Source.AliquotaInss));
    if Source.AliquotaIrHasValue then
      Json.ObjAddProp(Result, 'aliquota_ir', Self.DoubleToJsonValue(Source.AliquotaIr));
    if Source.AliquotaCsllHasValue then
      Json.ObjAddProp(Result, 'aliquota_csll', Self.DoubleToJsonValue(Source.AliquotaCsll));
    if Source.DescontoIncondicionadoHasValue then
      Json.ObjAddProp(Result, 'desconto_incondicionado', Self.DoubleToJsonValue(Source.DescontoIncondicionado));
    if Source.DescontoCondicionadoHasValue then
      Json.ObjAddProp(Result, 'desconto_condicionado', Self.DoubleToJsonValue(Source.DescontoCondicionado));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsServicoValoresToJson(Source: TRpsServicoValores): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsServicoValoresToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsServicoValoresFromJsonValue(Source: TJSONValue): TRpsServicoValores;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsServicoValores.Create;
  try
    if Json.ObjContains(Source, 'valor_unitario', JValue) then
      Result.ValorUnitario := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_servicos', JValue) then
      Result.ValorServicos := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_deducoes', JValue) then
      Result.ValorDeducoes := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_pis', JValue) then
      Result.ValorPis := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_cofins', JValue) then
      Result.ValorCofins := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_inss', JValue) then
      Result.ValorInss := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_ir', JValue) then
      Result.ValorIr := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_csll', JValue) then
      Result.ValorCsll := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_outras_retencoes', JValue) then
      Result.ValorOutrasRetencoes := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_iss', JValue) then
      Result.ValorIss := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_iss_retido', JValue) then
      Result.ValorIssRetido := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_liquido', JValue) then
      Result.ValorLiquido := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aliquota_iss', JValue) then
      Result.AliquotaIss := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aliquota_pis', JValue) then
      Result.AliquotaPis := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aliquota_cofins', JValue) then
      Result.AliquotaCofins := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aliquota_inss', JValue) then
      Result.AliquotaInss := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aliquota_ir', JValue) then
      Result.AliquotaIr := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aliquota_csll', JValue) then
      Result.AliquotaCsll := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'desconto_incondicionado', JValue) then
      Result.DescontoIncondicionado := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'desconto_condicionado', JValue) then
      Result.DescontoCondicionado := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsServicoValoresFromJson(Source: string): TRpsServicoValores;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsServicoValoresFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosServicoToJsonValue(Source: TRpsDadosServico): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.IssRetidoHasValue then
      Json.ObjAddProp(Result, 'iss_retido', Self.BooleanToJsonValue(Source.IssRetido));
    if Source.ResponsavelRetencaoHasValue then
      Json.ObjAddProp(Result, 'responsavel_retencao', Self.IntegerToJsonValue(Source.ResponsavelRetencao));
    if Source.ItemListaServicoHasValue then
      Json.ObjAddProp(Result, 'item_lista_servico', Self.stringToJsonValue(Source.ItemListaServico));
    if Source.CodigoCnaeHasValue then
      Json.ObjAddProp(Result, 'codigo_cnae', Self.stringToJsonValue(Source.CodigoCnae));
    if Source.CodigoTributacaoMunicipioHasValue then
      Json.ObjAddProp(Result, 'codigo_tributacao_municipio', Self.stringToJsonValue(Source.CodigoTributacaoMunicipio));
    if Source.DiscriminacaoHasValue then
      Json.ObjAddProp(Result, 'discriminacao', Self.stringToJsonValue(Source.Discriminacao));
    if Source.CodigoMunicipioHasValue then
      Json.ObjAddProp(Result, 'codigo_municipio', Self.stringToJsonValue(Source.CodigoMunicipio));
    if Source.CodigoPaisHasValue then
      Json.ObjAddProp(Result, 'codigo_pais', Self.stringToJsonValue(Source.CodigoPais));
    if Source.TipoTributacaoHasValue then
      Json.ObjAddProp(Result, 'tipo_tributacao', Self.IntegerToJsonValue(Source.TipoTributacao));
    if Source.ExigibilidadeIssHasValue then
      Json.ObjAddProp(Result, 'exigibilidade_iss', Self.IntegerToJsonValue(Source.ExigibilidadeIss));
    if Source.CodigoMunicipioIncidenciaHasValue then
      Json.ObjAddProp(Result, 'codigo_municipio_incidencia', Self.stringToJsonValue(Source.CodigoMunicipioIncidencia));
    if Source.NumeroProcessoHasValue then
      Json.ObjAddProp(Result, 'numero_processo', Self.stringToJsonValue(Source.NumeroProcesso));
    if Source.UnidadeHasValue then
      Json.ObjAddProp(Result, 'unidade', Self.stringToJsonValue(Source.Unidade));
    if Source.QuantidadeHasValue then
      Json.ObjAddProp(Result, 'quantidade', Self.DoubleToJsonValue(Source.Quantidade));
    if Assigned(Source.Valores) then
      Json.ObjAddProp(Result, 'valores', Self.TRpsServicoValoresToJsonValue(Source.Valores));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosServicoToJson(Source: TRpsDadosServico): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsDadosServicoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosServicoFromJsonValue(Source: TJSONValue): TRpsDadosServico;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsDadosServico.Create;
  try
    if Json.ObjContains(Source, 'iss_retido', JValue) then
      Result.IssRetido := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'responsavel_retencao', JValue) then
      Result.ResponsavelRetencao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'item_lista_servico', JValue) then
      Result.ItemListaServico := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_cnae', JValue) then
      Result.CodigoCnae := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_tributacao_municipio', JValue) then
      Result.CodigoTributacaoMunicipio := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'discriminacao', JValue) then
      Result.Discriminacao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_municipio', JValue) then
      Result.CodigoMunicipio := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_pais', JValue) then
      Result.CodigoPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_tributacao', JValue) then
      Result.TipoTributacao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'exigibilidade_iss', JValue) then
      Result.ExigibilidadeIss := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_municipio_incidencia', JValue) then
      Result.CodigoMunicipioIncidencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_processo', JValue) then
      Result.NumeroProcesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'unidade', JValue) then
      Result.Unidade := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'quantidade', JValue) then
      Result.Quantidade := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valores', JValue) then
      Result.Valores := Self.TRpsServicoValoresFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosServicoFromJson(Source: string): TRpsDadosServico;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsDadosServicoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosServicoListToJsonValue(Source: TRpsDadosServicoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TRpsDadosServicoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosServicoListToJson(Source: TRpsDadosServicoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsDadosServicoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosServicoListFromJsonValue(Source: TJSONValue): TRpsDadosServicoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsDadosServicoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TRpsDadosServicoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosServicoListFromJson(Source: string): TRpsDadosServicoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsDadosServicoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoToJsonValue(Source: TRpsPedidoEmissao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.ReferenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.Referencia));
    if Source.DataEmissaoHasValue then
      Json.ObjAddProp(Result, 'data_emissao', Self.TDateTimeToJsonValue(Source.DataEmissao));
    if Source.CompetenciaHasValue then
      Json.ObjAddProp(Result, 'competencia', Self.TDateToJsonValue(Source.Competencia));
    if Source.NaturezaTributacaoHasValue then
      Json.ObjAddProp(Result, 'natureza_tributacao', Self.IntegerToJsonValue(Source.NaturezaTributacao));
    if Assigned(Source.Prestador) then
      Json.ObjAddProp(Result, 'prestador', Self.TRpsIdentificacaoPrestadorToJsonValue(Source.Prestador));
    if Assigned(Source.Tomador) then
      Json.ObjAddProp(Result, 'tomador', Self.TRpsDadosTomadorToJsonValue(Source.Tomador));
    if Assigned(Source.Intermediario) then
      Json.ObjAddProp(Result, 'intermediario', Self.TRpsDadosIntermediarioToJsonValue(Source.Intermediario));
    if Assigned(Source.ConstrucaoCivil) then
      Json.ObjAddProp(Result, 'construcao_civil', Self.TRpsDadosConstrucaoCivilToJsonValue(Source.ConstrucaoCivil));
    if Assigned(Source.Servicos) then
      Json.ObjAddProp(Result, 'servicos', Self.TRpsDadosServicoListToJsonValue(Source.Servicos));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoToJson(Source: TRpsPedidoEmissao): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsPedidoEmissaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoFromJsonValue(Source: TJSONValue): TRpsPedidoEmissao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsPedidoEmissao.Create;
  try
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.Referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_emissao', JValue) then
      Result.DataEmissao := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'competencia', JValue) then
      Result.Competencia := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'natureza_tributacao', JValue) then
      Result.NaturezaTributacao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prestador', JValue) then
      Result.Prestador := Self.TRpsIdentificacaoPrestadorFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tomador', JValue) then
      Result.Tomador := Self.TRpsDadosTomadorFromJsonValue(JValue);
    if Json.ObjContains(Source, 'intermediario', JValue) then
      Result.Intermediario := Self.TRpsDadosIntermediarioFromJsonValue(JValue);
    if Json.ObjContains(Source, 'construcao_civil', JValue) then
      Result.ConstrucaoCivil := Self.TRpsDadosConstrucaoCivilFromJsonValue(JValue);
    if Json.ObjContains(Source, 'servicos', JValue) then
      Result.Servicos := Self.TRpsDadosServicoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoFromJson(Source: string): TRpsPedidoEmissao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsPedidoEmissaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoListToJsonValue(Source: TRpsPedidoEmissaoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TRpsPedidoEmissaoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoListToJson(Source: TRpsPedidoEmissaoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsPedidoEmissaoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoListFromJsonValue(Source: TJSONValue): TRpsPedidoEmissaoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsPedidoEmissaoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TRpsPedidoEmissaoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoListFromJson(Source: string): TRpsPedidoEmissaoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsPedidoEmissaoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoLoteToJsonValue(Source: TRpsPedidoEmissaoLote): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.ReferenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.Referencia));
    if Assigned(Source.ListaRps) then
      Json.ObjAddProp(Result, 'lista_rps', Self.TRpsPedidoEmissaoListToJsonValue(Source.ListaRps));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoLoteToJson(Source: TRpsPedidoEmissaoLote): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsPedidoEmissaoLoteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoLoteFromJsonValue(Source: TJSONValue): TRpsPedidoEmissaoLote;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsPedidoEmissaoLote.Create;
  try
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.Referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lista_rps', JValue) then
      Result.ListaRps := Self.TRpsPedidoEmissaoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoLoteFromJson(Source: string): TRpsPedidoEmissaoLote;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsPedidoEmissaoLoteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsIdentificacaoToJsonValue(Source: TRpsIdentificacao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NumeroHasValue then
      Json.ObjAddProp(Result, 'numero', Self.stringToJsonValue(Source.Numero));
    if Source.SerieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.stringToJsonValue(Source.Serie));
    if Source.TipoHasValue then
      Json.ObjAddProp(Result, 'tipo', Self.stringToJsonValue(Source.Tipo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsIdentificacaoToJson(Source: TRpsIdentificacao): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsIdentificacaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsIdentificacaoFromJsonValue(Source: TJSONValue): TRpsIdentificacao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsIdentificacao.Create;
  try
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.Numero := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.Serie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo', JValue) then
      Result.Tipo := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsIdentificacaoFromJson(Source: string): TRpsIdentificacao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsIdentificacaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosToJsonValue(Source: TRpsDados): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.IdentificacaoRps) then
      Json.ObjAddProp(Result, 'identificacao_rps', Self.TRpsIdentificacaoToJsonValue(Source.IdentificacaoRps));
    if Source.DataEmissaoHasValue then
      Json.ObjAddProp(Result, 'data_emissao', Self.TDateTimeToJsonValue(Source.DataEmissao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosToJson(Source: TRpsDados): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsDadosToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosFromJsonValue(Source: TJSONValue): TRpsDados;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsDados.Create;
  try
    if Json.ObjContains(Source, 'identificacao_rps', JValue) then
      Result.IdentificacaoRps := Self.TRpsIdentificacaoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_emissao', JValue) then
      Result.DataEmissao := Self.TDateTimeFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosFromJson(Source: string): TRpsDados;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsDadosFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosPrestadorToJsonValue(Source: TRpsDadosPrestador): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CpfCnpjHasValue then
      Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.CpfCnpj));
    if Source.InscricaoMunicipalHasValue then
      Json.ObjAddProp(Result, 'inscricao_municipal', Self.stringToJsonValue(Source.InscricaoMunicipal));
    if Source.NomeRazaoSocialHasValue then
      Json.ObjAddProp(Result, 'nome_razao_social', Self.stringToJsonValue(Source.NomeRazaoSocial));
    if Source.NomeFantasiaHasValue then
      Json.ObjAddProp(Result, 'nome_fantasia', Self.stringToJsonValue(Source.NomeFantasia));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
    if Source.EmailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.Email));
    if Assigned(Source.Endereco) then
      Json.ObjAddProp(Result, 'endereco', Self.TEmpresaEnderecoToJsonValue(Source.Endereco));
    if Source.OptanteSimplesNacionalHasValue then
      Json.ObjAddProp(Result, 'optante_simples_nacional', Self.BooleanToJsonValue(Source.OptanteSimplesNacional));
    if Source.RegimeTributacaoHasValue then
      Json.ObjAddProp(Result, 'regime_tributacao', Self.IntegerToJsonValue(Source.RegimeTributacao));
    if Source.RegimeEspecialTributacaoHasValue then
      Json.ObjAddProp(Result, 'regime_especial_tributacao', Self.IntegerToJsonValue(Source.RegimeEspecialTributacao));
    if Source.IncentivoFiscalHasValue then
      Json.ObjAddProp(Result, 'incentivo_fiscal', Self.BooleanToJsonValue(Source.IncentivoFiscal));
    if Source.IncentivadorCulturalHasValue then
      Json.ObjAddProp(Result, 'incentivador_cultural', Self.BooleanToJsonValue(Source.IncentivadorCultural));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosPrestadorToJson(Source: TRpsDadosPrestador): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsDadosPrestadorToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosPrestadorFromJsonValue(Source: TJSONValue): TRpsDadosPrestador;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsDadosPrestador.Create;
  try
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.CpfCnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'inscricao_municipal', JValue) then
      Result.InscricaoMunicipal := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_razao_social', JValue) then
      Result.NomeRazaoSocial := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_fantasia', JValue) then
      Result.NomeFantasia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.Email := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'endereco', JValue) then
      Result.Endereco := Self.TEmpresaEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'optante_simples_nacional', JValue) then
      Result.OptanteSimplesNacional := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'regime_tributacao', JValue) then
      Result.RegimeTributacao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'regime_especial_tributacao', JValue) then
      Result.RegimeEspecialTributacao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'incentivo_fiscal', JValue) then
      Result.IncentivoFiscal := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'incentivador_cultural', JValue) then
      Result.IncentivadorCultural := Self.BooleanFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosPrestadorFromJson(Source: string): TRpsDadosPrestador;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsDadosPrestadorFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsToJsonValue(Source: TRps): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.Rps) then
      Json.ObjAddProp(Result, 'rps', Self.TRpsDadosToJsonValue(Source.Rps));
    if Source.CompetenciaHasValue then
      Json.ObjAddProp(Result, 'competencia', Self.TDateToJsonValue(Source.Competencia));
    if Source.NaturezaTributacaoHasValue then
      Json.ObjAddProp(Result, 'natureza_tributacao', Self.IntegerToJsonValue(Source.NaturezaTributacao));
    if Assigned(Source.Prestador) then
      Json.ObjAddProp(Result, 'prestador', Self.TRpsDadosPrestadorToJsonValue(Source.Prestador));
    if Assigned(Source.Tomador) then
      Json.ObjAddProp(Result, 'tomador', Self.TRpsDadosTomadorToJsonValue(Source.Tomador));
    if Assigned(Source.Intermediario) then
      Json.ObjAddProp(Result, 'intermediario', Self.TRpsDadosIntermediarioToJsonValue(Source.Intermediario));
    if Assigned(Source.ConstrucaoCivil) then
      Json.ObjAddProp(Result, 'construcao_civil', Self.TRpsDadosConstrucaoCivilToJsonValue(Source.ConstrucaoCivil));
    if Assigned(Source.Servicos) then
      Json.ObjAddProp(Result, 'servicos', Self.TRpsDadosServicoListToJsonValue(Source.Servicos));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsToJson(Source: TRps): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsFromJsonValue(Source: TJSONValue): TRps;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRps.Create;
  try
    if Json.ObjContains(Source, 'rps', JValue) then
      Result.Rps := Self.TRpsDadosFromJsonValue(JValue);
    if Json.ObjContains(Source, 'competencia', JValue) then
      Result.Competencia := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'natureza_tributacao', JValue) then
      Result.NaturezaTributacao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prestador', JValue) then
      Result.Prestador := Self.TRpsDadosPrestadorFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tomador', JValue) then
      Result.Tomador := Self.TRpsDadosTomadorFromJsonValue(JValue);
    if Json.ObjContains(Source, 'intermediario', JValue) then
      Result.Intermediario := Self.TRpsDadosIntermediarioFromJsonValue(JValue);
    if Json.ObjContains(Source, 'construcao_civil', JValue) then
      Result.ConstrucaoCivil := Self.TRpsDadosConstrucaoCivilFromJsonValue(JValue);
    if Json.ObjContains(Source, 'servicos', JValue) then
      Result.Servicos := Self.TRpsDadosServicoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsFromJson(Source: string): TRps;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseMensagemRetornoToJsonValue(Source: TNfseMensagemRetorno): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CodigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.Codigo));
    if Source.DescricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.Descricao));
    if Source.CorrecaoHasValue then
      Json.ObjAddProp(Result, 'correcao', Self.stringToJsonValue(Source.Correcao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseMensagemRetornoToJson(Source: TNfseMensagemRetorno): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseMensagemRetornoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseMensagemRetornoFromJsonValue(Source: TJSONValue): TNfseMensagemRetorno;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfseMensagemRetorno.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.Codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.Descricao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'correcao', JValue) then
      Result.Correcao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseMensagemRetornoFromJson(Source: string): TNfseMensagemRetorno;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseMensagemRetornoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseMensagemRetornoListToJsonValue(Source: TNfseMensagemRetornoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfseMensagemRetornoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseMensagemRetornoListToJson(Source: TNfseMensagemRetornoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseMensagemRetornoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseMensagemRetornoListFromJsonValue(Source: TJSONValue): TNfseMensagemRetornoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfseMensagemRetornoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfseMensagemRetornoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseMensagemRetornoListFromJson(Source: string): TNfseMensagemRetornoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseMensagemRetornoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseCancelamentoToJsonValue(Source: TNfseCancelamento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.Id));
    if Source.StatusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.Status));
    if Source.DataHoraHasValue then
      Json.ObjAddProp(Result, 'data_hora', Self.TDateTimeToJsonValue(Source.DataHora));
    if Assigned(Source.Mensagens) then
      Json.ObjAddProp(Result, 'mensagens', Self.TNfseMensagemRetornoListToJsonValue(Source.Mensagens));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseCancelamentoToJson(Source: TNfseCancelamento): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseCancelamentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseCancelamentoFromJsonValue(Source: TJSONValue): TNfseCancelamento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfseCancelamento.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.Status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_hora', JValue) then
      Result.DataHora := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagens', JValue) then
      Result.Mensagens := Self.TNfseMensagemRetornoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseCancelamentoFromJson(Source: string): TNfseCancelamento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseCancelamentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseToJsonValue(Source: TNfse): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.Id));
    if Source.CreatedAtHasValue then
      Json.ObjAddProp(Result, 'created_at', Self.TDateTimeToJsonValue(Source.CreatedAt));
    if Source.StatusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.Status));
    if Source.NumeroHasValue then
      Json.ObjAddProp(Result, 'numero', Self.stringToJsonValue(Source.Numero));
    if Source.CodigoVerificacaoHasValue then
      Json.ObjAddProp(Result, 'codigo_verificacao', Self.stringToJsonValue(Source.CodigoVerificacao));
    if Source.LinkUrlHasValue then
      Json.ObjAddProp(Result, 'link_url', Self.stringToJsonValue(Source.LinkUrl));
    if Source.DataEmissaoHasValue then
      Json.ObjAddProp(Result, 'data_emissao', Self.TDateTimeToJsonValue(Source.DataEmissao));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.ReferenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.Referencia));
    if Assigned(Source.DeclaracaoPrestacaoServico) then
      Json.ObjAddProp(Result, 'declaracao_prestacao_servico', Self.TRpsToJsonValue(Source.DeclaracaoPrestacaoServico));
    if Assigned(Source.Cancelamento) then
      Json.ObjAddProp(Result, 'cancelamento', Self.TNfseCancelamentoToJsonValue(Source.Cancelamento));
    if Assigned(Source.Mensagens) then
      Json.ObjAddProp(Result, 'mensagens', Self.TNfseMensagemRetornoListToJsonValue(Source.Mensagens));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseToJson(Source: TNfse): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseFromJsonValue(Source: TJSONValue): TNfse;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfse.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'created_at', JValue) then
      Result.CreatedAt := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.Status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.Numero := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_verificacao', JValue) then
      Result.CodigoVerificacao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'link_url', JValue) then
      Result.LinkUrl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_emissao', JValue) then
      Result.DataEmissao := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.Referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'declaracao_prestacao_servico', JValue) then
      Result.DeclaracaoPrestacaoServico := Self.TRpsFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cancelamento', JValue) then
      Result.Cancelamento := Self.TNfseCancelamentoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagens', JValue) then
      Result.Mensagens := Self.TNfseMensagemRetornoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseFromJson(Source: string): TNfse;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseListToJsonValue(Source: TNfseList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfseToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseListToJson(Source: TNfseList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseListFromJsonValue(Source: TJSONValue): TNfseList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfseList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfseFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseListFromJson(Source: string): TNfseList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsLoteToJsonValue(Source: TRpsLote): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.Id));
    if Source.CreatedAtHasValue then
      Json.ObjAddProp(Result, 'created_at', Self.TDateTimeToJsonValue(Source.CreatedAt));
    if Source.StatusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.Status));
    if Source.NumeroHasValue then
      Json.ObjAddProp(Result, 'numero', Self.stringToJsonValue(Source.Numero));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.ReferenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.Referencia));
    if Assigned(Source.Notas) then
      Json.ObjAddProp(Result, 'notas', Self.TNfseListToJsonValue(Source.Notas));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsLoteToJson(Source: TRpsLote): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsLoteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsLoteFromJsonValue(Source: TJSONValue): TRpsLote;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsLote.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'created_at', JValue) then
      Result.CreatedAt := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.Status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.Numero := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.Referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'notas', JValue) then
      Result.Notas := Self.TNfseListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsLoteFromJson(Source: string): TRpsLote;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsLoteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsLoteListToJsonValue(Source: TRpsLoteList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TRpsLoteToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsLoteListToJson(Source: TRpsLoteList): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsLoteListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsLoteListFromJsonValue(Source: TJSONValue): TRpsLoteList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsLoteList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TRpsLoteFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsLoteListFromJson(Source: string): TRpsLoteList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsLoteListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsLoteListagemToJsonValue(Source: TRpsLoteListagem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CountHasValue then
      Json.ObjAddProp(Result, '@count', Self.IntegerToJsonValue(Source.Count));
    if Assigned(Source.Data) then
      Json.ObjAddProp(Result, 'data', Self.TRpsLoteListToJsonValue(Source.Data));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsLoteListagemToJson(Source: TRpsLoteListagem): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsLoteListagemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsLoteListagemFromJsonValue(Source: TJSONValue): TRpsLoteListagem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsLoteListagem.Create;
  try
    if Json.ObjContains(Source, '@count', JValue) then
      Result.Count := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data', JValue) then
      Result.Data := Self.TRpsLoteListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsLoteListagemFromJson(Source: string): TRpsLoteListagem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsLoteListagemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfsePedidoEmissaoToJsonValue(Source: TNfsePedidoEmissao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Assigned(Source.Rps) then
      Json.ObjAddProp(Result, 'rps', Self.TRpsPedidoEmissaoToJsonValue(Source.Rps));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfsePedidoEmissaoToJson(Source: TNfsePedidoEmissao): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfsePedidoEmissaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfsePedidoEmissaoFromJsonValue(Source: TJSONValue): TNfsePedidoEmissao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfsePedidoEmissao.Create;
  try
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'rps', JValue) then
      Result.Rps := Self.TRpsPedidoEmissaoFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfsePedidoEmissaoFromJson(Source: string): TNfsePedidoEmissao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfsePedidoEmissaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseListagemToJsonValue(Source: TNfseListagem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CountHasValue then
      Json.ObjAddProp(Result, '@count', Self.IntegerToJsonValue(Source.Count));
    if Assigned(Source.Data) then
      Json.ObjAddProp(Result, 'data', Self.TNfseListToJsonValue(Source.Data));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseListagemToJson(Source: TNfseListagem): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseListagemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseListagemFromJsonValue(Source: TJSONValue): TNfseListagem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfseListagem.Create;
  try
    if Json.ObjContains(Source, '@count', JValue) then
      Result.Count := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data', JValue) then
      Result.Data := Self.TNfseListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseListagemFromJson(Source: string): TNfseListagem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseListagemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeSefazStatusToJsonValue(Source: TDfeSefazStatus): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.AutorizadorHasValue then
      Json.ObjAddProp(Result, 'autorizador', Self.stringToJsonValue(Source.Autorizador));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.DataHoraConsultaHasValue then
      Json.ObjAddProp(Result, 'data_hora_consulta', Self.TDateTimeToJsonValue(Source.DataHoraConsulta));
    if Source.CodigoStatusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.CodigoStatus));
    if Source.MotivoStatusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.MotivoStatus));
    if Source.TempoMedioRespostaHasValue then
      Json.ObjAddProp(Result, 'tempo_medio_resposta', Self.IntegerToJsonValue(Source.TempoMedioResposta));
    if Source.DataHoraRetornoHasValue then
      Json.ObjAddProp(Result, 'data_hora_retorno', Self.TDateTimeToJsonValue(Source.DataHoraRetorno));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeSefazStatusToJson(Source: TDfeSefazStatus): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeSefazStatusToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeSefazStatusFromJsonValue(Source: TJSONValue): TDfeSefazStatus;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeSefazStatus.Create;
  try
    if Json.ObjContains(Source, 'autorizador', JValue) then
      Result.Autorizador := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_hora_consulta', JValue) then
      Result.DataHoraConsulta := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.CodigoStatus := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.MotivoStatus := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tempo_medio_resposta', JValue) then
      Result.TempoMedioResposta := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_hora_retorno', JValue) then
      Result.DataHoraRetorno := Self.TDateTimeFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeSefazStatusFromJson(Source: string): TDfeSefazStatus;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeSefazStatusFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeVisaoGeralSefazStatusToJsonValue(Source: TDfeVisaoGeralSefazStatus): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.AC) then
      Json.ObjAddProp(Result, 'AC', Self.TDfeSefazStatusToJsonValue(Source.AC));
    if Assigned(Source.AL) then
      Json.ObjAddProp(Result, 'AL', Self.TDfeSefazStatusToJsonValue(Source.AL));
    if Assigned(Source.AP) then
      Json.ObjAddProp(Result, 'AP', Self.TDfeSefazStatusToJsonValue(Source.AP));
    if Assigned(Source.AM) then
      Json.ObjAddProp(Result, 'AM', Self.TDfeSefazStatusToJsonValue(Source.AM));
    if Assigned(Source.BA) then
      Json.ObjAddProp(Result, 'BA', Self.TDfeSefazStatusToJsonValue(Source.BA));
    if Assigned(Source.CE) then
      Json.ObjAddProp(Result, 'CE', Self.TDfeSefazStatusToJsonValue(Source.CE));
    if Assigned(Source.DF) then
      Json.ObjAddProp(Result, 'DF', Self.TDfeSefazStatusToJsonValue(Source.DF));
    if Assigned(Source.ES) then
      Json.ObjAddProp(Result, 'ES', Self.TDfeSefazStatusToJsonValue(Source.ES));
    if Assigned(Source.GO) then
      Json.ObjAddProp(Result, 'GO', Self.TDfeSefazStatusToJsonValue(Source.GO));
    if Assigned(Source.MA) then
      Json.ObjAddProp(Result, 'MA', Self.TDfeSefazStatusToJsonValue(Source.MA));
    if Assigned(Source.MT) then
      Json.ObjAddProp(Result, 'MT', Self.TDfeSefazStatusToJsonValue(Source.MT));
    if Assigned(Source.MS) then
      Json.ObjAddProp(Result, 'MS', Self.TDfeSefazStatusToJsonValue(Source.MS));
    if Assigned(Source.MG) then
      Json.ObjAddProp(Result, 'MG', Self.TDfeSefazStatusToJsonValue(Source.MG));
    if Assigned(Source.PA) then
      Json.ObjAddProp(Result, 'PA', Self.TDfeSefazStatusToJsonValue(Source.PA));
    if Assigned(Source.PB) then
      Json.ObjAddProp(Result, 'PB', Self.TDfeSefazStatusToJsonValue(Source.PB));
    if Assigned(Source.PR) then
      Json.ObjAddProp(Result, 'PR', Self.TDfeSefazStatusToJsonValue(Source.PR));
    if Assigned(Source.PE) then
      Json.ObjAddProp(Result, 'PE', Self.TDfeSefazStatusToJsonValue(Source.PE));
    if Assigned(Source.PI) then
      Json.ObjAddProp(Result, 'PI', Self.TDfeSefazStatusToJsonValue(Source.PI));
    if Assigned(Source.RJ) then
      Json.ObjAddProp(Result, 'RJ', Self.TDfeSefazStatusToJsonValue(Source.RJ));
    if Assigned(Source.RN) then
      Json.ObjAddProp(Result, 'RN', Self.TDfeSefazStatusToJsonValue(Source.RN));
    if Assigned(Source.RS) then
      Json.ObjAddProp(Result, 'RS', Self.TDfeSefazStatusToJsonValue(Source.RS));
    if Assigned(Source.RO) then
      Json.ObjAddProp(Result, 'RO', Self.TDfeSefazStatusToJsonValue(Source.RO));
    if Assigned(Source.RR) then
      Json.ObjAddProp(Result, 'RR', Self.TDfeSefazStatusToJsonValue(Source.RR));
    if Assigned(Source.SC) then
      Json.ObjAddProp(Result, 'SC', Self.TDfeSefazStatusToJsonValue(Source.SC));
    if Assigned(Source.SP) then
      Json.ObjAddProp(Result, 'SP', Self.TDfeSefazStatusToJsonValue(Source.SP));
    if Assigned(Source.SE) then
      Json.ObjAddProp(Result, 'SE', Self.TDfeSefazStatusToJsonValue(Source.SE));
    if Assigned(Source.&TO) then
      Json.ObjAddProp(Result, 'TO', Self.TDfeSefazStatusToJsonValue(Source.&TO));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeVisaoGeralSefazStatusToJson(Source: TDfeVisaoGeralSefazStatus): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeVisaoGeralSefazStatusToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeVisaoGeralSefazStatusFromJsonValue(Source: TJSONValue): TDfeVisaoGeralSefazStatus;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeVisaoGeralSefazStatus.Create;
  try
    if Json.ObjContains(Source, 'AC', JValue) then
      Result.AC := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'AL', JValue) then
      Result.AL := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'AP', JValue) then
      Result.AP := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'AM', JValue) then
      Result.AM := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'BA', JValue) then
      Result.BA := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CE', JValue) then
      Result.CE := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'DF', JValue) then
      Result.DF := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ES', JValue) then
      Result.ES := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'GO', JValue) then
      Result.GO := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'MA', JValue) then
      Result.MA := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'MT', JValue) then
      Result.MT := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'MS', JValue) then
      Result.MS := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'MG', JValue) then
      Result.MG := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PA', JValue) then
      Result.PA := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PB', JValue) then
      Result.PB := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PR', JValue) then
      Result.PR := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PE', JValue) then
      Result.PE := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PI', JValue) then
      Result.PI := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'RJ', JValue) then
      Result.RJ := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'RN', JValue) then
      Result.RN := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'RS', JValue) then
      Result.RS := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'RO', JValue) then
      Result.RO := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'RR', JValue) then
      Result.RR := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'SC', JValue) then
      Result.SC := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'SP', JValue) then
      Result.SP := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'SE', JValue) then
      Result.SE := Self.TDfeSefazStatusFromJsonValue(JValue);
    if Json.ObjContains(Source, 'TO', JValue) then
      Result.&TO := Self.TDfeSefazStatusFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeVisaoGeralSefazStatusFromJson(Source: string): TDfeVisaoGeralSefazStatus;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeVisaoGeralSefazStatusFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazToma3ToJsonValue(Source: TCteSefazToma3): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TomaHasValue then
      Json.ObjAddProp(Result, 'toma', Self.IntegerToJsonValue(Source.Toma));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazToma3ToJson(Source: TCteSefazToma3): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazToma3ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazToma3FromJsonValue(Source: TJSONValue): TCteSefazToma3;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazToma3.Create;
  try
    if Json.ObjContains(Source, 'toma', JValue) then
      Result.Toma := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazToma3FromJson(Source: string): TCteSefazToma3;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazToma3FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEnderecoToJsonValue(Source: TCteSefazEndereco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XLgrHasValue then
      Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.XLgr));
    if Source.NroHasValue then
      Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.Nro));
    if Source.XCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.XCpl));
    if Source.XBairroHasValue then
      Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.XBairro));
    if Source.CMunHasValue then
      Json.ObjAddProp(Result, 'cMun', Self.IntegerToJsonValue(Source.CMun));
    if Source.XMunHasValue then
      Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.XMun));
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.IntegerToJsonValue(Source.CEP));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.CPaisHasValue then
      Json.ObjAddProp(Result, 'cPais', Self.IntegerToJsonValue(Source.CPais));
    if Source.XPaisHasValue then
      Json.ObjAddProp(Result, 'xPais', Self.stringToJsonValue(Source.XPais));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEnderecoToJson(Source: TCteSefazEndereco): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazEnderecoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEnderecoFromJsonValue(Source: TJSONValue): TCteSefazEndereco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazEndereco.Create;
  try
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.XLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.Nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.XCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.XBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.CMun := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.XMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPais', JValue) then
      Result.CPais := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xPais', JValue) then
      Result.XPais := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEnderecoFromJson(Source: string): TCteSefazEndereco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazEnderecoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazToma4ToJsonValue(Source: TCteSefazToma4): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TomaHasValue then
      Json.ObjAddProp(Result, 'toma', Self.IntegerToJsonValue(Source.Toma));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Source.XFantHasValue then
      Json.ObjAddProp(Result, 'xFant', Self.stringToJsonValue(Source.XFant));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
    if Assigned(Source.EnderToma) then
      Json.ObjAddProp(Result, 'enderToma', Self.TCteSefazEnderecoToJsonValue(Source.EnderToma));
    if Source.EmailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.Email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazToma4ToJson(Source: TCteSefazToma4): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazToma4ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazToma4FromJsonValue(Source: TJSONValue): TCteSefazToma4;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazToma4.Create;
  try
    if Json.ObjContains(Source, 'toma', JValue) then
      Result.Toma := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xFant', JValue) then
      Result.XFant := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderToma', JValue) then
      Result.EnderToma := Self.TCteSefazEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.Email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazToma4FromJson(Source: string): TCteSefazToma4;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazToma4FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdeToJsonValue(Source: TCteSefazIde): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CUFHasValue then
      Json.ObjAddProp(Result, 'cUF', Self.IntegerToJsonValue(Source.CUF));
    if Source.CCTHasValue then
      Json.ObjAddProp(Result, 'cCT', Self.IntegerToJsonValue(Source.CCT));
    if Source.CFOPHasValue then
      Json.ObjAddProp(Result, 'CFOP', Self.IntegerToJsonValue(Source.CFOP));
    if Source.NatOpHasValue then
      Json.ObjAddProp(Result, 'natOp', Self.stringToJsonValue(Source.NatOp));
    if Source.&ModHasValue then
      Json.ObjAddProp(Result, 'mod', Self.IntegerToJsonValue(Source.&Mod));
    if Source.SerieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.Serie));
    if Source.NCTHasValue then
      Json.ObjAddProp(Result, 'nCT', Self.IntegerToJsonValue(Source.NCT));
    if Source.DhEmiHasValue then
      Json.ObjAddProp(Result, 'dhEmi', Self.TDateTimeToJsonValue(Source.DhEmi));
    if Source.TpImpHasValue then
      Json.ObjAddProp(Result, 'tpImp', Self.IntegerToJsonValue(Source.TpImp));
    if Source.TpEmisHasValue then
      Json.ObjAddProp(Result, 'tpEmis', Self.IntegerToJsonValue(Source.TpEmis));
    if Source.CDVHasValue then
      Json.ObjAddProp(Result, 'cDV', Self.IntegerToJsonValue(Source.CDV));
    if Source.TpAmbHasValue then
      Json.ObjAddProp(Result, 'tpAmb', Self.IntegerToJsonValue(Source.TpAmb));
    if Source.TpCTeHasValue then
      Json.ObjAddProp(Result, 'tpCTe', Self.IntegerToJsonValue(Source.TpCTe));
    if Source.ProcEmiHasValue then
      Json.ObjAddProp(Result, 'procEmi', Self.IntegerToJsonValue(Source.ProcEmi));
    if Source.VerProcHasValue then
      Json.ObjAddProp(Result, 'verProc', Self.stringToJsonValue(Source.VerProc));
    if Source.IndGlobalizadoHasValue then
      Json.ObjAddProp(Result, 'indGlobalizado', Self.IntegerToJsonValue(Source.IndGlobalizado));
    if Source.CMunEnvHasValue then
      Json.ObjAddProp(Result, 'cMunEnv', Self.IntegerToJsonValue(Source.CMunEnv));
    if Source.XMunEnvHasValue then
      Json.ObjAddProp(Result, 'xMunEnv', Self.stringToJsonValue(Source.XMunEnv));
    if Source.UFEnvHasValue then
      Json.ObjAddProp(Result, 'UFEnv', Self.stringToJsonValue(Source.UFEnv));
    if Source.ModalHasValue then
      Json.ObjAddProp(Result, 'modal', Self.stringToJsonValue(Source.Modal));
    if Source.TpServHasValue then
      Json.ObjAddProp(Result, 'tpServ', Self.IntegerToJsonValue(Source.TpServ));
    if Source.CMunIniHasValue then
      Json.ObjAddProp(Result, 'cMunIni', Self.IntegerToJsonValue(Source.CMunIni));
    if Source.XMunIniHasValue then
      Json.ObjAddProp(Result, 'xMunIni', Self.stringToJsonValue(Source.XMunIni));
    if Source.UFIniHasValue then
      Json.ObjAddProp(Result, 'UFIni', Self.stringToJsonValue(Source.UFIni));
    if Source.CMunFimHasValue then
      Json.ObjAddProp(Result, 'cMunFim', Self.IntegerToJsonValue(Source.CMunFim));
    if Source.XMunFimHasValue then
      Json.ObjAddProp(Result, 'xMunFim', Self.stringToJsonValue(Source.XMunFim));
    if Source.UFFimHasValue then
      Json.ObjAddProp(Result, 'UFFim', Self.stringToJsonValue(Source.UFFim));
    if Source.RetiraHasValue then
      Json.ObjAddProp(Result, 'retira', Self.IntegerToJsonValue(Source.Retira));
    if Source.XDetRetiraHasValue then
      Json.ObjAddProp(Result, 'xDetRetira', Self.stringToJsonValue(Source.XDetRetira));
    if Source.IndIETomaHasValue then
      Json.ObjAddProp(Result, 'indIEToma', Self.IntegerToJsonValue(Source.IndIEToma));
    if Assigned(Source.Toma3) then
      Json.ObjAddProp(Result, 'toma3', Self.TCteSefazToma3ToJsonValue(Source.Toma3));
    if Assigned(Source.Toma4) then
      Json.ObjAddProp(Result, 'toma4', Self.TCteSefazToma4ToJsonValue(Source.Toma4));
    if Source.DhContHasValue then
      Json.ObjAddProp(Result, 'dhCont', Self.TDateTimeToJsonValue(Source.DhCont));
    if Source.XJustHasValue then
      Json.ObjAddProp(Result, 'xJust', Self.stringToJsonValue(Source.XJust));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdeToJson(Source: TCteSefazIde): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazIdeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdeFromJsonValue(Source: TJSONValue): TCteSefazIde;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazIde.Create;
  try
    if Json.ObjContains(Source, 'cUF', JValue) then
      Result.CUF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cCT', JValue) then
      Result.CCT := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CFOP', JValue) then
      Result.CFOP := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'natOp', JValue) then
      Result.NatOp := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&Mod := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.Serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nCT', JValue) then
      Result.NCT := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhEmi', JValue) then
      Result.DhEmi := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpImp', JValue) then
      Result.TpImp := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpEmis', JValue) then
      Result.TpEmis := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cDV', JValue) then
      Result.CDV := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpAmb', JValue) then
      Result.TpAmb := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpCTe', JValue) then
      Result.TpCTe := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'procEmi', JValue) then
      Result.ProcEmi := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'verProc', JValue) then
      Result.VerProc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indGlobalizado', JValue) then
      Result.IndGlobalizado := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMunEnv', JValue) then
      Result.CMunEnv := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMunEnv', JValue) then
      Result.XMunEnv := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFEnv', JValue) then
      Result.UFEnv := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modal', JValue) then
      Result.Modal := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpServ', JValue) then
      Result.TpServ := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMunIni', JValue) then
      Result.CMunIni := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMunIni', JValue) then
      Result.XMunIni := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFIni', JValue) then
      Result.UFIni := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMunFim', JValue) then
      Result.CMunFim := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMunFim', JValue) then
      Result.XMunFim := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFFim', JValue) then
      Result.UFFim := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'retira', JValue) then
      Result.Retira := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xDetRetira', JValue) then
      Result.XDetRetira := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indIEToma', JValue) then
      Result.IndIEToma := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'toma3', JValue) then
      Result.Toma3 := Self.TCteSefazToma3FromJsonValue(JValue);
    if Json.ObjContains(Source, 'toma4', JValue) then
      Result.Toma4 := Self.TCteSefazToma4FromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhCont', JValue) then
      Result.DhCont := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xJust', JValue) then
      Result.XJust := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdeFromJson(Source: string): TCteSefazIde;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazIdeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazPassToJsonValue(Source: TCteSefazPass): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XPassHasValue then
      Json.ObjAddProp(Result, 'xPass', Self.stringToJsonValue(Source.XPass));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazPassToJson(Source: TCteSefazPass): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazPassToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazPassFromJsonValue(Source: TJSONValue): TCteSefazPass;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazPass.Create;
  try
    if Json.ObjContains(Source, 'xPass', JValue) then
      Result.XPass := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazPassFromJson(Source: string): TCteSefazPass;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazPassFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazPassListToJsonValue(Source: TCteSefazPassList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazPassToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazPassListToJson(Source: TCteSefazPassList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazPassListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazPassListFromJsonValue(Source: TJSONValue): TCteSefazPassList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazPassList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazPassFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazPassListFromJson(Source: string): TCteSefazPassList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazPassListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFluxoToJsonValue(Source: TCteSefazFluxo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XOrigHasValue then
      Json.ObjAddProp(Result, 'xOrig', Self.stringToJsonValue(Source.XOrig));
    if Assigned(Source.Pass) then
      Json.ObjAddProp(Result, 'pass', Self.TCteSefazPassListToJsonValue(Source.Pass));
    if Source.XDestHasValue then
      Json.ObjAddProp(Result, 'xDest', Self.stringToJsonValue(Source.XDest));
    if Source.XRotaHasValue then
      Json.ObjAddProp(Result, 'xRota', Self.stringToJsonValue(Source.XRota));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFluxoToJson(Source: TCteSefazFluxo): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazFluxoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFluxoFromJsonValue(Source: TJSONValue): TCteSefazFluxo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazFluxo.Create;
  try
    if Json.ObjContains(Source, 'xOrig', JValue) then
      Result.XOrig := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pass', JValue) then
      Result.Pass := Self.TCteSefazPassListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xDest', JValue) then
      Result.XDest := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xRota', JValue) then
      Result.XRota := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFluxoFromJson(Source: string): TCteSefazFluxo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazFluxoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazSemDataToJsonValue(Source: TCteSefazSemData): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpPerHasValue then
      Json.ObjAddProp(Result, 'tpPer', Self.IntegerToJsonValue(Source.TpPer));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazSemDataToJson(Source: TCteSefazSemData): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazSemDataToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazSemDataFromJsonValue(Source: TJSONValue): TCteSefazSemData;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazSemData.Create;
  try
    if Json.ObjContains(Source, 'tpPer', JValue) then
      Result.TpPer := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazSemDataFromJson(Source: string): TCteSefazSemData;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazSemDataFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazComDataToJsonValue(Source: TCteSefazComData): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpPerHasValue then
      Json.ObjAddProp(Result, 'tpPer', Self.IntegerToJsonValue(Source.TpPer));
    if Source.DProgHasValue then
      Json.ObjAddProp(Result, 'dProg', Self.TDateToJsonValue(Source.DProg));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazComDataToJson(Source: TCteSefazComData): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazComDataToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazComDataFromJsonValue(Source: TJSONValue): TCteSefazComData;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazComData.Create;
  try
    if Json.ObjContains(Source, 'tpPer', JValue) then
      Result.TpPer := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dProg', JValue) then
      Result.DProg := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazComDataFromJson(Source: string): TCteSefazComData;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazComDataFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazNoPeriodoToJsonValue(Source: TCteSefazNoPeriodo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpPerHasValue then
      Json.ObjAddProp(Result, 'tpPer', Self.IntegerToJsonValue(Source.TpPer));
    if Source.DIniHasValue then
      Json.ObjAddProp(Result, 'dIni', Self.TDateToJsonValue(Source.DIni));
    if Source.DFimHasValue then
      Json.ObjAddProp(Result, 'dFim', Self.TDateToJsonValue(Source.DFim));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazNoPeriodoToJson(Source: TCteSefazNoPeriodo): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazNoPeriodoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazNoPeriodoFromJsonValue(Source: TJSONValue): TCteSefazNoPeriodo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazNoPeriodo.Create;
  try
    if Json.ObjContains(Source, 'tpPer', JValue) then
      Result.TpPer := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dIni', JValue) then
      Result.DIni := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dFim', JValue) then
      Result.DFim := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazNoPeriodoFromJson(Source: string): TCteSefazNoPeriodo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazNoPeriodoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazSemHoraToJsonValue(Source: TCteSefazSemHora): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpHorHasValue then
      Json.ObjAddProp(Result, 'tpHor', Self.IntegerToJsonValue(Source.TpHor));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazSemHoraToJson(Source: TCteSefazSemHora): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazSemHoraToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazSemHoraFromJsonValue(Source: TJSONValue): TCteSefazSemHora;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazSemHora.Create;
  try
    if Json.ObjContains(Source, 'tpHor', JValue) then
      Result.TpHor := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazSemHoraFromJson(Source: string): TCteSefazSemHora;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazSemHoraFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazComHoraToJsonValue(Source: TCteSefazComHora): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpHorHasValue then
      Json.ObjAddProp(Result, 'tpHor', Self.IntegerToJsonValue(Source.TpHor));
    if Source.HProgHasValue then
      Json.ObjAddProp(Result, 'hProg', Self.stringToJsonValue(Source.HProg));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazComHoraToJson(Source: TCteSefazComHora): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazComHoraToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazComHoraFromJsonValue(Source: TJSONValue): TCteSefazComHora;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazComHora.Create;
  try
    if Json.ObjContains(Source, 'tpHor', JValue) then
      Result.TpHor := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'hProg', JValue) then
      Result.HProg := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazComHoraFromJson(Source: string): TCteSefazComHora;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazComHoraFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazNoInterToJsonValue(Source: TCteSefazNoInter): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpHorHasValue then
      Json.ObjAddProp(Result, 'tpHor', Self.IntegerToJsonValue(Source.TpHor));
    if Source.HIniHasValue then
      Json.ObjAddProp(Result, 'hIni', Self.stringToJsonValue(Source.HIni));
    if Source.HFimHasValue then
      Json.ObjAddProp(Result, 'hFim', Self.stringToJsonValue(Source.HFim));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazNoInterToJson(Source: TCteSefazNoInter): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazNoInterToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazNoInterFromJsonValue(Source: TJSONValue): TCteSefazNoInter;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazNoInter.Create;
  try
    if Json.ObjContains(Source, 'tpHor', JValue) then
      Result.TpHor := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'hIni', JValue) then
      Result.HIni := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'hFim', JValue) then
      Result.HFim := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazNoInterFromJson(Source: string): TCteSefazNoInter;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazNoInterFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEntregaToJsonValue(Source: TCteSefazEntrega): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.SemData) then
      Json.ObjAddProp(Result, 'semData', Self.TCteSefazSemDataToJsonValue(Source.SemData));
    if Assigned(Source.ComData) then
      Json.ObjAddProp(Result, 'comData', Self.TCteSefazComDataToJsonValue(Source.ComData));
    if Assigned(Source.NoPeriodo) then
      Json.ObjAddProp(Result, 'noPeriodo', Self.TCteSefazNoPeriodoToJsonValue(Source.NoPeriodo));
    if Assigned(Source.SemHora) then
      Json.ObjAddProp(Result, 'semHora', Self.TCteSefazSemHoraToJsonValue(Source.SemHora));
    if Assigned(Source.ComHora) then
      Json.ObjAddProp(Result, 'comHora', Self.TCteSefazComHoraToJsonValue(Source.ComHora));
    if Assigned(Source.NoInter) then
      Json.ObjAddProp(Result, 'noInter', Self.TCteSefazNoInterToJsonValue(Source.NoInter));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEntregaToJson(Source: TCteSefazEntrega): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazEntregaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEntregaFromJsonValue(Source: TJSONValue): TCteSefazEntrega;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazEntrega.Create;
  try
    if Json.ObjContains(Source, 'semData', JValue) then
      Result.SemData := Self.TCteSefazSemDataFromJsonValue(JValue);
    if Json.ObjContains(Source, 'comData', JValue) then
      Result.ComData := Self.TCteSefazComDataFromJsonValue(JValue);
    if Json.ObjContains(Source, 'noPeriodo', JValue) then
      Result.NoPeriodo := Self.TCteSefazNoPeriodoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'semHora', JValue) then
      Result.SemHora := Self.TCteSefazSemHoraFromJsonValue(JValue);
    if Json.ObjContains(Source, 'comHora', JValue) then
      Result.ComHora := Self.TCteSefazComHoraFromJsonValue(JValue);
    if Json.ObjContains(Source, 'noInter', JValue) then
      Result.NoInter := Self.TCteSefazNoInterFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEntregaFromJson(Source: string): TCteSefazEntrega;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazEntregaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazObsContToJsonValue(Source: TCteSefazObsCont): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XCampoHasValue then
      Json.ObjAddProp(Result, 'xCampo', Self.stringToJsonValue(Source.XCampo));
    if Source.XTextoHasValue then
      Json.ObjAddProp(Result, 'xTexto', Self.stringToJsonValue(Source.XTexto));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazObsContToJson(Source: TCteSefazObsCont): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazObsContToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazObsContFromJsonValue(Source: TJSONValue): TCteSefazObsCont;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazObsCont.Create;
  try
    if Json.ObjContains(Source, 'xCampo', JValue) then
      Result.XCampo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTexto', JValue) then
      Result.XTexto := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazObsContFromJson(Source: string): TCteSefazObsCont;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazObsContFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazObsContListToJsonValue(Source: TCteSefazObsContList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazObsContToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazObsContListToJson(Source: TCteSefazObsContList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazObsContListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazObsContListFromJsonValue(Source: TJSONValue): TCteSefazObsContList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazObsContList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazObsContFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazObsContListFromJson(Source: string): TCteSefazObsContList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazObsContListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazObsFiscoToJsonValue(Source: TCteSefazObsFisco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XCampoHasValue then
      Json.ObjAddProp(Result, 'xCampo', Self.stringToJsonValue(Source.XCampo));
    if Source.XTextoHasValue then
      Json.ObjAddProp(Result, 'xTexto', Self.stringToJsonValue(Source.XTexto));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazObsFiscoToJson(Source: TCteSefazObsFisco): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazObsFiscoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazObsFiscoFromJsonValue(Source: TJSONValue): TCteSefazObsFisco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazObsFisco.Create;
  try
    if Json.ObjContains(Source, 'xCampo', JValue) then
      Result.XCampo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTexto', JValue) then
      Result.XTexto := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazObsFiscoFromJson(Source: string): TCteSefazObsFisco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazObsFiscoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazObsFiscoListToJsonValue(Source: TCteSefazObsFiscoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazObsFiscoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazObsFiscoListToJson(Source: TCteSefazObsFiscoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazObsFiscoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazObsFiscoListFromJsonValue(Source: TJSONValue): TCteSefazObsFiscoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazObsFiscoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazObsFiscoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazObsFiscoListFromJson(Source: string): TCteSefazObsFiscoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazObsFiscoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazComplToJsonValue(Source: TCteSefazCompl): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XCaracAdHasValue then
      Json.ObjAddProp(Result, 'xCaracAd', Self.stringToJsonValue(Source.XCaracAd));
    if Source.XCaracSerHasValue then
      Json.ObjAddProp(Result, 'xCaracSer', Self.stringToJsonValue(Source.XCaracSer));
    if Source.XEmiHasValue then
      Json.ObjAddProp(Result, 'xEmi', Self.stringToJsonValue(Source.XEmi));
    if Assigned(Source.Fluxo) then
      Json.ObjAddProp(Result, 'fluxo', Self.TCteSefazFluxoToJsonValue(Source.Fluxo));
    if Assigned(Source.Entrega) then
      Json.ObjAddProp(Result, 'Entrega', Self.TCteSefazEntregaToJsonValue(Source.Entrega));
    if Source.OrigCalcHasValue then
      Json.ObjAddProp(Result, 'origCalc', Self.stringToJsonValue(Source.OrigCalc));
    if Source.DestCalcHasValue then
      Json.ObjAddProp(Result, 'destCalc', Self.stringToJsonValue(Source.DestCalc));
    if Source.XObsHasValue then
      Json.ObjAddProp(Result, 'xObs', Self.stringToJsonValue(Source.XObs));
    if Assigned(Source.ObsCont) then
      Json.ObjAddProp(Result, 'ObsCont', Self.TCteSefazObsContListToJsonValue(Source.ObsCont));
    if Assigned(Source.ObsFisco) then
      Json.ObjAddProp(Result, 'ObsFisco', Self.TCteSefazObsFiscoListToJsonValue(Source.ObsFisco));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazComplToJson(Source: TCteSefazCompl): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazComplToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazComplFromJsonValue(Source: TJSONValue): TCteSefazCompl;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazCompl.Create;
  try
    if Json.ObjContains(Source, 'xCaracAd', JValue) then
      Result.XCaracAd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCaracSer', JValue) then
      Result.XCaracSer := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xEmi', JValue) then
      Result.XEmi := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fluxo', JValue) then
      Result.Fluxo := Self.TCteSefazFluxoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Entrega', JValue) then
      Result.Entrega := Self.TCteSefazEntregaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'origCalc', JValue) then
      Result.OrigCalc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'destCalc', JValue) then
      Result.DestCalc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xObs', JValue) then
      Result.XObs := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ObsCont', JValue) then
      Result.ObsCont := Self.TCteSefazObsContListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ObsFisco', JValue) then
      Result.ObsFisco := Self.TCteSefazObsFiscoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazComplFromJson(Source: string): TCteSefazCompl;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazComplFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEndeEmiToJsonValue(Source: TCteSefazEndeEmi): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XLgrHasValue then
      Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.XLgr));
    if Source.NroHasValue then
      Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.Nro));
    if Source.XCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.XCpl));
    if Source.XBairroHasValue then
      Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.XBairro));
    if Source.CMunHasValue then
      Json.ObjAddProp(Result, 'cMun', Self.IntegerToJsonValue(Source.CMun));
    if Source.XMunHasValue then
      Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.XMun));
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.IntegerToJsonValue(Source.CEP));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEndeEmiToJson(Source: TCteSefazEndeEmi): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazEndeEmiToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEndeEmiFromJsonValue(Source: TJSONValue): TCteSefazEndeEmi;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazEndeEmi.Create;
  try
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.XLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.Nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.XCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.XBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.CMun := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.XMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEndeEmiFromJson(Source: string): TCteSefazEndeEmi;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazEndeEmiFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEmitToJsonValue(Source: TCteSefazEmit): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.IESTHasValue then
      Json.ObjAddProp(Result, 'IEST', Self.stringToJsonValue(Source.IEST));
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Source.XFantHasValue then
      Json.ObjAddProp(Result, 'xFant', Self.stringToJsonValue(Source.XFant));
    if Assigned(Source.EnderEmit) then
      Json.ObjAddProp(Result, 'enderEmit', Self.TCteSefazEndeEmiToJsonValue(Source.EnderEmit));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEmitToJson(Source: TCteSefazEmit): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazEmitToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEmitFromJsonValue(Source: TJSONValue): TCteSefazEmit;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazEmit.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IEST', JValue) then
      Result.IEST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xFant', JValue) then
      Result.XFant := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderEmit', JValue) then
      Result.EnderEmit := Self.TCteSefazEndeEmiFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEmitFromJson(Source: string): TCteSefazEmit;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazEmitFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRemToJsonValue(Source: TCteSefazRem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Source.XFantHasValue then
      Json.ObjAddProp(Result, 'xFant', Self.stringToJsonValue(Source.XFant));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
    if Assigned(Source.EnderReme) then
      Json.ObjAddProp(Result, 'enderReme', Self.TCteSefazEnderecoToJsonValue(Source.EnderReme));
    if Source.EmailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.Email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRemToJson(Source: TCteSefazRem): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazRemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRemFromJsonValue(Source: TJSONValue): TCteSefazRem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazRem.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xFant', JValue) then
      Result.XFant := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderReme', JValue) then
      Result.EnderReme := Self.TCteSefazEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.Email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRemFromJson(Source: string): TCteSefazRem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazRemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazExpedToJsonValue(Source: TCteSefazExped): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
    if Assigned(Source.EnderExped) then
      Json.ObjAddProp(Result, 'enderExped', Self.TCteSefazEnderecoToJsonValue(Source.EnderExped));
    if Source.EmailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.Email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazExpedToJson(Source: TCteSefazExped): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazExpedToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazExpedFromJsonValue(Source: TJSONValue): TCteSefazExped;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazExped.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderExped', JValue) then
      Result.EnderExped := Self.TCteSefazEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.Email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazExpedFromJson(Source: string): TCteSefazExped;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazExpedFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRecebToJsonValue(Source: TCteSefazReceb): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
    if Assigned(Source.EnderReceb) then
      Json.ObjAddProp(Result, 'enderReceb', Self.TCteSefazEnderecoToJsonValue(Source.EnderReceb));
    if Source.EmailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.Email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRecebToJson(Source: TCteSefazReceb): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazRecebToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRecebFromJsonValue(Source: TJSONValue): TCteSefazReceb;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazReceb.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderReceb', JValue) then
      Result.EnderReceb := Self.TCteSefazEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.Email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRecebFromJson(Source: string): TCteSefazReceb;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazRecebFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDestToJsonValue(Source: TCteSefazDest): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
    if Source.ISUFHasValue then
      Json.ObjAddProp(Result, 'ISUF', Self.stringToJsonValue(Source.ISUF));
    if Assigned(Source.EnderDest) then
      Json.ObjAddProp(Result, 'enderDest', Self.TCteSefazEnderecoToJsonValue(Source.EnderDest));
    if Source.EmailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.Email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDestToJson(Source: TCteSefazDest): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDestToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDestFromJsonValue(Source: TJSONValue): TCteSefazDest;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDest.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ISUF', JValue) then
      Result.ISUF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderDest', JValue) then
      Result.EnderDest := Self.TCteSefazEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.Email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDestFromJson(Source: string): TCteSefazDest;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDestFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazCompToJsonValue(Source: TCteSefazComp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Source.VCompHasValue then
      Json.ObjAddProp(Result, 'vComp', Self.DoubleToJsonValue(Source.VComp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazCompToJson(Source: TCteSefazComp): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazCompToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazCompFromJsonValue(Source: TJSONValue): TCteSefazComp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazComp.Create;
  try
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vComp', JValue) then
      Result.VComp := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazCompFromJson(Source: string): TCteSefazComp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazCompFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazCompListToJsonValue(Source: TCteSefazCompList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazCompToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazCompListToJson(Source: TCteSefazCompList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazCompListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazCompListFromJsonValue(Source: TJSONValue): TCteSefazCompList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazCompList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazCompFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazCompListFromJson(Source: string): TCteSefazCompList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazCompListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazVPrestToJsonValue(Source: TCteSefazVPrest): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VTPrestHasValue then
      Json.ObjAddProp(Result, 'vTPrest', Self.DoubleToJsonValue(Source.VTPrest));
    if Source.VRecHasValue then
      Json.ObjAddProp(Result, 'vRec', Self.DoubleToJsonValue(Source.VRec));
    if Assigned(Source.Comp) then
      Json.ObjAddProp(Result, 'Comp', Self.TCteSefazCompListToJsonValue(Source.Comp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazVPrestToJson(Source: TCteSefazVPrest): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazVPrestToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazVPrestFromJsonValue(Source: TJSONValue): TCteSefazVPrest;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazVPrest.Create;
  try
    if Json.ObjContains(Source, 'vTPrest', JValue) then
      Result.VTPrest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vRec', JValue) then
      Result.VRec := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Comp', JValue) then
      Result.Comp := Self.TCteSefazCompListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazVPrestFromJson(Source: string): TCteSefazVPrest;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazVPrestFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS00ToJsonValue(Source: TCteSefazICMS00): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PICMSHasValue then
      Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.PICMS));
    if Source.VICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.VICMS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS00ToJson(Source: TCteSefazICMS00): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazICMS00ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS00FromJsonValue(Source: TJSONValue): TCteSefazICMS00;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazICMS00.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.PICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.VICMS := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS00FromJson(Source: string): TCteSefazICMS00;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazICMS00FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS20ToJsonValue(Source: TCteSefazICMS20): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.PRedBCHasValue then
      Json.ObjAddProp(Result, 'pRedBC', Self.DoubleToJsonValue(Source.PRedBC));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PICMSHasValue then
      Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.PICMS));
    if Source.VICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.VICMS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS20ToJson(Source: TCteSefazICMS20): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazICMS20ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS20FromJsonValue(Source: TJSONValue): TCteSefazICMS20;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazICMS20.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBC', JValue) then
      Result.PRedBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.PICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.VICMS := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS20FromJson(Source: string): TCteSefazICMS20;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazICMS20FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS45ToJsonValue(Source: TCteSefazICMS45): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS45ToJson(Source: TCteSefazICMS45): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazICMS45ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS45FromJsonValue(Source: TJSONValue): TCteSefazICMS45;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazICMS45.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS45FromJson(Source: string): TCteSefazICMS45;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazICMS45FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS60ToJsonValue(Source: TCteSefazICMS60): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.VBCSTRetHasValue then
      Json.ObjAddProp(Result, 'vBCSTRet', Self.DoubleToJsonValue(Source.VBCSTRet));
    if Source.VICMSSTRetHasValue then
      Json.ObjAddProp(Result, 'vICMSSTRet', Self.DoubleToJsonValue(Source.VICMSSTRet));
    if Source.PICMSSTRetHasValue then
      Json.ObjAddProp(Result, 'pICMSSTRet', Self.DoubleToJsonValue(Source.PICMSSTRet));
    if Source.VCredHasValue then
      Json.ObjAddProp(Result, 'vCred', Self.DoubleToJsonValue(Source.VCred));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS60ToJson(Source: TCteSefazICMS60): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazICMS60ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS60FromJsonValue(Source: TJSONValue): TCteSefazICMS60;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazICMS60.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCSTRet', JValue) then
      Result.VBCSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSTRet', JValue) then
      Result.VICMSSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSSTRet', JValue) then
      Result.PICMSSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCred', JValue) then
      Result.VCred := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS60FromJson(Source: string): TCteSefazICMS60;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazICMS60FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS90ToJsonValue(Source: TCteSefazICMS90): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.PRedBCHasValue then
      Json.ObjAddProp(Result, 'pRedBC', Self.DoubleToJsonValue(Source.PRedBC));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PICMSHasValue then
      Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.PICMS));
    if Source.VICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.VICMS));
    if Source.VCredHasValue then
      Json.ObjAddProp(Result, 'vCred', Self.DoubleToJsonValue(Source.VCred));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS90ToJson(Source: TCteSefazICMS90): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazICMS90ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS90FromJsonValue(Source: TJSONValue): TCteSefazICMS90;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazICMS90.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBC', JValue) then
      Result.PRedBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.PICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.VICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCred', JValue) then
      Result.VCred := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS90FromJson(Source: string): TCteSefazICMS90;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazICMS90FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMSOutraUFToJsonValue(Source: TCteSefazICMSOutraUF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.PRedBCOutraUFHasValue then
      Json.ObjAddProp(Result, 'pRedBCOutraUF', Self.DoubleToJsonValue(Source.PRedBCOutraUF));
    if Source.VBCOutraUFHasValue then
      Json.ObjAddProp(Result, 'vBCOutraUF', Self.DoubleToJsonValue(Source.VBCOutraUF));
    if Source.PICMSOutraUFHasValue then
      Json.ObjAddProp(Result, 'pICMSOutraUF', Self.DoubleToJsonValue(Source.PICMSOutraUF));
    if Source.VICMSOutraUFHasValue then
      Json.ObjAddProp(Result, 'vICMSOutraUF', Self.DoubleToJsonValue(Source.VICMSOutraUF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMSOutraUFToJson(Source: TCteSefazICMSOutraUF): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazICMSOutraUFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMSOutraUFFromJsonValue(Source: TJSONValue): TCteSefazICMSOutraUF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazICMSOutraUF.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCOutraUF', JValue) then
      Result.PRedBCOutraUF := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCOutraUF', JValue) then
      Result.VBCOutraUF := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSOutraUF', JValue) then
      Result.PICMSOutraUF := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSOutraUF', JValue) then
      Result.VICMSOutraUF := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMSOutraUFFromJson(Source: string): TCteSefazICMSOutraUF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazICMSOutraUFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMSSNToJsonValue(Source: TCteSefazICMSSN): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.IndSNHasValue then
      Json.ObjAddProp(Result, 'indSN', Self.IntegerToJsonValue(Source.IndSN));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMSSNToJson(Source: TCteSefazICMSSN): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazICMSSNToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMSSNFromJsonValue(Source: TJSONValue): TCteSefazICMSSN;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazICMSSN.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indSN', JValue) then
      Result.IndSN := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMSSNFromJson(Source: string): TCteSefazICMSSN;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazICMSSNFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazImpToJsonValue(Source: TCteSefazImp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.ICMS00) then
      Json.ObjAddProp(Result, 'ICMS00', Self.TCteSefazICMS00ToJsonValue(Source.ICMS00));
    if Assigned(Source.ICMS20) then
      Json.ObjAddProp(Result, 'ICMS20', Self.TCteSefazICMS20ToJsonValue(Source.ICMS20));
    if Assigned(Source.ICMS45) then
      Json.ObjAddProp(Result, 'ICMS45', Self.TCteSefazICMS45ToJsonValue(Source.ICMS45));
    if Assigned(Source.ICMS60) then
      Json.ObjAddProp(Result, 'ICMS60', Self.TCteSefazICMS60ToJsonValue(Source.ICMS60));
    if Assigned(Source.ICMS90) then
      Json.ObjAddProp(Result, 'ICMS90', Self.TCteSefazICMS90ToJsonValue(Source.ICMS90));
    if Assigned(Source.ICMSOutraUF) then
      Json.ObjAddProp(Result, 'ICMSOutraUF', Self.TCteSefazICMSOutraUFToJsonValue(Source.ICMSOutraUF));
    if Assigned(Source.ICMSSN) then
      Json.ObjAddProp(Result, 'ICMSSN', Self.TCteSefazICMSSNToJsonValue(Source.ICMSSN));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazImpToJson(Source: TCteSefazImp): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazImpToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazImpFromJsonValue(Source: TJSONValue): TCteSefazImp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazImp.Create;
  try
    if Json.ObjContains(Source, 'ICMS00', JValue) then
      Result.ICMS00 := Self.TCteSefazICMS00FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS20', JValue) then
      Result.ICMS20 := Self.TCteSefazICMS20FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS45', JValue) then
      Result.ICMS45 := Self.TCteSefazICMS45FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS60', JValue) then
      Result.ICMS60 := Self.TCteSefazICMS60FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS90', JValue) then
      Result.ICMS90 := Self.TCteSefazICMS90FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSOutraUF', JValue) then
      Result.ICMSOutraUF := Self.TCteSefazICMSOutraUFFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSSN', JValue) then
      Result.ICMSSN := Self.TCteSefazICMSSNFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazImpFromJson(Source: string): TCteSefazImp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazImpFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMSUFFimToJsonValue(Source: TCteSefazICMSUFFim): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VBCUFFimHasValue then
      Json.ObjAddProp(Result, 'vBCUFFim', Self.DoubleToJsonValue(Source.VBCUFFim));
    if Source.PFCPUFFimHasValue then
      Json.ObjAddProp(Result, 'pFCPUFFim', Self.DoubleToJsonValue(Source.PFCPUFFim));
    if Source.PICMSUFFimHasValue then
      Json.ObjAddProp(Result, 'pICMSUFFim', Self.DoubleToJsonValue(Source.PICMSUFFim));
    if Source.PICMSInterHasValue then
      Json.ObjAddProp(Result, 'pICMSInter', Self.DoubleToJsonValue(Source.PICMSInter));
    if Source.VFCPUFFimHasValue then
      Json.ObjAddProp(Result, 'vFCPUFFim', Self.DoubleToJsonValue(Source.VFCPUFFim));
    if Source.VICMSUFFimHasValue then
      Json.ObjAddProp(Result, 'vICMSUFFim', Self.DoubleToJsonValue(Source.VICMSUFFim));
    if Source.VICMSUFIniHasValue then
      Json.ObjAddProp(Result, 'vICMSUFIni', Self.DoubleToJsonValue(Source.VICMSUFIni));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMSUFFimToJson(Source: TCteSefazICMSUFFim): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazICMSUFFimToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMSUFFimFromJsonValue(Source: TJSONValue): TCteSefazICMSUFFim;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazICMSUFFim.Create;
  try
    if Json.ObjContains(Source, 'vBCUFFim', JValue) then
      Result.VBCUFFim := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPUFFim', JValue) then
      Result.PFCPUFFim := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSUFFim', JValue) then
      Result.PICMSUFFim := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSInter', JValue) then
      Result.PICMSInter := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPUFFim', JValue) then
      Result.VFCPUFFim := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSUFFim', JValue) then
      Result.VICMSUFFim := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSUFIni', JValue) then
      Result.VICMSUFIni := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMSUFFimFromJson(Source: string): TCteSefazICMSUFFim;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazICMSUFFimFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteImpToJsonValue(Source: TCteSefazInfCteImp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.ICMS) then
      Json.ObjAddProp(Result, 'ICMS', Self.TCteSefazImpToJsonValue(Source.ICMS));
    if Source.VTotTribHasValue then
      Json.ObjAddProp(Result, 'vTotTrib', Self.DoubleToJsonValue(Source.VTotTrib));
    if Source.InfAdFiscoHasValue then
      Json.ObjAddProp(Result, 'infAdFisco', Self.stringToJsonValue(Source.InfAdFisco));
    if Assigned(Source.ICMSUFFim) then
      Json.ObjAddProp(Result, 'ICMSUFFim', Self.TCteSefazICMSUFFimToJsonValue(Source.ICMSUFFim));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteImpToJson(Source: TCteSefazInfCteImp): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCteImpToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteImpFromJsonValue(Source: TJSONValue): TCteSefazInfCteImp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCteImp.Create;
  try
    if Json.ObjContains(Source, 'ICMS', JValue) then
      Result.ICMS := Self.TCteSefazImpFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vTotTrib', JValue) then
      Result.VTotTrib := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infAdFisco', JValue) then
      Result.InfAdFisco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSUFFim', JValue) then
      Result.ICMSUFFim := Self.TCteSefazICMSUFFimFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteImpFromJson(Source: string): TCteSefazInfCteImp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCteImpFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfQToJsonValue(Source: TCteSefazInfQ): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CUnidHasValue then
      Json.ObjAddProp(Result, 'cUnid', Self.stringToJsonValue(Source.CUnid));
    if Source.TpMedHasValue then
      Json.ObjAddProp(Result, 'tpMed', Self.stringToJsonValue(Source.TpMed));
    if Source.QCargaHasValue then
      Json.ObjAddProp(Result, 'qCarga', Self.DoubleToJsonValue(Source.QCarga));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfQToJson(Source: TCteSefazInfQ): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfQToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfQFromJsonValue(Source: TJSONValue): TCteSefazInfQ;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfQ.Create;
  try
    if Json.ObjContains(Source, 'cUnid', JValue) then
      Result.CUnid := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpMed', JValue) then
      Result.TpMed := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qCarga', JValue) then
      Result.QCarga := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfQFromJson(Source: string): TCteSefazInfQ;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfQFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfQListToJsonValue(Source: TCteSefazInfQList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazInfQToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfQListToJson(Source: TCteSefazInfQList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfQListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfQListFromJsonValue(Source: TJSONValue): TCteSefazInfQList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfQList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazInfQFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfQListFromJson(Source: string): TCteSefazInfQList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfQListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCargaToJsonValue(Source: TCteSefazInfCarga): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VCargaHasValue then
      Json.ObjAddProp(Result, 'vCarga', Self.DoubleToJsonValue(Source.VCarga));
    if Source.ProPredHasValue then
      Json.ObjAddProp(Result, 'proPred', Self.stringToJsonValue(Source.ProPred));
    if Source.XOutCatHasValue then
      Json.ObjAddProp(Result, 'xOutCat', Self.stringToJsonValue(Source.XOutCat));
    if Assigned(Source.InfQ) then
      Json.ObjAddProp(Result, 'infQ', Self.TCteSefazInfQListToJsonValue(Source.InfQ));
    if Source.VCargaAverbHasValue then
      Json.ObjAddProp(Result, 'vCargaAverb', Self.DoubleToJsonValue(Source.VCargaAverb));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCargaToJson(Source: TCteSefazInfCarga): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCargaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCargaFromJsonValue(Source: TJSONValue): TCteSefazInfCarga;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCarga.Create;
  try
    if Json.ObjContains(Source, 'vCarga', JValue) then
      Result.VCarga := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'proPred', JValue) then
      Result.ProPred := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xOutCat', JValue) then
      Result.XOutCat := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infQ', JValue) then
      Result.InfQ := Self.TCteSefazInfQListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCargaAverb', JValue) then
      Result.VCargaAverb := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCargaFromJson(Source: string): TCteSefazInfCarga;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCargaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacUnidCargaToJsonValue(Source: TCteSefazLacUnidCarga): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NLacreHasValue then
      Json.ObjAddProp(Result, 'nLacre', Self.stringToJsonValue(Source.NLacre));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacUnidCargaToJson(Source: TCteSefazLacUnidCarga): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazLacUnidCargaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacUnidCargaFromJsonValue(Source: TJSONValue): TCteSefazLacUnidCarga;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazLacUnidCarga.Create;
  try
    if Json.ObjContains(Source, 'nLacre', JValue) then
      Result.NLacre := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacUnidCargaFromJson(Source: string): TCteSefazLacUnidCarga;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazLacUnidCargaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacUnidCargaListToJsonValue(Source: TCteSefazLacUnidCargaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazLacUnidCargaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacUnidCargaListToJson(Source: TCteSefazLacUnidCargaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazLacUnidCargaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacUnidCargaListFromJsonValue(Source: TJSONValue): TCteSefazLacUnidCargaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazLacUnidCargaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazLacUnidCargaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacUnidCargaListFromJson(Source: string): TCteSefazLacUnidCargaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazLacUnidCargaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazUnidCargaToJsonValue(Source: TCteSefazUnidCarga): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpUnidCargaHasValue then
      Json.ObjAddProp(Result, 'tpUnidCarga', Self.IntegerToJsonValue(Source.TpUnidCarga));
    if Source.IdUnidCargaHasValue then
      Json.ObjAddProp(Result, 'idUnidCarga', Self.stringToJsonValue(Source.IdUnidCarga));
    if Assigned(Source.LacUnidCarga) then
      Json.ObjAddProp(Result, 'lacUnidCarga', Self.TCteSefazLacUnidCargaListToJsonValue(Source.LacUnidCarga));
    if Source.QtdRatHasValue then
      Json.ObjAddProp(Result, 'qtdRat', Self.DoubleToJsonValue(Source.QtdRat));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazUnidCargaToJson(Source: TCteSefazUnidCarga): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazUnidCargaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazUnidCargaFromJsonValue(Source: TJSONValue): TCteSefazUnidCarga;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazUnidCarga.Create;
  try
    if Json.ObjContains(Source, 'tpUnidCarga', JValue) then
      Result.TpUnidCarga := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idUnidCarga', JValue) then
      Result.IdUnidCarga := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lacUnidCarga', JValue) then
      Result.LacUnidCarga := Self.TCteSefazLacUnidCargaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qtdRat', JValue) then
      Result.QtdRat := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazUnidCargaFromJson(Source: string): TCteSefazUnidCarga;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazUnidCargaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazUnidCargaListToJsonValue(Source: TCteSefazUnidCargaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazUnidCargaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazUnidCargaListToJson(Source: TCteSefazUnidCargaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazUnidCargaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazUnidCargaListFromJsonValue(Source: TJSONValue): TCteSefazUnidCargaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazUnidCargaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazUnidCargaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazUnidCargaListFromJson(Source: string): TCteSefazUnidCargaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazUnidCargaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacUnidTranspToJsonValue(Source: TCteSefazLacUnidTransp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NLacreHasValue then
      Json.ObjAddProp(Result, 'nLacre', Self.stringToJsonValue(Source.NLacre));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacUnidTranspToJson(Source: TCteSefazLacUnidTransp): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazLacUnidTranspToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacUnidTranspFromJsonValue(Source: TJSONValue): TCteSefazLacUnidTransp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazLacUnidTransp.Create;
  try
    if Json.ObjContains(Source, 'nLacre', JValue) then
      Result.NLacre := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacUnidTranspFromJson(Source: string): TCteSefazLacUnidTransp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazLacUnidTranspFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacUnidTranspListToJsonValue(Source: TCteSefazLacUnidTranspList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazLacUnidTranspToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacUnidTranspListToJson(Source: TCteSefazLacUnidTranspList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazLacUnidTranspListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacUnidTranspListFromJsonValue(Source: TJSONValue): TCteSefazLacUnidTranspList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazLacUnidTranspList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazLacUnidTranspFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacUnidTranspListFromJson(Source: string): TCteSefazLacUnidTranspList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazLacUnidTranspListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazUnidadeTranspToJsonValue(Source: TCteSefazUnidadeTransp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpUnidTranspHasValue then
      Json.ObjAddProp(Result, 'tpUnidTransp', Self.IntegerToJsonValue(Source.TpUnidTransp));
    if Source.IdUnidTranspHasValue then
      Json.ObjAddProp(Result, 'idUnidTransp', Self.stringToJsonValue(Source.IdUnidTransp));
    if Assigned(Source.LacUnidTransp) then
      Json.ObjAddProp(Result, 'lacUnidTransp', Self.TCteSefazLacUnidTranspListToJsonValue(Source.LacUnidTransp));
    if Assigned(Source.InfUnidCarga) then
      Json.ObjAddProp(Result, 'infUnidCarga', Self.TCteSefazUnidCargaListToJsonValue(Source.InfUnidCarga));
    if Source.QtdRatHasValue then
      Json.ObjAddProp(Result, 'qtdRat', Self.DoubleToJsonValue(Source.QtdRat));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazUnidadeTranspToJson(Source: TCteSefazUnidadeTransp): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazUnidadeTranspToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazUnidadeTranspFromJsonValue(Source: TJSONValue): TCteSefazUnidadeTransp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazUnidadeTransp.Create;
  try
    if Json.ObjContains(Source, 'tpUnidTransp', JValue) then
      Result.TpUnidTransp := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idUnidTransp', JValue) then
      Result.IdUnidTransp := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lacUnidTransp', JValue) then
      Result.LacUnidTransp := Self.TCteSefazLacUnidTranspListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidCarga', JValue) then
      Result.InfUnidCarga := Self.TCteSefazUnidCargaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qtdRat', JValue) then
      Result.QtdRat := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazUnidadeTranspFromJson(Source: string): TCteSefazUnidadeTransp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazUnidadeTranspFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazUnidadeTranspListToJsonValue(Source: TCteSefazUnidadeTranspList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazUnidadeTranspToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazUnidadeTranspListToJson(Source: TCteSefazUnidadeTranspList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazUnidadeTranspListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazUnidadeTranspListFromJsonValue(Source: TJSONValue): TCteSefazUnidadeTranspList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazUnidadeTranspList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazUnidadeTranspFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazUnidadeTranspListFromJson(Source: string): TCteSefazUnidadeTranspList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazUnidadeTranspListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfNFToJsonValue(Source: TCteSefazInfNF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NRomaHasValue then
      Json.ObjAddProp(Result, 'nRoma', Self.stringToJsonValue(Source.NRoma));
    if Source.NPedHasValue then
      Json.ObjAddProp(Result, 'nPed', Self.stringToJsonValue(Source.NPed));
    if Source.&ModHasValue then
      Json.ObjAddProp(Result, 'mod', Self.stringToJsonValue(Source.&Mod));
    if Source.SerieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.stringToJsonValue(Source.Serie));
    if Source.NDocHasValue then
      Json.ObjAddProp(Result, 'nDoc', Self.stringToJsonValue(Source.NDoc));
    if Source.DEmiHasValue then
      Json.ObjAddProp(Result, 'dEmi', Self.TDateToJsonValue(Source.DEmi));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.VICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.VICMS));
    if Source.VBCSTHasValue then
      Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.VBCST));
    if Source.VSTHasValue then
      Json.ObjAddProp(Result, 'vST', Self.DoubleToJsonValue(Source.VST));
    if Source.VProdHasValue then
      Json.ObjAddProp(Result, 'vProd', Self.DoubleToJsonValue(Source.VProd));
    if Source.VNFHasValue then
      Json.ObjAddProp(Result, 'vNF', Self.DoubleToJsonValue(Source.VNF));
    if Source.NCFOPHasValue then
      Json.ObjAddProp(Result, 'nCFOP', Self.IntegerToJsonValue(Source.NCFOP));
    if Source.NPesoHasValue then
      Json.ObjAddProp(Result, 'nPeso', Self.DoubleToJsonValue(Source.NPeso));
    if Source.PINHasValue then
      Json.ObjAddProp(Result, 'PIN', Self.stringToJsonValue(Source.PIN));
    if Source.DPrevHasValue then
      Json.ObjAddProp(Result, 'dPrev', Self.TDateToJsonValue(Source.DPrev));
    if Assigned(Source.InfUnidCarga) then
      Json.ObjAddProp(Result, 'infUnidCarga', Self.TCteSefazUnidCargaListToJsonValue(Source.InfUnidCarga));
    if Assigned(Source.InfUnidTransp) then
      Json.ObjAddProp(Result, 'infUnidTransp', Self.TCteSefazUnidadeTranspListToJsonValue(Source.InfUnidTransp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfNFToJson(Source: TCteSefazInfNF): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfNFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfNFFromJsonValue(Source: TJSONValue): TCteSefazInfNF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfNF.Create;
  try
    if Json.ObjContains(Source, 'nRoma', JValue) then
      Result.NRoma := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nPed', JValue) then
      Result.NPed := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&Mod := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.Serie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nDoc', JValue) then
      Result.NDoc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dEmi', JValue) then
      Result.DEmi := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.VICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.VBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vST', JValue) then
      Result.VST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vProd', JValue) then
      Result.VProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vNF', JValue) then
      Result.VNF := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nCFOP', JValue) then
      Result.NCFOP := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nPeso', JValue) then
      Result.NPeso := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PIN', JValue) then
      Result.PIN := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dPrev', JValue) then
      Result.DPrev := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidCarga', JValue) then
      Result.InfUnidCarga := Self.TCteSefazUnidCargaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidTransp', JValue) then
      Result.InfUnidTransp := Self.TCteSefazUnidadeTranspListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfNFFromJson(Source: string): TCteSefazInfNF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfNFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfNFListToJsonValue(Source: TCteSefazInfNFList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazInfNFToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfNFListToJson(Source: TCteSefazInfNFList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfNFListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfNFListFromJsonValue(Source: TJSONValue): TCteSefazInfNFList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfNFList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazInfNFFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfNFListFromJson(Source: string): TCteSefazInfNFList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfNFListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfNFeToJsonValue(Source: TCteSefazInfNFe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.ChaveHasValue then
      Json.ObjAddProp(Result, 'chave', Self.stringToJsonValue(Source.Chave));
    if Source.PINHasValue then
      Json.ObjAddProp(Result, 'PIN', Self.stringToJsonValue(Source.PIN));
    if Source.DPrevHasValue then
      Json.ObjAddProp(Result, 'dPrev', Self.TDateToJsonValue(Source.DPrev));
    if Assigned(Source.InfUnidCarga) then
      Json.ObjAddProp(Result, 'infUnidCarga', Self.TCteSefazUnidCargaListToJsonValue(Source.InfUnidCarga));
    if Assigned(Source.InfUnidTransp) then
      Json.ObjAddProp(Result, 'infUnidTransp', Self.TCteSefazUnidadeTranspListToJsonValue(Source.InfUnidTransp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfNFeToJson(Source: TCteSefazInfNFe): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfNFeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfNFeFromJsonValue(Source: TJSONValue): TCteSefazInfNFe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfNFe.Create;
  try
    if Json.ObjContains(Source, 'chave', JValue) then
      Result.Chave := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PIN', JValue) then
      Result.PIN := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dPrev', JValue) then
      Result.DPrev := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidCarga', JValue) then
      Result.InfUnidCarga := Self.TCteSefazUnidCargaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidTransp', JValue) then
      Result.InfUnidTransp := Self.TCteSefazUnidadeTranspListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfNFeFromJson(Source: string): TCteSefazInfNFe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfNFeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfNFeListToJsonValue(Source: TCteSefazInfNFeList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazInfNFeToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfNFeListToJson(Source: TCteSefazInfNFeList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfNFeListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfNFeListFromJsonValue(Source: TJSONValue): TCteSefazInfNFeList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfNFeList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazInfNFeFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfNFeListFromJson(Source: string): TCteSefazInfNFeList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfNFeListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfOutrosToJsonValue(Source: TCteSefazInfOutros): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpDocHasValue then
      Json.ObjAddProp(Result, 'tpDoc', Self.stringToJsonValue(Source.TpDoc));
    if Source.DescOutrosHasValue then
      Json.ObjAddProp(Result, 'descOutros', Self.stringToJsonValue(Source.DescOutros));
    if Source.NDocHasValue then
      Json.ObjAddProp(Result, 'nDoc', Self.stringToJsonValue(Source.NDoc));
    if Source.DEmiHasValue then
      Json.ObjAddProp(Result, 'dEmi', Self.TDateToJsonValue(Source.DEmi));
    if Source.VDocFiscHasValue then
      Json.ObjAddProp(Result, 'vDocFisc', Self.DoubleToJsonValue(Source.VDocFisc));
    if Source.DPrevHasValue then
      Json.ObjAddProp(Result, 'dPrev', Self.TDateToJsonValue(Source.DPrev));
    if Assigned(Source.InfUnidCarga) then
      Json.ObjAddProp(Result, 'infUnidCarga', Self.TCteSefazUnidCargaListToJsonValue(Source.InfUnidCarga));
    if Assigned(Source.InfUnidTransp) then
      Json.ObjAddProp(Result, 'infUnidTransp', Self.TCteSefazUnidadeTranspListToJsonValue(Source.InfUnidTransp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfOutrosToJson(Source: TCteSefazInfOutros): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfOutrosToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfOutrosFromJsonValue(Source: TJSONValue): TCteSefazInfOutros;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfOutros.Create;
  try
    if Json.ObjContains(Source, 'tpDoc', JValue) then
      Result.TpDoc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descOutros', JValue) then
      Result.DescOutros := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nDoc', JValue) then
      Result.NDoc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dEmi', JValue) then
      Result.DEmi := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDocFisc', JValue) then
      Result.VDocFisc := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dPrev', JValue) then
      Result.DPrev := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidCarga', JValue) then
      Result.InfUnidCarga := Self.TCteSefazUnidCargaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidTransp', JValue) then
      Result.InfUnidTransp := Self.TCteSefazUnidadeTranspListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfOutrosFromJson(Source: string): TCteSefazInfOutros;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfOutrosFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfOutrosListToJsonValue(Source: TCteSefazInfOutrosList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazInfOutrosToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfOutrosListToJson(Source: TCteSefazInfOutrosList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfOutrosListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfOutrosListFromJsonValue(Source: TJSONValue): TCteSefazInfOutrosList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfOutrosList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazInfOutrosFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfOutrosListFromJson(Source: string): TCteSefazInfOutrosList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfOutrosListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfDocToJsonValue(Source: TCteSefazInfDoc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.InfNF) then
      Json.ObjAddProp(Result, 'infNF', Self.TCteSefazInfNFListToJsonValue(Source.InfNF));
    if Assigned(Source.InfNFe) then
      Json.ObjAddProp(Result, 'infNFe', Self.TCteSefazInfNFeListToJsonValue(Source.InfNFe));
    if Assigned(Source.InfOutros) then
      Json.ObjAddProp(Result, 'infOutros', Self.TCteSefazInfOutrosListToJsonValue(Source.InfOutros));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfDocToJson(Source: TCteSefazInfDoc): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfDocToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfDocFromJsonValue(Source: TJSONValue): TCteSefazInfDoc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfDoc.Create;
  try
    if Json.ObjContains(Source, 'infNF', JValue) then
      Result.InfNF := Self.TCteSefazInfNFListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infNFe', JValue) then
      Result.InfNFe := Self.TCteSefazInfNFeListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infOutros', JValue) then
      Result.InfOutros := Self.TCteSefazInfOutrosListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfDocFromJson(Source: string): TCteSefazInfDoc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfDocFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntPapToJsonValue(Source: TCteSefazIdDocAntPap): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpDocHasValue then
      Json.ObjAddProp(Result, 'tpDoc', Self.stringToJsonValue(Source.TpDoc));
    if Source.SerieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.stringToJsonValue(Source.Serie));
    if Source.SubserHasValue then
      Json.ObjAddProp(Result, 'subser', Self.stringToJsonValue(Source.Subser));
    if Source.NDocHasValue then
      Json.ObjAddProp(Result, 'nDoc', Self.stringToJsonValue(Source.NDoc));
    if Source.DEmiHasValue then
      Json.ObjAddProp(Result, 'dEmi', Self.TDateToJsonValue(Source.DEmi));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntPapToJson(Source: TCteSefazIdDocAntPap): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazIdDocAntPapToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntPapFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntPap;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazIdDocAntPap.Create;
  try
    if Json.ObjContains(Source, 'tpDoc', JValue) then
      Result.TpDoc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.Serie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'subser', JValue) then
      Result.Subser := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nDoc', JValue) then
      Result.NDoc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dEmi', JValue) then
      Result.DEmi := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntPapFromJson(Source: string): TCteSefazIdDocAntPap;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazIdDocAntPapFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntPapListToJsonValue(Source: TCteSefazIdDocAntPapList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazIdDocAntPapToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntPapListToJson(Source: TCteSefazIdDocAntPapList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazIdDocAntPapListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntPapListFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntPapList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazIdDocAntPapList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazIdDocAntPapFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntPapListFromJson(Source: string): TCteSefazIdDocAntPapList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazIdDocAntPapListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntEleToJsonValue(Source: TCteSefazIdDocAntEle): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.ChCTeHasValue then
      Json.ObjAddProp(Result, 'chCTe', Self.stringToJsonValue(Source.ChCTe));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntEleToJson(Source: TCteSefazIdDocAntEle): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazIdDocAntEleToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntEleFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntEle;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazIdDocAntEle.Create;
  try
    if Json.ObjContains(Source, 'chCTe', JValue) then
      Result.ChCTe := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntEleFromJson(Source: string): TCteSefazIdDocAntEle;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazIdDocAntEleFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntEleListToJsonValue(Source: TCteSefazIdDocAntEleList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazIdDocAntEleToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntEleListToJson(Source: TCteSefazIdDocAntEleList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazIdDocAntEleListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntEleListFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntEleList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazIdDocAntEleList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazIdDocAntEleFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntEleListFromJson(Source: string): TCteSefazIdDocAntEleList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazIdDocAntEleListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntToJsonValue(Source: TCteSefazIdDocAnt): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.IdDocAntPap) then
      Json.ObjAddProp(Result, 'idDocAntPap', Self.TCteSefazIdDocAntPapListToJsonValue(Source.IdDocAntPap));
    if Assigned(Source.IdDocAntEle) then
      Json.ObjAddProp(Result, 'idDocAntEle', Self.TCteSefazIdDocAntEleListToJsonValue(Source.IdDocAntEle));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntToJson(Source: TCteSefazIdDocAnt): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazIdDocAntToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntFromJsonValue(Source: TJSONValue): TCteSefazIdDocAnt;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazIdDocAnt.Create;
  try
    if Json.ObjContains(Source, 'idDocAntPap', JValue) then
      Result.IdDocAntPap := Self.TCteSefazIdDocAntPapListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idDocAntEle', JValue) then
      Result.IdDocAntEle := Self.TCteSefazIdDocAntEleListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntFromJson(Source: string): TCteSefazIdDocAnt;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazIdDocAntFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntListToJsonValue(Source: TCteSefazIdDocAntList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazIdDocAntToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntListToJson(Source: TCteSefazIdDocAntList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazIdDocAntListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntListFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazIdDocAntList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazIdDocAntFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntListFromJson(Source: string): TCteSefazIdDocAntList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazIdDocAntListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEmiDocAntToJsonValue(Source: TCteSefazEmiDocAnt): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Assigned(Source.IdDocAnt) then
      Json.ObjAddProp(Result, 'idDocAnt', Self.TCteSefazIdDocAntListToJsonValue(Source.IdDocAnt));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEmiDocAntToJson(Source: TCteSefazEmiDocAnt): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazEmiDocAntToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEmiDocAntFromJsonValue(Source: TJSONValue): TCteSefazEmiDocAnt;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazEmiDocAnt.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idDocAnt', JValue) then
      Result.IdDocAnt := Self.TCteSefazIdDocAntListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEmiDocAntFromJson(Source: string): TCteSefazEmiDocAnt;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazEmiDocAntFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEmiDocAntListToJsonValue(Source: TCteSefazEmiDocAntList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazEmiDocAntToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEmiDocAntListToJson(Source: TCteSefazEmiDocAntList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazEmiDocAntListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEmiDocAntListFromJsonValue(Source: TJSONValue): TCteSefazEmiDocAntList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazEmiDocAntList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazEmiDocAntFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEmiDocAntListFromJson(Source: string): TCteSefazEmiDocAntList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazEmiDocAntListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDocAntToJsonValue(Source: TCteSefazDocAnt): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.EmiDocAnt) then
      Json.ObjAddProp(Result, 'emiDocAnt', Self.TCteSefazEmiDocAntListToJsonValue(Source.EmiDocAnt));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDocAntToJson(Source: TCteSefazDocAnt): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDocAntToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDocAntFromJsonValue(Source: TJSONValue): TCteSefazDocAnt;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDocAnt.Create;
  try
    if Json.ObjContains(Source, 'emiDocAnt', JValue) then
      Result.EmiDocAnt := Self.TCteSefazEmiDocAntListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDocAntFromJson(Source: string): TCteSefazDocAnt;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDocAntFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEmiOccToJsonValue(Source: TCteSefazEmiOcc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CIntHasValue then
      Json.ObjAddProp(Result, 'cInt', Self.stringToJsonValue(Source.CInt));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEmiOccToJson(Source: TCteSefazEmiOcc): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazEmiOccToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEmiOccFromJsonValue(Source: TJSONValue): TCteSefazEmiOcc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazEmiOcc.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cInt', JValue) then
      Result.CInt := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEmiOccFromJson(Source: string): TCteSefazEmiOcc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazEmiOccFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazOccToJsonValue(Source: TCteSefazOcc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.SerieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.stringToJsonValue(Source.Serie));
    if Source.NOccHasValue then
      Json.ObjAddProp(Result, 'nOcc', Self.IntegerToJsonValue(Source.NOcc));
    if Source.DEmiHasValue then
      Json.ObjAddProp(Result, 'dEmi', Self.TDateToJsonValue(Source.DEmi));
    if Assigned(Source.EmiOcc) then
      Json.ObjAddProp(Result, 'emiOcc', Self.TCteSefazEmiOccToJsonValue(Source.EmiOcc));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazOccToJson(Source: TCteSefazOcc): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazOccToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazOccFromJsonValue(Source: TJSONValue): TCteSefazOcc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazOcc.Create;
  try
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.Serie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nOcc', JValue) then
      Result.NOcc := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dEmi', JValue) then
      Result.DEmi := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'emiOcc', JValue) then
      Result.EmiOcc := Self.TCteSefazEmiOccFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazOccFromJson(Source: string): TCteSefazOcc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazOccFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazOccListToJsonValue(Source: TCteSefazOccList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazOccToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazOccListToJson(Source: TCteSefazOccList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazOccListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazOccListFromJsonValue(Source: TJSONValue): TCteSefazOccList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazOccList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazOccFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazOccListFromJson(Source: string): TCteSefazOccList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazOccListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRodoToJsonValue(Source: TCteSefazRodo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.RNTRCHasValue then
      Json.ObjAddProp(Result, 'RNTRC', Self.stringToJsonValue(Source.RNTRC));
    if Assigned(Source.Occ) then
      Json.ObjAddProp(Result, 'occ', Self.TCteSefazOccListToJsonValue(Source.Occ));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRodoToJson(Source: TCteSefazRodo): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazRodoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRodoFromJsonValue(Source: TJSONValue): TCteSefazRodo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazRodo.Create;
  try
    if Json.ObjContains(Source, 'RNTRC', JValue) then
      Result.RNTRC := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'occ', JValue) then
      Result.Occ := Self.TCteSefazOccListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRodoFromJson(Source: string): TCteSefazRodo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazRodoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.stringListToJsonValue(Source: stringList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.stringToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.stringListToJson(Source: stringList): string;
var
  JValue: TJSONValue;
begin
  JValue := stringListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.stringListFromJsonValue(Source: TJSONValue): stringList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := stringList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.stringFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.stringListFromJson(Source: string): stringList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := stringListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazNatCargaToJsonValue(Source: TCteSefazNatCarga): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XDimeHasValue then
      Json.ObjAddProp(Result, 'xDime', Self.stringToJsonValue(Source.XDime));
    if Assigned(Source.CInfManu) then
      Json.ObjAddProp(Result, 'cInfManu', Self.stringListToJsonValue(Source.CInfManu));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazNatCargaToJson(Source: TCteSefazNatCarga): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazNatCargaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazNatCargaFromJsonValue(Source: TJSONValue): TCteSefazNatCarga;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazNatCarga.Create;
  try
    if Json.ObjContains(Source, 'xDime', JValue) then
      Result.XDime := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cInfManu', JValue) then
      Result.CInfManu := Self.stringListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazNatCargaFromJson(Source: string): TCteSefazNatCarga;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazNatCargaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazTarifaToJsonValue(Source: TCteSefazTarifa): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CLHasValue then
      Json.ObjAddProp(Result, 'CL', Self.stringToJsonValue(Source.CL));
    if Source.CTarHasValue then
      Json.ObjAddProp(Result, 'cTar', Self.stringToJsonValue(Source.CTar));
    if Source.VTarHasValue then
      Json.ObjAddProp(Result, 'vTar', Self.DoubleToJsonValue(Source.VTar));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazTarifaToJson(Source: TCteSefazTarifa): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazTarifaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazTarifaFromJsonValue(Source: TJSONValue): TCteSefazTarifa;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazTarifa.Create;
  try
    if Json.ObjContains(Source, 'CL', JValue) then
      Result.CL := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cTar', JValue) then
      Result.CTar := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vTar', JValue) then
      Result.VTar := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazTarifaFromJson(Source: string): TCteSefazTarifa;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazTarifaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfTotAPToJsonValue(Source: TCteSefazInfTotAP): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.QTotProdHasValue then
      Json.ObjAddProp(Result, 'qTotProd', Self.DoubleToJsonValue(Source.QTotProd));
    if Source.UniAPHasValue then
      Json.ObjAddProp(Result, 'uniAP', Self.IntegerToJsonValue(Source.UniAP));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfTotAPToJson(Source: TCteSefazInfTotAP): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfTotAPToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfTotAPFromJsonValue(Source: TJSONValue): TCteSefazInfTotAP;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfTotAP.Create;
  try
    if Json.ObjContains(Source, 'qTotProd', JValue) then
      Result.QTotProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uniAP', JValue) then
      Result.UniAP := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfTotAPFromJson(Source: string): TCteSefazInfTotAP;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfTotAPFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazPeriToJsonValue(Source: TCteSefazPeri): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NONUHasValue then
      Json.ObjAddProp(Result, 'nONU', Self.stringToJsonValue(Source.NONU));
    if Source.QTotEmbHasValue then
      Json.ObjAddProp(Result, 'qTotEmb', Self.stringToJsonValue(Source.QTotEmb));
    if Assigned(Source.InfTotAP) then
      Json.ObjAddProp(Result, 'infTotAP', Self.TCteSefazInfTotAPToJsonValue(Source.InfTotAP));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazPeriToJson(Source: TCteSefazPeri): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazPeriToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazPeriFromJsonValue(Source: TJSONValue): TCteSefazPeri;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazPeri.Create;
  try
    if Json.ObjContains(Source, 'nONU', JValue) then
      Result.NONU := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTotEmb', JValue) then
      Result.QTotEmb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infTotAP', JValue) then
      Result.InfTotAP := Self.TCteSefazInfTotAPFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazPeriFromJson(Source: string): TCteSefazPeri;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazPeriFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazPeriListToJsonValue(Source: TCteSefazPeriList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazPeriToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazPeriListToJson(Source: TCteSefazPeriList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazPeriListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazPeriListFromJsonValue(Source: TJSONValue): TCteSefazPeriList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazPeriList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazPeriFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazPeriListFromJson(Source: string): TCteSefazPeriList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazPeriListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazAereoToJsonValue(Source: TCteSefazAereo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NMinuHasValue then
      Json.ObjAddProp(Result, 'nMinu', Self.IntegerToJsonValue(Source.NMinu));
    if Source.NOCAHasValue then
      Json.ObjAddProp(Result, 'nOCA', Self.stringToJsonValue(Source.NOCA));
    if Source.DPrevAereoHasValue then
      Json.ObjAddProp(Result, 'dPrevAereo', Self.TDateToJsonValue(Source.DPrevAereo));
    if Assigned(Source.NatCarga) then
      Json.ObjAddProp(Result, 'natCarga', Self.TCteSefazNatCargaToJsonValue(Source.NatCarga));
    if Assigned(Source.Tarifa) then
      Json.ObjAddProp(Result, 'tarifa', Self.TCteSefazTarifaToJsonValue(Source.Tarifa));
    if Assigned(Source.Peri) then
      Json.ObjAddProp(Result, 'peri', Self.TCteSefazPeriListToJsonValue(Source.Peri));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazAereoToJson(Source: TCteSefazAereo): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazAereoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazAereoFromJsonValue(Source: TJSONValue): TCteSefazAereo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazAereo.Create;
  try
    if Json.ObjContains(Source, 'nMinu', JValue) then
      Result.NMinu := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nOCA', JValue) then
      Result.NOCA := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dPrevAereo', JValue) then
      Result.DPrevAereo := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'natCarga', JValue) then
      Result.NatCarga := Self.TCteSefazNatCargaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tarifa', JValue) then
      Result.Tarifa := Self.TCteSefazTarifaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'peri', JValue) then
      Result.Peri := Self.TCteSefazPeriListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazAereoFromJson(Source: string): TCteSefazAereo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazAereoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEnderFerToJsonValue(Source: TCteSefazEnderFer): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XLgrHasValue then
      Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.XLgr));
    if Source.NroHasValue then
      Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.Nro));
    if Source.XCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.XCpl));
    if Source.XBairroHasValue then
      Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.XBairro));
    if Source.CMunHasValue then
      Json.ObjAddProp(Result, 'cMun', Self.IntegerToJsonValue(Source.CMun));
    if Source.XMunHasValue then
      Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.XMun));
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.IntegerToJsonValue(Source.CEP));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEnderFerToJson(Source: TCteSefazEnderFer): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazEnderFerToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEnderFerFromJsonValue(Source: TJSONValue): TCteSefazEnderFer;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazEnderFer.Create;
  try
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.XLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.Nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.XCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.XBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.CMun := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.XMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEnderFerFromJson(Source: string): TCteSefazEnderFer;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazEnderFerFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFerroEnvToJsonValue(Source: TCteSefazFerroEnv): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CIntHasValue then
      Json.ObjAddProp(Result, 'cInt', Self.stringToJsonValue(Source.CInt));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Assigned(Source.EnderFerro) then
      Json.ObjAddProp(Result, 'enderFerro', Self.TCteSefazEnderFerToJsonValue(Source.EnderFerro));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFerroEnvToJson(Source: TCteSefazFerroEnv): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazFerroEnvToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFerroEnvFromJsonValue(Source: TJSONValue): TCteSefazFerroEnv;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazFerroEnv.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cInt', JValue) then
      Result.CInt := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderFerro', JValue) then
      Result.EnderFerro := Self.TCteSefazEnderFerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFerroEnvFromJson(Source: string): TCteSefazFerroEnv;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazFerroEnvFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFerroEnvListToJsonValue(Source: TCteSefazFerroEnvList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazFerroEnvToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFerroEnvListToJson(Source: TCteSefazFerroEnvList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazFerroEnvListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFerroEnvListFromJsonValue(Source: TJSONValue): TCteSefazFerroEnvList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazFerroEnvList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazFerroEnvFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFerroEnvListFromJson(Source: string): TCteSefazFerroEnvList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazFerroEnvListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazTrafMutToJsonValue(Source: TCteSefazTrafMut): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.RespFatHasValue then
      Json.ObjAddProp(Result, 'respFat', Self.IntegerToJsonValue(Source.RespFat));
    if Source.FerrEmiHasValue then
      Json.ObjAddProp(Result, 'ferrEmi', Self.IntegerToJsonValue(Source.FerrEmi));
    if Source.VFreteHasValue then
      Json.ObjAddProp(Result, 'vFrete', Self.DoubleToJsonValue(Source.VFrete));
    if Source.ChCTeFerroOrigemHasValue then
      Json.ObjAddProp(Result, 'chCTeFerroOrigem', Self.stringToJsonValue(Source.ChCTeFerroOrigem));
    if Assigned(Source.FerroEnv) then
      Json.ObjAddProp(Result, 'ferroEnv', Self.TCteSefazFerroEnvListToJsonValue(Source.FerroEnv));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazTrafMutToJson(Source: TCteSefazTrafMut): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazTrafMutToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazTrafMutFromJsonValue(Source: TJSONValue): TCteSefazTrafMut;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazTrafMut.Create;
  try
    if Json.ObjContains(Source, 'respFat', JValue) then
      Result.RespFat := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ferrEmi', JValue) then
      Result.FerrEmi := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFrete', JValue) then
      Result.VFrete := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chCTeFerroOrigem', JValue) then
      Result.ChCTeFerroOrigem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ferroEnv', JValue) then
      Result.FerroEnv := Self.TCteSefazFerroEnvListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazTrafMutFromJson(Source: string): TCteSefazTrafMut;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazTrafMutFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFerrovToJsonValue(Source: TCteSefazFerrov): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpTrafHasValue then
      Json.ObjAddProp(Result, 'tpTraf', Self.IntegerToJsonValue(Source.TpTraf));
    if Assigned(Source.TrafMut) then
      Json.ObjAddProp(Result, 'trafMut', Self.TCteSefazTrafMutToJsonValue(Source.TrafMut));
    if Source.FluxoHasValue then
      Json.ObjAddProp(Result, 'fluxo', Self.stringToJsonValue(Source.Fluxo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFerrovToJson(Source: TCteSefazFerrov): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazFerrovToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFerrovFromJsonValue(Source: TJSONValue): TCteSefazFerrov;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazFerrov.Create;
  try
    if Json.ObjContains(Source, 'tpTraf', JValue) then
      Result.TpTraf := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'trafMut', JValue) then
      Result.TrafMut := Self.TCteSefazTrafMutFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fluxo', JValue) then
      Result.Fluxo := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFerrovFromJson(Source: string): TCteSefazFerrov;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazFerrovFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazBalsaToJsonValue(Source: TCteSefazBalsa): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XBalsaHasValue then
      Json.ObjAddProp(Result, 'xBalsa', Self.stringToJsonValue(Source.XBalsa));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazBalsaToJson(Source: TCteSefazBalsa): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazBalsaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazBalsaFromJsonValue(Source: TJSONValue): TCteSefazBalsa;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazBalsa.Create;
  try
    if Json.ObjContains(Source, 'xBalsa', JValue) then
      Result.XBalsa := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazBalsaFromJson(Source: string): TCteSefazBalsa;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazBalsaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazBalsaListToJsonValue(Source: TCteSefazBalsaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazBalsaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazBalsaListToJson(Source: TCteSefazBalsaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazBalsaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazBalsaListFromJsonValue(Source: TJSONValue): TCteSefazBalsaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazBalsaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazBalsaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazBalsaListFromJson(Source: string): TCteSefazBalsaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazBalsaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacreToJsonValue(Source: TCteSefazLacre): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NLacreHasValue then
      Json.ObjAddProp(Result, 'nLacre', Self.stringToJsonValue(Source.NLacre));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacreToJson(Source: TCteSefazLacre): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazLacreToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacreFromJsonValue(Source: TJSONValue): TCteSefazLacre;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazLacre.Create;
  try
    if Json.ObjContains(Source, 'nLacre', JValue) then
      Result.NLacre := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacreFromJson(Source: string): TCteSefazLacre;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazLacreFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacreListToJsonValue(Source: TCteSefazLacreList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazLacreToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacreListToJson(Source: TCteSefazLacreList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazLacreListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacreListFromJsonValue(Source: TJSONValue): TCteSefazLacreList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazLacreList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazLacreFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacreListFromJson(Source: string): TCteSefazLacreList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazLacreListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFToJsonValue(Source: TCteSefazDetContInfDocInfNF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.SerieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.stringToJsonValue(Source.Serie));
    if Source.NDocHasValue then
      Json.ObjAddProp(Result, 'nDoc', Self.stringToJsonValue(Source.NDoc));
    if Source.UnidRatHasValue then
      Json.ObjAddProp(Result, 'unidRat', Self.DoubleToJsonValue(Source.UnidRat));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFToJson(Source: TCteSefazDetContInfDocInfNF): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDetContInfDocInfNFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDocInfNF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDetContInfDocInfNF.Create;
  try
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.Serie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nDoc', JValue) then
      Result.NDoc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'unidRat', JValue) then
      Result.UnidRat := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFFromJson(Source: string): TCteSefazDetContInfDocInfNF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDetContInfDocInfNFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFListToJsonValue(Source: TCteSefazDetContInfDocInfNFList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazDetContInfDocInfNFToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFListToJson(Source: TCteSefazDetContInfDocInfNFList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDetContInfDocInfNFListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFListFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDocInfNFList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDetContInfDocInfNFList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazDetContInfDocInfNFFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFListFromJson(Source: string): TCteSefazDetContInfDocInfNFList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDetContInfDocInfNFListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFeToJsonValue(Source: TCteSefazDetContInfDocInfNFe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.ChaveHasValue then
      Json.ObjAddProp(Result, 'chave', Self.stringToJsonValue(Source.Chave));
    if Source.UnidRatHasValue then
      Json.ObjAddProp(Result, 'unidRat', Self.DoubleToJsonValue(Source.UnidRat));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFeToJson(Source: TCteSefazDetContInfDocInfNFe): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDetContInfDocInfNFeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFeFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDocInfNFe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDetContInfDocInfNFe.Create;
  try
    if Json.ObjContains(Source, 'chave', JValue) then
      Result.Chave := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'unidRat', JValue) then
      Result.UnidRat := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFeFromJson(Source: string): TCteSefazDetContInfDocInfNFe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDetContInfDocInfNFeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFeListToJsonValue(Source: TCteSefazDetContInfDocInfNFeList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazDetContInfDocInfNFeToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFeListToJson(Source: TCteSefazDetContInfDocInfNFeList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDetContInfDocInfNFeListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFeListFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDocInfNFeList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDetContInfDocInfNFeList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazDetContInfDocInfNFeFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFeListFromJson(Source: string): TCteSefazDetContInfDocInfNFeList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDetContInfDocInfNFeListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocToJsonValue(Source: TCteSefazDetContInfDoc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.InfNF) then
      Json.ObjAddProp(Result, 'infNF', Self.TCteSefazDetContInfDocInfNFListToJsonValue(Source.InfNF));
    if Assigned(Source.InfNFe) then
      Json.ObjAddProp(Result, 'infNFe', Self.TCteSefazDetContInfDocInfNFeListToJsonValue(Source.InfNFe));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocToJson(Source: TCteSefazDetContInfDoc): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDetContInfDocToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDoc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDetContInfDoc.Create;
  try
    if Json.ObjContains(Source, 'infNF', JValue) then
      Result.InfNF := Self.TCteSefazDetContInfDocInfNFListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infNFe', JValue) then
      Result.InfNFe := Self.TCteSefazDetContInfDocInfNFeListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocFromJson(Source: string): TCteSefazDetContInfDoc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDetContInfDocFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContToJsonValue(Source: TCteSefazDetCont): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NContHasValue then
      Json.ObjAddProp(Result, 'nCont', Self.stringToJsonValue(Source.NCont));
    if Assigned(Source.Lacre) then
      Json.ObjAddProp(Result, 'lacre', Self.TCteSefazLacreListToJsonValue(Source.Lacre));
    if Assigned(Source.InfDoc) then
      Json.ObjAddProp(Result, 'infDoc', Self.TCteSefazDetContInfDocToJsonValue(Source.InfDoc));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContToJson(Source: TCteSefazDetCont): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDetContToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContFromJsonValue(Source: TJSONValue): TCteSefazDetCont;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDetCont.Create;
  try
    if Json.ObjContains(Source, 'nCont', JValue) then
      Result.NCont := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lacre', JValue) then
      Result.Lacre := Self.TCteSefazLacreListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infDoc', JValue) then
      Result.InfDoc := Self.TCteSefazDetContInfDocFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContFromJson(Source: string): TCteSefazDetCont;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDetContFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContListToJsonValue(Source: TCteSefazDetContList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazDetContToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContListToJson(Source: TCteSefazDetContList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDetContListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContListFromJsonValue(Source: TJSONValue): TCteSefazDetContList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDetContList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazDetContFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContListFromJson(Source: string): TCteSefazDetContList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDetContListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazAquavToJsonValue(Source: TCteSefazAquav): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VPrestHasValue then
      Json.ObjAddProp(Result, 'vPrest', Self.DoubleToJsonValue(Source.VPrest));
    if Source.VAFRMMHasValue then
      Json.ObjAddProp(Result, 'vAFRMM', Self.DoubleToJsonValue(Source.VAFRMM));
    if Source.XNavioHasValue then
      Json.ObjAddProp(Result, 'xNavio', Self.stringToJsonValue(Source.XNavio));
    if Assigned(Source.Balsa) then
      Json.ObjAddProp(Result, 'balsa', Self.TCteSefazBalsaListToJsonValue(Source.Balsa));
    if Source.NViagHasValue then
      Json.ObjAddProp(Result, 'nViag', Self.stringToJsonValue(Source.NViag));
    if Source.DirecHasValue then
      Json.ObjAddProp(Result, 'direc', Self.stringToJsonValue(Source.Direc));
    if Source.IrinHasValue then
      Json.ObjAddProp(Result, 'irin', Self.stringToJsonValue(Source.Irin));
    if Assigned(Source.DetCont) then
      Json.ObjAddProp(Result, 'detCont', Self.TCteSefazDetContListToJsonValue(Source.DetCont));
    if Source.TpNavHasValue then
      Json.ObjAddProp(Result, 'tpNav', Self.IntegerToJsonValue(Source.TpNav));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazAquavToJson(Source: TCteSefazAquav): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazAquavToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazAquavFromJsonValue(Source: TJSONValue): TCteSefazAquav;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazAquav.Create;
  try
    if Json.ObjContains(Source, 'vPrest', JValue) then
      Result.VPrest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAFRMM', JValue) then
      Result.VAFRMM := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNavio', JValue) then
      Result.XNavio := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'balsa', JValue) then
      Result.Balsa := Self.TCteSefazBalsaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nViag', JValue) then
      Result.NViag := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'direc', JValue) then
      Result.Direc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'irin', JValue) then
      Result.Irin := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'detCont', JValue) then
      Result.DetCont := Self.TCteSefazDetContListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpNav', JValue) then
      Result.TpNav := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazAquavFromJson(Source: string): TCteSefazAquav;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazAquavFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDutoToJsonValue(Source: TCteSefazDuto): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VTarHasValue then
      Json.ObjAddProp(Result, 'vTar', Self.DoubleToJsonValue(Source.VTar));
    if Source.DIniHasValue then
      Json.ObjAddProp(Result, 'dIni', Self.TDateToJsonValue(Source.DIni));
    if Source.DFimHasValue then
      Json.ObjAddProp(Result, 'dFim', Self.TDateToJsonValue(Source.DFim));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDutoToJson(Source: TCteSefazDuto): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDutoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDutoFromJsonValue(Source: TJSONValue): TCteSefazDuto;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDuto.Create;
  try
    if Json.ObjContains(Source, 'vTar', JValue) then
      Result.VTar := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dIni', JValue) then
      Result.DIni := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dFim', JValue) then
      Result.DFim := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDutoFromJson(Source: string): TCteSefazDuto;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDutoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfSegToJsonValue(Source: TCteSefazInfSeg): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XSegHasValue then
      Json.ObjAddProp(Result, 'xSeg', Self.stringToJsonValue(Source.XSeg));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfSegToJson(Source: TCteSefazInfSeg): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfSegToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfSegFromJsonValue(Source: TJSONValue): TCteSefazInfSeg;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfSeg.Create;
  try
    if Json.ObjContains(Source, 'xSeg', JValue) then
      Result.XSeg := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfSegFromJson(Source: string): TCteSefazInfSeg;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfSegFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazSegToJsonValue(Source: TCteSefazSeg): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.InfSeg) then
      Json.ObjAddProp(Result, 'infSeg', Self.TCteSefazInfSegToJsonValue(Source.InfSeg));
    if Source.NApolHasValue then
      Json.ObjAddProp(Result, 'nApol', Self.stringToJsonValue(Source.NApol));
    if Source.NAverHasValue then
      Json.ObjAddProp(Result, 'nAver', Self.stringToJsonValue(Source.NAver));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazSegToJson(Source: TCteSefazSeg): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazSegToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazSegFromJsonValue(Source: TJSONValue): TCteSefazSeg;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazSeg.Create;
  try
    if Json.ObjContains(Source, 'infSeg', JValue) then
      Result.InfSeg := Self.TCteSefazInfSegFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nApol', JValue) then
      Result.NApol := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nAver', JValue) then
      Result.NAver := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazSegFromJson(Source: string): TCteSefazSeg;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazSegFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazMultimodalToJsonValue(Source: TCteSefazMultimodal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.COTMHasValue then
      Json.ObjAddProp(Result, 'COTM', Self.stringToJsonValue(Source.COTM));
    if Source.IndNegociavelHasValue then
      Json.ObjAddProp(Result, 'indNegociavel', Self.IntegerToJsonValue(Source.IndNegociavel));
    if Assigned(Source.Seg) then
      Json.ObjAddProp(Result, 'seg', Self.TCteSefazSegToJsonValue(Source.Seg));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazMultimodalToJson(Source: TCteSefazMultimodal): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazMultimodalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazMultimodalFromJsonValue(Source: TJSONValue): TCteSefazMultimodal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazMultimodal.Create;
  try
    if Json.ObjContains(Source, 'COTM', JValue) then
      Result.COTM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indNegociavel', JValue) then
      Result.IndNegociavel := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'seg', JValue) then
      Result.Seg := Self.TCteSefazSegFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazMultimodalFromJson(Source: string): TCteSefazMultimodal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazMultimodalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfModalToJsonValue(Source: TCteSefazInfModal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VersaoModalHasValue then
      Json.ObjAddProp(Result, 'versaoModal', Self.stringToJsonValue(Source.VersaoModal));
    if Assigned(Source.Rodo) then
      Json.ObjAddProp(Result, 'rodo', Self.TCteSefazRodoToJsonValue(Source.Rodo));
    if Assigned(Source.Aereo) then
      Json.ObjAddProp(Result, 'aereo', Self.TCteSefazAereoToJsonValue(Source.Aereo));
    if Assigned(Source.Ferrov) then
      Json.ObjAddProp(Result, 'ferrov', Self.TCteSefazFerrovToJsonValue(Source.Ferrov));
    if Assigned(Source.Aquav) then
      Json.ObjAddProp(Result, 'aquav', Self.TCteSefazAquavToJsonValue(Source.Aquav));
    if Assigned(Source.Duto) then
      Json.ObjAddProp(Result, 'duto', Self.TCteSefazDutoToJsonValue(Source.Duto));
    if Assigned(Source.Multimodal) then
      Json.ObjAddProp(Result, 'multimodal', Self.TCteSefazMultimodalToJsonValue(Source.Multimodal));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfModalToJson(Source: TCteSefazInfModal): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfModalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfModalFromJsonValue(Source: TJSONValue): TCteSefazInfModal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfModal.Create;
  try
    if Json.ObjContains(Source, 'versaoModal', JValue) then
      Result.VersaoModal := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'rodo', JValue) then
      Result.Rodo := Self.TCteSefazRodoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aereo', JValue) then
      Result.Aereo := Self.TCteSefazAereoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ferrov', JValue) then
      Result.Ferrov := Self.TCteSefazFerrovFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aquav', JValue) then
      Result.Aquav := Self.TCteSefazAquavFromJsonValue(JValue);
    if Json.ObjContains(Source, 'duto', JValue) then
      Result.Duto := Self.TCteSefazDutoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'multimodal', JValue) then
      Result.Multimodal := Self.TCteSefazMultimodalFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfModalFromJson(Source: string): TCteSefazInfModal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfModalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazVeicNovosToJsonValue(Source: TCteSefazVeicNovos): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.ChassiHasValue then
      Json.ObjAddProp(Result, 'chassi', Self.stringToJsonValue(Source.Chassi));
    if Source.CCorHasValue then
      Json.ObjAddProp(Result, 'cCor', Self.stringToJsonValue(Source.CCor));
    if Source.XCorHasValue then
      Json.ObjAddProp(Result, 'xCor', Self.stringToJsonValue(Source.XCor));
    if Source.CModHasValue then
      Json.ObjAddProp(Result, 'cMod', Self.stringToJsonValue(Source.CMod));
    if Source.VUnitHasValue then
      Json.ObjAddProp(Result, 'vUnit', Self.DoubleToJsonValue(Source.VUnit));
    if Source.VFreteHasValue then
      Json.ObjAddProp(Result, 'vFrete', Self.DoubleToJsonValue(Source.VFrete));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazVeicNovosToJson(Source: TCteSefazVeicNovos): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazVeicNovosToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazVeicNovosFromJsonValue(Source: TJSONValue): TCteSefazVeicNovos;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazVeicNovos.Create;
  try
    if Json.ObjContains(Source, 'chassi', JValue) then
      Result.Chassi := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cCor', JValue) then
      Result.CCor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCor', JValue) then
      Result.XCor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMod', JValue) then
      Result.CMod := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vUnit', JValue) then
      Result.VUnit := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFrete', JValue) then
      Result.VFrete := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazVeicNovosFromJson(Source: string): TCteSefazVeicNovos;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazVeicNovosFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazVeicNovosListToJsonValue(Source: TCteSefazVeicNovosList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazVeicNovosToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazVeicNovosListToJson(Source: TCteSefazVeicNovosList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazVeicNovosListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazVeicNovosListFromJsonValue(Source: TJSONValue): TCteSefazVeicNovosList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazVeicNovosList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazVeicNovosFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazVeicNovosListFromJson(Source: string): TCteSefazVeicNovosList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazVeicNovosListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFatToJsonValue(Source: TCteSefazFat): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NFatHasValue then
      Json.ObjAddProp(Result, 'nFat', Self.stringToJsonValue(Source.NFat));
    if Source.VOrigHasValue then
      Json.ObjAddProp(Result, 'vOrig', Self.DoubleToJsonValue(Source.VOrig));
    if Source.VDescHasValue then
      Json.ObjAddProp(Result, 'vDesc', Self.DoubleToJsonValue(Source.VDesc));
    if Source.VLiqHasValue then
      Json.ObjAddProp(Result, 'vLiq', Self.DoubleToJsonValue(Source.VLiq));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFatToJson(Source: TCteSefazFat): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazFatToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFatFromJsonValue(Source: TJSONValue): TCteSefazFat;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazFat.Create;
  try
    if Json.ObjContains(Source, 'nFat', JValue) then
      Result.NFat := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vOrig', JValue) then
      Result.VOrig := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDesc', JValue) then
      Result.VDesc := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vLiq', JValue) then
      Result.VLiq := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFatFromJson(Source: string): TCteSefazFat;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazFatFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDupToJsonValue(Source: TCteSefazDup): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NDupHasValue then
      Json.ObjAddProp(Result, 'nDup', Self.stringToJsonValue(Source.NDup));
    if Source.DVencHasValue then
      Json.ObjAddProp(Result, 'dVenc', Self.TDateToJsonValue(Source.DVenc));
    if Source.VDupHasValue then
      Json.ObjAddProp(Result, 'vDup', Self.DoubleToJsonValue(Source.VDup));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDupToJson(Source: TCteSefazDup): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDupToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDupFromJsonValue(Source: TJSONValue): TCteSefazDup;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDup.Create;
  try
    if Json.ObjContains(Source, 'nDup', JValue) then
      Result.NDup := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dVenc', JValue) then
      Result.DVenc := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDup', JValue) then
      Result.VDup := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDupFromJson(Source: string): TCteSefazDup;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDupFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDupListToJsonValue(Source: TCteSefazDupList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazDupToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDupListToJson(Source: TCteSefazDupList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDupListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDupListFromJsonValue(Source: TJSONValue): TCteSefazDupList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDupList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazDupFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDupListFromJson(Source: string): TCteSefazDupList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDupListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazCobrToJsonValue(Source: TCteSefazCobr): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.Fat) then
      Json.ObjAddProp(Result, 'fat', Self.TCteSefazFatToJsonValue(Source.Fat));
    if Assigned(Source.Dup) then
      Json.ObjAddProp(Result, 'dup', Self.TCteSefazDupListToJsonValue(Source.Dup));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazCobrToJson(Source: TCteSefazCobr): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazCobrToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazCobrFromJsonValue(Source: TJSONValue): TCteSefazCobr;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazCobr.Create;
  try
    if Json.ObjContains(Source, 'fat', JValue) then
      Result.Fat := Self.TCteSefazFatFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dup', JValue) then
      Result.Dup := Self.TCteSefazDupListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazCobrFromJson(Source: string): TCteSefazCobr;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazCobrFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRefNFToJsonValue(Source: TCteSefazRefNF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.&ModHasValue then
      Json.ObjAddProp(Result, 'mod', Self.stringToJsonValue(Source.&Mod));
    if Source.SerieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.Serie));
    if Source.SubserieHasValue then
      Json.ObjAddProp(Result, 'subserie', Self.IntegerToJsonValue(Source.Subserie));
    if Source.NroHasValue then
      Json.ObjAddProp(Result, 'nro', Self.IntegerToJsonValue(Source.Nro));
    if Source.ValorHasValue then
      Json.ObjAddProp(Result, 'valor', Self.DoubleToJsonValue(Source.Valor));
    if Source.DEmiHasValue then
      Json.ObjAddProp(Result, 'dEmi', Self.TDateToJsonValue(Source.DEmi));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRefNFToJson(Source: TCteSefazRefNF): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazRefNFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRefNFFromJsonValue(Source: TJSONValue): TCteSefazRefNF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazRefNF.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&Mod := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.Serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'subserie', JValue) then
      Result.Subserie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.Nro := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor', JValue) then
      Result.Valor := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dEmi', JValue) then
      Result.DEmi := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRefNFFromJson(Source: string): TCteSefazRefNF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazRefNFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazTomaICMSToJsonValue(Source: TCteSefazTomaICMS): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.RefNFeHasValue then
      Json.ObjAddProp(Result, 'refNFe', Self.stringToJsonValue(Source.RefNFe));
    if Assigned(Source.RefNF) then
      Json.ObjAddProp(Result, 'refNF', Self.TCteSefazRefNFToJsonValue(Source.RefNF));
    if Source.RefCteHasValue then
      Json.ObjAddProp(Result, 'refCte', Self.stringToJsonValue(Source.RefCte));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazTomaICMSToJson(Source: TCteSefazTomaICMS): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazTomaICMSToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazTomaICMSFromJsonValue(Source: TJSONValue): TCteSefazTomaICMS;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazTomaICMS.Create;
  try
    if Json.ObjContains(Source, 'refNFe', JValue) then
      Result.RefNFe := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'refNF', JValue) then
      Result.RefNF := Self.TCteSefazRefNFFromJsonValue(JValue);
    if Json.ObjContains(Source, 'refCte', JValue) then
      Result.RefCte := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazTomaICMSFromJson(Source: string): TCteSefazTomaICMS;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazTomaICMSFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteSubToJsonValue(Source: TCteSefazInfCteSub): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.ChCteHasValue then
      Json.ObjAddProp(Result, 'chCte', Self.stringToJsonValue(Source.ChCte));
    if Source.RefCteAnuHasValue then
      Json.ObjAddProp(Result, 'refCteAnu', Self.stringToJsonValue(Source.RefCteAnu));
    if Assigned(Source.TomaICMS) then
      Json.ObjAddProp(Result, 'tomaICMS', Self.TCteSefazTomaICMSToJsonValue(Source.TomaICMS));
    if Source.IndAlteraTomaHasValue then
      Json.ObjAddProp(Result, 'indAlteraToma', Self.IntegerToJsonValue(Source.IndAlteraToma));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteSubToJson(Source: TCteSefazInfCteSub): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCteSubToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteSubFromJsonValue(Source: TJSONValue): TCteSefazInfCteSub;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCteSub.Create;
  try
    if Json.ObjContains(Source, 'chCte', JValue) then
      Result.ChCte := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'refCteAnu', JValue) then
      Result.RefCteAnu := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tomaICMS', JValue) then
      Result.TomaICMS := Self.TCteSefazTomaICMSFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indAlteraToma', JValue) then
      Result.IndAlteraToma := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteSubFromJson(Source: string): TCteSefazInfCteSub;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCteSubFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfGlobalizadoToJsonValue(Source: TCteSefazInfGlobalizado): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XObsHasValue then
      Json.ObjAddProp(Result, 'xObs', Self.stringToJsonValue(Source.XObs));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfGlobalizadoToJson(Source: TCteSefazInfGlobalizado): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfGlobalizadoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfGlobalizadoFromJsonValue(Source: TJSONValue): TCteSefazInfGlobalizado;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfGlobalizado.Create;
  try
    if Json.ObjContains(Source, 'xObs', JValue) then
      Result.XObs := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfGlobalizadoFromJson(Source: string): TCteSefazInfGlobalizado;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfGlobalizadoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCTeMultimodalToJsonValue(Source: TCteSefazInfCTeMultimodal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.ChCTeMultimodalHasValue then
      Json.ObjAddProp(Result, 'chCTeMultimodal', Self.stringToJsonValue(Source.ChCTeMultimodal));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCTeMultimodalToJson(Source: TCteSefazInfCTeMultimodal): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCTeMultimodalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCTeMultimodalFromJsonValue(Source: TJSONValue): TCteSefazInfCTeMultimodal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCTeMultimodal.Create;
  try
    if Json.ObjContains(Source, 'chCTeMultimodal', JValue) then
      Result.ChCTeMultimodal := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCTeMultimodalFromJson(Source: string): TCteSefazInfCTeMultimodal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCTeMultimodalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCTeMultimodalListToJsonValue(Source: TCteSefazInfCTeMultimodalList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazInfCTeMultimodalToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCTeMultimodalListToJson(Source: TCteSefazInfCTeMultimodalList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCTeMultimodalListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCTeMultimodalListFromJsonValue(Source: TJSONValue): TCteSefazInfCTeMultimodalList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCTeMultimodalList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazInfCTeMultimodalFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCTeMultimodalListFromJson(Source: string): TCteSefazInfCTeMultimodalList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCTeMultimodalListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfServVincToJsonValue(Source: TCteSefazInfServVinc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.InfCTeMultimodal) then
      Json.ObjAddProp(Result, 'infCTeMultimodal', Self.TCteSefazInfCTeMultimodalListToJsonValue(Source.InfCTeMultimodal));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfServVincToJson(Source: TCteSefazInfServVinc): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfServVincToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfServVincFromJsonValue(Source: TJSONValue): TCteSefazInfServVinc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfServVinc.Create;
  try
    if Json.ObjContains(Source, 'infCTeMultimodal', JValue) then
      Result.InfCTeMultimodal := Self.TCteSefazInfCTeMultimodalListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfServVincFromJson(Source: string): TCteSefazInfServVinc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfServVincFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCTeNormToJsonValue(Source: TCteSefazInfCTeNorm): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.InfCarga) then
      Json.ObjAddProp(Result, 'infCarga', Self.TCteSefazInfCargaToJsonValue(Source.InfCarga));
    if Assigned(Source.InfDoc) then
      Json.ObjAddProp(Result, 'infDoc', Self.TCteSefazInfDocToJsonValue(Source.InfDoc));
    if Assigned(Source.DocAnt) then
      Json.ObjAddProp(Result, 'docAnt', Self.TCteSefazDocAntToJsonValue(Source.DocAnt));
    if Assigned(Source.InfModal) then
      Json.ObjAddProp(Result, 'infModal', Self.TCteSefazInfModalToJsonValue(Source.InfModal));
    if Assigned(Source.VeicNovos) then
      Json.ObjAddProp(Result, 'veicNovos', Self.TCteSefazVeicNovosListToJsonValue(Source.VeicNovos));
    if Assigned(Source.Cobr) then
      Json.ObjAddProp(Result, 'cobr', Self.TCteSefazCobrToJsonValue(Source.Cobr));
    if Assigned(Source.InfCteSub) then
      Json.ObjAddProp(Result, 'infCteSub', Self.TCteSefazInfCteSubToJsonValue(Source.InfCteSub));
    if Assigned(Source.InfGlobalizado) then
      Json.ObjAddProp(Result, 'infGlobalizado', Self.TCteSefazInfGlobalizadoToJsonValue(Source.InfGlobalizado));
    if Assigned(Source.InfServVinc) then
      Json.ObjAddProp(Result, 'infServVinc', Self.TCteSefazInfServVincToJsonValue(Source.InfServVinc));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCTeNormToJson(Source: TCteSefazInfCTeNorm): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCTeNormToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCTeNormFromJsonValue(Source: TJSONValue): TCteSefazInfCTeNorm;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCTeNorm.Create;
  try
    if Json.ObjContains(Source, 'infCarga', JValue) then
      Result.InfCarga := Self.TCteSefazInfCargaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infDoc', JValue) then
      Result.InfDoc := Self.TCteSefazInfDocFromJsonValue(JValue);
    if Json.ObjContains(Source, 'docAnt', JValue) then
      Result.DocAnt := Self.TCteSefazDocAntFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infModal', JValue) then
      Result.InfModal := Self.TCteSefazInfModalFromJsonValue(JValue);
    if Json.ObjContains(Source, 'veicNovos', JValue) then
      Result.VeicNovos := Self.TCteSefazVeicNovosListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cobr', JValue) then
      Result.Cobr := Self.TCteSefazCobrFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCteSub', JValue) then
      Result.InfCteSub := Self.TCteSefazInfCteSubFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infGlobalizado', JValue) then
      Result.InfGlobalizado := Self.TCteSefazInfGlobalizadoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infServVinc', JValue) then
      Result.InfServVinc := Self.TCteSefazInfServVincFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCTeNormFromJson(Source: string): TCteSefazInfCTeNorm;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCTeNormFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteCompToJsonValue(Source: TCteSefazInfCteComp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.ChCTeHasValue then
      Json.ObjAddProp(Result, 'chCTe', Self.stringToJsonValue(Source.ChCTe));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteCompToJson(Source: TCteSefazInfCteComp): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCteCompToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteCompFromJsonValue(Source: TJSONValue): TCteSefazInfCteComp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCteComp.Create;
  try
    if Json.ObjContains(Source, 'chCTe', JValue) then
      Result.ChCTe := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteCompFromJson(Source: string): TCteSefazInfCteComp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCteCompFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteAnuToJsonValue(Source: TCteSefazInfCteAnu): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.ChCteHasValue then
      Json.ObjAddProp(Result, 'chCte', Self.stringToJsonValue(Source.ChCte));
    if Source.DEmiHasValue then
      Json.ObjAddProp(Result, 'dEmi', Self.TDateToJsonValue(Source.DEmi));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteAnuToJson(Source: TCteSefazInfCteAnu): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCteAnuToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteAnuFromJsonValue(Source: TJSONValue): TCteSefazInfCteAnu;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCteAnu.Create;
  try
    if Json.ObjContains(Source, 'chCte', JValue) then
      Result.ChCte := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dEmi', JValue) then
      Result.DEmi := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteAnuFromJson(Source: string): TCteSefazInfCteAnu;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCteAnuFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazAutXMLToJsonValue(Source: TCteSefazAutXML): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazAutXMLToJson(Source: TCteSefazAutXML): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazAutXMLToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazAutXMLFromJsonValue(Source: TJSONValue): TCteSefazAutXML;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazAutXML.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazAutXMLFromJson(Source: string): TCteSefazAutXML;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazAutXMLFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazAutXMLListToJsonValue(Source: TCteSefazAutXMLList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazAutXMLToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazAutXMLListToJson(Source: TCteSefazAutXMLList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazAutXMLListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazAutXMLListFromJsonValue(Source: TJSONValue): TCteSefazAutXMLList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazAutXMLList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazAutXMLFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazAutXMLListFromJson(Source: string): TCteSefazAutXMLList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazAutXMLListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRespTecToJsonValue(Source: TCteSefazRespTec): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.XContatoHasValue then
      Json.ObjAddProp(Result, 'xContato', Self.stringToJsonValue(Source.XContato));
    if Source.EmailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.Email));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
    if Source.IdCSRTHasValue then
      Json.ObjAddProp(Result, 'idCSRT', Self.IntegerToJsonValue(Source.IdCSRT));
    if Source.HashCSRTHasValue then
      Json.ObjAddProp(Result, 'hashCSRT', Self.stringToJsonValue(Source.HashCSRT));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRespTecToJson(Source: TCteSefazRespTec): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazRespTecToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRespTecFromJsonValue(Source: TJSONValue): TCteSefazRespTec;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazRespTec.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xContato', JValue) then
      Result.XContato := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.Email := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idCSRT', JValue) then
      Result.IdCSRT := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'hashCSRT', JValue) then
      Result.HashCSRT := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRespTecFromJson(Source: string): TCteSefazRespTec;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazRespTecFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfSolicNFFToJsonValue(Source: TCteSefazInfSolicNFF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XSolicHasValue then
      Json.ObjAddProp(Result, 'xSolic', Self.stringToJsonValue(Source.XSolic));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfSolicNFFToJson(Source: TCteSefazInfSolicNFF): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfSolicNFFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfSolicNFFFromJsonValue(Source: TJSONValue): TCteSefazInfSolicNFF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfSolicNFF.Create;
  try
    if Json.ObjContains(Source, 'xSolic', JValue) then
      Result.XSolic := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfSolicNFFFromJson(Source: string): TCteSefazInfSolicNFF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfSolicNFFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteToJsonValue(Source: TCteSefazInfCte): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VersaoHasValue then
      Json.ObjAddProp(Result, 'versao', Self.stringToJsonValue(Source.Versao));
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'Id', Self.stringToJsonValue(Source.Id));
    if Assigned(Source.Ide) then
      Json.ObjAddProp(Result, 'ide', Self.TCteSefazIdeToJsonValue(Source.Ide));
    if Assigned(Source.Compl) then
      Json.ObjAddProp(Result, 'compl', Self.TCteSefazComplToJsonValue(Source.Compl));
    if Assigned(Source.Emit) then
      Json.ObjAddProp(Result, 'emit', Self.TCteSefazEmitToJsonValue(Source.Emit));
    if Assigned(Source.Rem) then
      Json.ObjAddProp(Result, 'rem', Self.TCteSefazRemToJsonValue(Source.Rem));
    if Assigned(Source.Exped) then
      Json.ObjAddProp(Result, 'exped', Self.TCteSefazExpedToJsonValue(Source.Exped));
    if Assigned(Source.Receb) then
      Json.ObjAddProp(Result, 'receb', Self.TCteSefazRecebToJsonValue(Source.Receb));
    if Assigned(Source.Dest) then
      Json.ObjAddProp(Result, 'dest', Self.TCteSefazDestToJsonValue(Source.Dest));
    if Assigned(Source.VPrest) then
      Json.ObjAddProp(Result, 'vPrest', Self.TCteSefazVPrestToJsonValue(Source.VPrest));
    if Assigned(Source.Imp) then
      Json.ObjAddProp(Result, 'imp', Self.TCteSefazInfCteImpToJsonValue(Source.Imp));
    if Assigned(Source.InfCTeNorm) then
      Json.ObjAddProp(Result, 'infCTeNorm', Self.TCteSefazInfCTeNormToJsonValue(Source.InfCTeNorm));
    if Assigned(Source.InfCteComp) then
      Json.ObjAddProp(Result, 'infCteComp', Self.TCteSefazInfCteCompToJsonValue(Source.InfCteComp));
    if Assigned(Source.InfCteAnu) then
      Json.ObjAddProp(Result, 'infCteAnu', Self.TCteSefazInfCteAnuToJsonValue(Source.InfCteAnu));
    if Assigned(Source.AutXML) then
      Json.ObjAddProp(Result, 'autXML', Self.TCteSefazAutXMLListToJsonValue(Source.AutXML));
    if Assigned(Source.InfRespTec) then
      Json.ObjAddProp(Result, 'infRespTec', Self.TCteSefazRespTecToJsonValue(Source.InfRespTec));
    if Assigned(Source.InfSolicNFF) then
      Json.ObjAddProp(Result, 'infSolicNFF', Self.TCteSefazInfSolicNFFToJsonValue(Source.InfSolicNFF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteToJson(Source: TCteSefazInfCte): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteFromJsonValue(Source: TJSONValue): TCteSefazInfCte;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCte.Create;
  try
    if Json.ObjContains(Source, 'versao', JValue) then
      Result.Versao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ide', JValue) then
      Result.Ide := Self.TCteSefazIdeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'compl', JValue) then
      Result.Compl := Self.TCteSefazComplFromJsonValue(JValue);
    if Json.ObjContains(Source, 'emit', JValue) then
      Result.Emit := Self.TCteSefazEmitFromJsonValue(JValue);
    if Json.ObjContains(Source, 'rem', JValue) then
      Result.Rem := Self.TCteSefazRemFromJsonValue(JValue);
    if Json.ObjContains(Source, 'exped', JValue) then
      Result.Exped := Self.TCteSefazExpedFromJsonValue(JValue);
    if Json.ObjContains(Source, 'receb', JValue) then
      Result.Receb := Self.TCteSefazRecebFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dest', JValue) then
      Result.Dest := Self.TCteSefazDestFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPrest', JValue) then
      Result.VPrest := Self.TCteSefazVPrestFromJsonValue(JValue);
    if Json.ObjContains(Source, 'imp', JValue) then
      Result.Imp := Self.TCteSefazInfCteImpFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCTeNorm', JValue) then
      Result.InfCTeNorm := Self.TCteSefazInfCTeNormFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCteComp', JValue) then
      Result.InfCteComp := Self.TCteSefazInfCteCompFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCteAnu', JValue) then
      Result.InfCteAnu := Self.TCteSefazInfCteAnuFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autXML', JValue) then
      Result.AutXML := Self.TCteSefazAutXMLListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infRespTec', JValue) then
      Result.InfRespTec := Self.TCteSefazRespTecFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infSolicNFF', JValue) then
      Result.InfSolicNFF := Self.TCteSefazInfSolicNFFFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteFromJson(Source: string): TCteSefazInfCte;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCTeSuplToJsonValue(Source: TCteSefazInfCTeSupl): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.QrCodCTeHasValue then
      Json.ObjAddProp(Result, 'qrCodCTe', Self.stringToJsonValue(Source.QrCodCTe));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCTeSuplToJson(Source: TCteSefazInfCTeSupl): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCTeSuplToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCTeSuplFromJsonValue(Source: TJSONValue): TCteSefazInfCTeSupl;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCTeSupl.Create;
  try
    if Json.ObjContains(Source, 'qrCodCTe', JValue) then
      Result.QrCodCTe := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCTeSuplFromJson(Source: string): TCteSefazInfCTeSupl;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCTeSuplFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCtePedidoEmissaoToJsonValue(Source: TCtePedidoEmissao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.InfCte) then
      Json.ObjAddProp(Result, 'infCte', Self.TCteSefazInfCteToJsonValue(Source.InfCte));
    if Assigned(Source.InfCTeSupl) then
      Json.ObjAddProp(Result, 'infCTeSupl', Self.TCteSefazInfCTeSuplToJsonValue(Source.InfCTeSupl));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.ReferenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.Referencia));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCtePedidoEmissaoToJson(Source: TCtePedidoEmissao): string;
var
  JValue: TJSONValue;
begin
  JValue := TCtePedidoEmissaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCtePedidoEmissaoFromJsonValue(Source: TJSONValue): TCtePedidoEmissao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCtePedidoEmissao.Create;
  try
    if Json.ObjContains(Source, 'infCte', JValue) then
      Result.InfCte := Self.TCteSefazInfCteFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCTeSupl', JValue) then
      Result.InfCTeSupl := Self.TCteSefazInfCTeSuplFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.Referencia := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCtePedidoEmissaoFromJson(Source: string): TCtePedidoEmissao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCtePedidoEmissaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCtePedidoEmissaoListToJsonValue(Source: TCtePedidoEmissaoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCtePedidoEmissaoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCtePedidoEmissaoListToJson(Source: TCtePedidoEmissaoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCtePedidoEmissaoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCtePedidoEmissaoListFromJsonValue(Source: TJSONValue): TCtePedidoEmissaoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCtePedidoEmissaoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCtePedidoEmissaoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCtePedidoEmissaoListFromJson(Source: string): TCtePedidoEmissaoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCtePedidoEmissaoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCtePedidoEmissaoLoteToJsonValue(Source: TCtePedidoEmissaoLote): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.Documentos) then
      Json.ObjAddProp(Result, 'documentos', Self.TCtePedidoEmissaoListToJsonValue(Source.Documentos));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.ReferenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.Referencia));
    if Source.IdLoteHasValue then
      Json.ObjAddProp(Result, 'id_lote', Self.stringToJsonValue(Source.IdLote));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCtePedidoEmissaoLoteToJson(Source: TCtePedidoEmissaoLote): string;
var
  JValue: TJSONValue;
begin
  JValue := TCtePedidoEmissaoLoteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCtePedidoEmissaoLoteFromJsonValue(Source: TJSONValue): TCtePedidoEmissaoLote;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCtePedidoEmissaoLote.Create;
  try
    if Json.ObjContains(Source, 'documentos', JValue) then
      Result.Documentos := Self.TCtePedidoEmissaoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.Referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id_lote', JValue) then
      Result.IdLote := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCtePedidoEmissaoLoteFromJson(Source: string): TCtePedidoEmissaoLote;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCtePedidoEmissaoLoteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeReciboToJsonValue(Source: TDfeRecibo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NumeroHasValue then
      Json.ObjAddProp(Result, 'numero', Self.stringToJsonValue(Source.Numero));
    if Source.CodigoStatusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.CodigoStatus));
    if Source.MotivoStatusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.MotivoStatus));
    if Source.DataRecebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.DataRecebimento));
    if Source.CodigoMensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.CodigoMensagem));
    if Source.MensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.Mensagem));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeReciboToJson(Source: TDfeRecibo): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeReciboToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeReciboFromJsonValue(Source: TJSONValue): TDfeRecibo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeRecibo.Create;
  try
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.Numero := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.CodigoStatus := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.MotivoStatus := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.DataRecebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.CodigoMensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.Mensagem := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeReciboFromJson(Source: string): TDfeRecibo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeReciboFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeAutorEventoToJsonValue(Source: TDfeAutorEvento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CpfCnpjHasValue then
      Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.CpfCnpj));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeAutorEventoToJson(Source: TDfeAutorEvento): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeAutorEventoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeAutorEventoFromJsonValue(Source: TJSONValue): TDfeAutorEvento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeAutorEvento.Create;
  try
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.CpfCnpj := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeAutorEventoFromJson(Source: string): TDfeAutorEvento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeAutorEventoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeAutorizacaoToJsonValue(Source: TDfeAutorizacao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.DigestValueHasValue then
      Json.ObjAddProp(Result, 'digest_value', Self.stringToJsonValue(Source.DigestValue));
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.Id));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.StatusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.Status));
    if Assigned(Source.Autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.Autor));
    if Source.ChaveAcessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.ChaveAcesso));
    if Source.DataEventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.DataEvento));
    if Source.NumeroSequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.NumeroSequencial));
    if Source.DataRecebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.DataRecebimento));
    if Source.CodigoStatusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.CodigoStatus));
    if Source.MotivoStatusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.MotivoStatus));
    if Source.NumeroProtocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.NumeroProtocolo));
    if Source.CodigoMensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.CodigoMensagem));
    if Source.MensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.Mensagem));
    if Source.TipoEventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.TipoEvento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeAutorizacaoToJson(Source: TDfeAutorizacao): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeAutorizacaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeAutorizacaoFromJsonValue(Source: TJSONValue): TDfeAutorizacao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeAutorizacao.Create;
  try
    if Json.ObjContains(Source, 'digest_value', JValue) then
      Result.DigestValue := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.Status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.Autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.ChaveAcesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.DataEvento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.NumeroSequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.DataRecebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.CodigoStatus := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.MotivoStatus := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.NumeroProtocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.CodigoMensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.Mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.TipoEvento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeAutorizacaoFromJson(Source: string): TDfeAutorizacao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeAutorizacaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeToJsonValue(Source: TDfe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.Id));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.CreatedAtHasValue then
      Json.ObjAddProp(Result, 'created_at', Self.TDateTimeToJsonValue(Source.CreatedAt));
    if Source.StatusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.Status));
    if Source.ReferenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.Referencia));
    if Source.DataEmissaoHasValue then
      Json.ObjAddProp(Result, 'data_emissao', Self.TDateTimeToJsonValue(Source.DataEmissao));
    if Source.ModeloHasValue then
      Json.ObjAddProp(Result, 'modelo', Self.IntegerToJsonValue(Source.Modelo));
    if Source.SerieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.Serie));
    if Source.NumeroHasValue then
      Json.ObjAddProp(Result, 'numero', Self.IntegerToJsonValue(Source.Numero));
    if Source.ValorTotalHasValue then
      Json.ObjAddProp(Result, 'valor_total', Self.DoubleToJsonValue(Source.ValorTotal));
    if Source.ChaveHasValue then
      Json.ObjAddProp(Result, 'chave', Self.stringToJsonValue(Source.Chave));
    if Assigned(Source.Autorizacao) then
      Json.ObjAddProp(Result, 'autorizacao', Self.TDfeAutorizacaoToJsonValue(Source.Autorizacao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeToJson(Source: TDfe): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeFromJsonValue(Source: TJSONValue): TDfe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfe.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'created_at', JValue) then
      Result.CreatedAt := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.Status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.Referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_emissao', JValue) then
      Result.DataEmissao := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modelo', JValue) then
      Result.Modelo := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.Serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.Numero := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_total', JValue) then
      Result.ValorTotal := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave', JValue) then
      Result.Chave := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autorizacao', JValue) then
      Result.Autorizacao := Self.TDfeAutorizacaoFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeFromJson(Source: string): TDfe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeListToJsonValue(Source: TDfeList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TDfeToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeListToJson(Source: TDfeList): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeListFromJsonValue(Source: TJSONValue): TDfeList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TDfeFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeListFromJson(Source: string): TDfeList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeLoteToJsonValue(Source: TDfeLote): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.Id));
    if Source.CreatedAtHasValue then
      Json.ObjAddProp(Result, 'created_at', Self.TDateTimeToJsonValue(Source.CreatedAt));
    if Source.StatusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.Status));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.ReferenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.Referencia));
    if Source.IdLoteHasValue then
      Json.ObjAddProp(Result, 'id_lote', Self.stringToJsonValue(Source.IdLote));
    if Assigned(Source.Recibo) then
      Json.ObjAddProp(Result, 'recibo', Self.TDfeReciboToJsonValue(Source.Recibo));
    if Assigned(Source.Documentos) then
      Json.ObjAddProp(Result, 'documentos', Self.TDfeListToJsonValue(Source.Documentos));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeLoteToJson(Source: TDfeLote): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeLoteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeLoteFromJsonValue(Source: TJSONValue): TDfeLote;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeLote.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'created_at', JValue) then
      Result.CreatedAt := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.Status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.Referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id_lote', JValue) then
      Result.IdLote := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'recibo', JValue) then
      Result.Recibo := Self.TDfeReciboFromJsonValue(JValue);
    if Json.ObjContains(Source, 'documentos', JValue) then
      Result.Documentos := Self.TDfeListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeLoteFromJson(Source: string): TDfeLote;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeLoteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCtePedidoCancelamentoToJsonValue(Source: TCtePedidoCancelamento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.JustificativaHasValue then
      Json.ObjAddProp(Result, 'justificativa', Self.stringToJsonValue(Source.Justificativa));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCtePedidoCancelamentoToJson(Source: TCtePedidoCancelamento): string;
var
  JValue: TJSONValue;
begin
  JValue := TCtePedidoCancelamentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCtePedidoCancelamentoFromJsonValue(Source: TJSONValue): TCtePedidoCancelamento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCtePedidoCancelamento.Create;
  try
    if Json.ObjContains(Source, 'justificativa', JValue) then
      Result.Justificativa := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCtePedidoCancelamentoFromJson(Source: string): TCtePedidoCancelamento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCtePedidoCancelamentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeCancelamentoToJsonValue(Source: TDfeCancelamento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.JustificativaHasValue then
      Json.ObjAddProp(Result, 'justificativa', Self.stringToJsonValue(Source.Justificativa));
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.Id));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.StatusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.Status));
    if Assigned(Source.Autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.Autor));
    if Source.ChaveAcessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.ChaveAcesso));
    if Source.DataEventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.DataEvento));
    if Source.NumeroSequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.NumeroSequencial));
    if Source.DataRecebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.DataRecebimento));
    if Source.CodigoStatusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.CodigoStatus));
    if Source.MotivoStatusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.MotivoStatus));
    if Source.NumeroProtocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.NumeroProtocolo));
    if Source.CodigoMensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.CodigoMensagem));
    if Source.MensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.Mensagem));
    if Source.TipoEventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.TipoEvento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeCancelamentoToJson(Source: TDfeCancelamento): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeCancelamentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeCancelamentoFromJsonValue(Source: TJSONValue): TDfeCancelamento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeCancelamento.Create;
  try
    if Json.ObjContains(Source, 'justificativa', JValue) then
      Result.Justificativa := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.Status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.Autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.ChaveAcesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.DataEvento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.NumeroSequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.DataRecebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.CodigoStatus := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.MotivoStatus := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.NumeroProtocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.CodigoMensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.Mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.TipoEvento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeCancelamentoFromJson(Source: string): TDfeCancelamento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeCancelamentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteInfCorrecaoToJsonValue(Source: TCteInfCorrecao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.GrupoAlteradoHasValue then
      Json.ObjAddProp(Result, 'grupo_alterado', Self.stringToJsonValue(Source.GrupoAlterado));
    if Source.CampoAlteradoHasValue then
      Json.ObjAddProp(Result, 'campo_alterado', Self.stringToJsonValue(Source.CampoAlterado));
    if Source.ValorAlteradoHasValue then
      Json.ObjAddProp(Result, 'valor_alterado', Self.stringToJsonValue(Source.ValorAlterado));
    if Source.NumeroItemAlteradoHasValue then
      Json.ObjAddProp(Result, 'numero_item_alterado', Self.IntegerToJsonValue(Source.NumeroItemAlterado));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteInfCorrecaoToJson(Source: TCteInfCorrecao): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteInfCorrecaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteInfCorrecaoFromJsonValue(Source: TJSONValue): TCteInfCorrecao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteInfCorrecao.Create;
  try
    if Json.ObjContains(Source, 'grupo_alterado', JValue) then
      Result.GrupoAlterado := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'campo_alterado', JValue) then
      Result.CampoAlterado := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_alterado', JValue) then
      Result.ValorAlterado := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_item_alterado', JValue) then
      Result.NumeroItemAlterado := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteInfCorrecaoFromJson(Source: string): TCteInfCorrecao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteInfCorrecaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteInfCorrecaoListToJsonValue(Source: TCteInfCorrecaoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteInfCorrecaoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteInfCorrecaoListToJson(Source: TCteInfCorrecaoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteInfCorrecaoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteInfCorrecaoListFromJsonValue(Source: TJSONValue): TCteInfCorrecaoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteInfCorrecaoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteInfCorrecaoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteInfCorrecaoListFromJson(Source: string): TCteInfCorrecaoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteInfCorrecaoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCtePedidoCartaCorrecaoToJsonValue(Source: TCtePedidoCartaCorrecao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.Correcoes) then
      Json.ObjAddProp(Result, 'correcoes', Self.TCteInfCorrecaoListToJsonValue(Source.Correcoes));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCtePedidoCartaCorrecaoToJson(Source: TCtePedidoCartaCorrecao): string;
var
  JValue: TJSONValue;
begin
  JValue := TCtePedidoCartaCorrecaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCtePedidoCartaCorrecaoFromJsonValue(Source: TJSONValue): TCtePedidoCartaCorrecao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCtePedidoCartaCorrecao.Create;
  try
    if Json.ObjContains(Source, 'correcoes', JValue) then
      Result.Correcoes := Self.TCteInfCorrecaoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCtePedidoCartaCorrecaoFromJson(Source: string): TCtePedidoCartaCorrecao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCtePedidoCartaCorrecaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteCartaCorrecaoToJsonValue(Source: TCteCartaCorrecao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.Correcoes) then
      Json.ObjAddProp(Result, 'correcoes', Self.TCteInfCorrecaoListToJsonValue(Source.Correcoes));
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.Id));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.StatusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.Status));
    if Assigned(Source.Autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.Autor));
    if Source.ChaveAcessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.ChaveAcesso));
    if Source.DataEventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.DataEvento));
    if Source.NumeroSequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.NumeroSequencial));
    if Source.DataRecebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.DataRecebimento));
    if Source.CodigoStatusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.CodigoStatus));
    if Source.MotivoStatusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.MotivoStatus));
    if Source.NumeroProtocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.NumeroProtocolo));
    if Source.CodigoMensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.CodigoMensagem));
    if Source.MensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.Mensagem));
    if Source.TipoEventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.TipoEvento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteCartaCorrecaoToJson(Source: TCteCartaCorrecao): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteCartaCorrecaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteCartaCorrecaoFromJsonValue(Source: TJSONValue): TCteCartaCorrecao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteCartaCorrecao.Create;
  try
    if Json.ObjContains(Source, 'correcoes', JValue) then
      Result.Correcoes := Self.TCteInfCorrecaoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.Status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.Autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.ChaveAcesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.DataEvento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.NumeroSequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.DataRecebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.CodigoStatus := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.MotivoStatus := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.NumeroProtocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.CodigoMensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.Mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.TipoEvento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteCartaCorrecaoFromJson(Source: string): TCteCartaCorrecao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteCartaCorrecaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfePedidoInutilizacaoToJsonValue(Source: TDfePedidoInutilizacao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.CnpjHasValue then
      Json.ObjAddProp(Result, 'cnpj', Self.stringToJsonValue(Source.Cnpj));
    if Source.AnoHasValue then
      Json.ObjAddProp(Result, 'ano', Self.IntegerToJsonValue(Source.Ano));
    if Source.SerieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.Serie));
    if Source.NumeroInicialHasValue then
      Json.ObjAddProp(Result, 'numero_inicial', Self.IntegerToJsonValue(Source.NumeroInicial));
    if Source.NumeroFinalHasValue then
      Json.ObjAddProp(Result, 'numero_final', Self.IntegerToJsonValue(Source.NumeroFinal));
    if Source.JustificativaHasValue then
      Json.ObjAddProp(Result, 'justificativa', Self.stringToJsonValue(Source.Justificativa));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfePedidoInutilizacaoToJson(Source: TDfePedidoInutilizacao): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfePedidoInutilizacaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfePedidoInutilizacaoFromJsonValue(Source: TJSONValue): TDfePedidoInutilizacao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfePedidoInutilizacao.Create;
  try
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cnpj', JValue) then
      Result.Cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ano', JValue) then
      Result.Ano := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.Serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_inicial', JValue) then
      Result.NumeroInicial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_final', JValue) then
      Result.NumeroFinal := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'justificativa', JValue) then
      Result.Justificativa := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfePedidoInutilizacaoFromJson(Source: string): TDfePedidoInutilizacao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfePedidoInutilizacaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeInutilizacaoToJsonValue(Source: TDfeInutilizacao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CnpjHasValue then
      Json.ObjAddProp(Result, 'cnpj', Self.stringToJsonValue(Source.Cnpj));
    if Source.AnoHasValue then
      Json.ObjAddProp(Result, 'ano', Self.IntegerToJsonValue(Source.Ano));
    if Source.ModeloHasValue then
      Json.ObjAddProp(Result, 'modelo', Self.IntegerToJsonValue(Source.Modelo));
    if Source.SerieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.Serie));
    if Source.NumeroInicialHasValue then
      Json.ObjAddProp(Result, 'numero_inicial', Self.IntegerToJsonValue(Source.NumeroInicial));
    if Source.NumeroFinalHasValue then
      Json.ObjAddProp(Result, 'numero_final', Self.IntegerToJsonValue(Source.NumeroFinal));
    if Source.JustificativaHasValue then
      Json.ObjAddProp(Result, 'justificativa', Self.stringToJsonValue(Source.Justificativa));
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.Id));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.StatusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.Status));
    if Assigned(Source.Autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.Autor));
    if Source.ChaveAcessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.ChaveAcesso));
    if Source.DataEventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.DataEvento));
    if Source.NumeroSequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.NumeroSequencial));
    if Source.DataRecebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.DataRecebimento));
    if Source.CodigoStatusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.CodigoStatus));
    if Source.MotivoStatusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.MotivoStatus));
    if Source.NumeroProtocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.NumeroProtocolo));
    if Source.CodigoMensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.CodigoMensagem));
    if Source.MensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.Mensagem));
    if Source.TipoEventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.TipoEvento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeInutilizacaoToJson(Source: TDfeInutilizacao): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeInutilizacaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeInutilizacaoFromJsonValue(Source: TJSONValue): TDfeInutilizacao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeInutilizacao.Create;
  try
    if Json.ObjContains(Source, 'cnpj', JValue) then
      Result.Cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ano', JValue) then
      Result.Ano := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modelo', JValue) then
      Result.Modelo := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.Serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_inicial', JValue) then
      Result.NumeroInicial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_final', JValue) then
      Result.NumeroFinal := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'justificativa', JValue) then
      Result.Justificativa := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.Status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.Autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.ChaveAcesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.DataEvento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.NumeroSequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.DataRecebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.CodigoStatus := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.MotivoStatus := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.NumeroProtocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.CodigoMensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.Mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.TipoEvento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeInutilizacaoFromJson(Source: string): TDfeInutilizacao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeInutilizacaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeEventoToJsonValue(Source: TDfeEvento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.Id));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.StatusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.Status));
    if Assigned(Source.Autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.Autor));
    if Source.ChaveAcessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.ChaveAcesso));
    if Source.DataEventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.DataEvento));
    if Source.NumeroSequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.NumeroSequencial));
    if Source.DataRecebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.DataRecebimento));
    if Source.CodigoStatusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.CodigoStatus));
    if Source.MotivoStatusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.MotivoStatus));
    if Source.NumeroProtocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.NumeroProtocolo));
    if Source.CodigoMensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.CodigoMensagem));
    if Source.MensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.Mensagem));
    if Source.TipoEventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.TipoEvento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeEventoToJson(Source: TDfeEvento): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeEventoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeEventoFromJsonValue(Source: TJSONValue): TDfeEvento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeEvento.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.Status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.Autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.ChaveAcesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.DataEvento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.NumeroSequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.DataRecebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.CodigoStatus := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.MotivoStatus := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.NumeroProtocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.CodigoMensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.Mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.TipoEvento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeEventoFromJson(Source: string): TDfeEvento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeEventoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunCarregaToJsonValue(Source: TMdfeSefazInfMunCarrega): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CMunCarregaHasValue then
      Json.ObjAddProp(Result, 'cMunCarrega', Self.IntegerToJsonValue(Source.CMunCarrega));
    if Source.XMunCarregaHasValue then
      Json.ObjAddProp(Result, 'xMunCarrega', Self.stringToJsonValue(Source.XMunCarrega));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunCarregaToJson(Source: TMdfeSefazInfMunCarrega): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMunCarregaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunCarregaFromJsonValue(Source: TJSONValue): TMdfeSefazInfMunCarrega;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMunCarrega.Create;
  try
    if Json.ObjContains(Source, 'cMunCarrega', JValue) then
      Result.CMunCarrega := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMunCarrega', JValue) then
      Result.XMunCarrega := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunCarregaFromJson(Source: string): TMdfeSefazInfMunCarrega;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMunCarregaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunCarregaListToJsonValue(Source: TMdfeSefazInfMunCarregaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfMunCarregaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunCarregaListToJson(Source: TMdfeSefazInfMunCarregaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMunCarregaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunCarregaListFromJsonValue(Source: TJSONValue): TMdfeSefazInfMunCarregaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMunCarregaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfMunCarregaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunCarregaListFromJson(Source: string): TMdfeSefazInfMunCarregaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMunCarregaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPercursoToJsonValue(Source: TMdfeSefazInfPercurso): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.UFPerHasValue then
      Json.ObjAddProp(Result, 'UFPer', Self.stringToJsonValue(Source.UFPer));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPercursoToJson(Source: TMdfeSefazInfPercurso): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfPercursoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPercursoFromJsonValue(Source: TJSONValue): TMdfeSefazInfPercurso;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfPercurso.Create;
  try
    if Json.ObjContains(Source, 'UFPer', JValue) then
      Result.UFPer := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPercursoFromJson(Source: string): TMdfeSefazInfPercurso;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfPercursoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPercursoListToJsonValue(Source: TMdfeSefazInfPercursoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfPercursoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPercursoListToJson(Source: TMdfeSefazInfPercursoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfPercursoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPercursoListFromJsonValue(Source: TJSONValue): TMdfeSefazInfPercursoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfPercursoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfPercursoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPercursoListFromJson(Source: string): TMdfeSefazInfPercursoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfPercursoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazIdeToJsonValue(Source: TMdfeSefazIde): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CUFHasValue then
      Json.ObjAddProp(Result, 'cUF', Self.IntegerToJsonValue(Source.CUF));
    if Source.TpAmbHasValue then
      Json.ObjAddProp(Result, 'tpAmb', Self.IntegerToJsonValue(Source.TpAmb));
    if Source.TpEmitHasValue then
      Json.ObjAddProp(Result, 'tpEmit', Self.IntegerToJsonValue(Source.TpEmit));
    if Source.TpTranspHasValue then
      Json.ObjAddProp(Result, 'tpTransp', Self.IntegerToJsonValue(Source.TpTransp));
    if Source.&ModHasValue then
      Json.ObjAddProp(Result, 'mod', Self.IntegerToJsonValue(Source.&Mod));
    if Source.SerieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.Serie));
    if Source.NMDFHasValue then
      Json.ObjAddProp(Result, 'nMDF', Self.IntegerToJsonValue(Source.NMDF));
    if Source.CMDFHasValue then
      Json.ObjAddProp(Result, 'cMDF', Self.IntegerToJsonValue(Source.CMDF));
    if Source.CDVHasValue then
      Json.ObjAddProp(Result, 'cDV', Self.IntegerToJsonValue(Source.CDV));
    if Source.ModalHasValue then
      Json.ObjAddProp(Result, 'modal', Self.IntegerToJsonValue(Source.Modal));
    if Source.DhEmiHasValue then
      Json.ObjAddProp(Result, 'dhEmi', Self.TDateTimeToJsonValue(Source.DhEmi));
    if Source.TpEmisHasValue then
      Json.ObjAddProp(Result, 'tpEmis', Self.IntegerToJsonValue(Source.TpEmis));
    if Source.ProcEmiHasValue then
      Json.ObjAddProp(Result, 'procEmi', Self.stringToJsonValue(Source.ProcEmi));
    if Source.VerProcHasValue then
      Json.ObjAddProp(Result, 'verProc', Self.stringToJsonValue(Source.VerProc));
    if Source.UFIniHasValue then
      Json.ObjAddProp(Result, 'UFIni', Self.stringToJsonValue(Source.UFIni));
    if Source.UFFimHasValue then
      Json.ObjAddProp(Result, 'UFFim', Self.stringToJsonValue(Source.UFFim));
    if Assigned(Source.InfMunCarrega) then
      Json.ObjAddProp(Result, 'infMunCarrega', Self.TMdfeSefazInfMunCarregaListToJsonValue(Source.InfMunCarrega));
    if Assigned(Source.InfPercurso) then
      Json.ObjAddProp(Result, 'infPercurso', Self.TMdfeSefazInfPercursoListToJsonValue(Source.InfPercurso));
    if Source.DhIniViagemHasValue then
      Json.ObjAddProp(Result, 'dhIniViagem', Self.TDateTimeToJsonValue(Source.DhIniViagem));
    if Source.IndCanalVerdeHasValue then
      Json.ObjAddProp(Result, 'indCanalVerde', Self.IntegerToJsonValue(Source.IndCanalVerde));
    if Source.IndCarregaPosteriorHasValue then
      Json.ObjAddProp(Result, 'indCarregaPosterior', Self.IntegerToJsonValue(Source.IndCarregaPosterior));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazIdeToJson(Source: TMdfeSefazIde): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazIdeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazIdeFromJsonValue(Source: TJSONValue): TMdfeSefazIde;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazIde.Create;
  try
    if Json.ObjContains(Source, 'cUF', JValue) then
      Result.CUF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpAmb', JValue) then
      Result.TpAmb := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpEmit', JValue) then
      Result.TpEmit := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpTransp', JValue) then
      Result.TpTransp := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&Mod := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.Serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nMDF', JValue) then
      Result.NMDF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMDF', JValue) then
      Result.CMDF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cDV', JValue) then
      Result.CDV := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modal', JValue) then
      Result.Modal := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhEmi', JValue) then
      Result.DhEmi := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpEmis', JValue) then
      Result.TpEmis := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'procEmi', JValue) then
      Result.ProcEmi := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'verProc', JValue) then
      Result.VerProc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFIni', JValue) then
      Result.UFIni := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFFim', JValue) then
      Result.UFFim := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infMunCarrega', JValue) then
      Result.InfMunCarrega := Self.TMdfeSefazInfMunCarregaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infPercurso', JValue) then
      Result.InfPercurso := Self.TMdfeSefazInfPercursoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhIniViagem', JValue) then
      Result.DhIniViagem := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indCanalVerde', JValue) then
      Result.IndCanalVerde := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indCarregaPosterior', JValue) then
      Result.IndCarregaPosterior := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazIdeFromJson(Source: string): TMdfeSefazIde;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazIdeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazEndeEmiToJsonValue(Source: TMdfeSefazEndeEmi): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XLgrHasValue then
      Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.XLgr));
    if Source.NroHasValue then
      Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.Nro));
    if Source.XCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.XCpl));
    if Source.XBairroHasValue then
      Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.XBairro));
    if Source.CMunHasValue then
      Json.ObjAddProp(Result, 'cMun', Self.IntegerToJsonValue(Source.CMun));
    if Source.XMunHasValue then
      Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.XMun));
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.IntegerToJsonValue(Source.CEP));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
    if Source.EmailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.Email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazEndeEmiToJson(Source: TMdfeSefazEndeEmi): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazEndeEmiToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazEndeEmiFromJsonValue(Source: TJSONValue): TMdfeSefazEndeEmi;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazEndeEmi.Create;
  try
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.XLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.Nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.XCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.XBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.CMun := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.XMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.Email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazEndeEmiFromJson(Source: string): TMdfeSefazEndeEmi;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazEndeEmiFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazEmitToJsonValue(Source: TMdfeSefazEmit): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Source.XFantHasValue then
      Json.ObjAddProp(Result, 'xFant', Self.stringToJsonValue(Source.XFant));
    if Assigned(Source.EnderEmit) then
      Json.ObjAddProp(Result, 'enderEmit', Self.TMdfeSefazEndeEmiToJsonValue(Source.EnderEmit));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazEmitToJson(Source: TMdfeSefazEmit): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazEmitToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazEmitFromJsonValue(Source: TJSONValue): TMdfeSefazEmit;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazEmit.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xFant', JValue) then
      Result.XFant := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderEmit', JValue) then
      Result.EnderEmit := Self.TMdfeSefazEndeEmiFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazEmitFromJson(Source: string): TMdfeSefazEmit;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazEmitFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazAereoToJsonValue(Source: TMdfeSefazAereo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NacHasValue then
      Json.ObjAddProp(Result, 'nac', Self.stringToJsonValue(Source.Nac));
    if Source.MatrHasValue then
      Json.ObjAddProp(Result, 'matr', Self.stringToJsonValue(Source.Matr));
    if Source.NVooHasValue then
      Json.ObjAddProp(Result, 'nVoo', Self.stringToJsonValue(Source.NVoo));
    if Source.CAerEmbHasValue then
      Json.ObjAddProp(Result, 'cAerEmb', Self.stringToJsonValue(Source.CAerEmb));
    if Source.CAerDesHasValue then
      Json.ObjAddProp(Result, 'cAerDes', Self.stringToJsonValue(Source.CAerDes));
    if Source.DVooHasValue then
      Json.ObjAddProp(Result, 'dVoo', Self.TDateToJsonValue(Source.DVoo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazAereoToJson(Source: TMdfeSefazAereo): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazAereoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazAereoFromJsonValue(Source: TJSONValue): TMdfeSefazAereo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazAereo.Create;
  try
    if Json.ObjContains(Source, 'nac', JValue) then
      Result.Nac := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'matr', JValue) then
      Result.Matr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nVoo', JValue) then
      Result.NVoo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cAerEmb', JValue) then
      Result.CAerEmb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cAerDes', JValue) then
      Result.CAerDes := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dVoo', JValue) then
      Result.DVoo := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazAereoFromJson(Source: string): TMdfeSefazAereo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazAereoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfCIOTToJsonValue(Source: TMdfeSefazInfCIOT): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CIOTHasValue then
      Json.ObjAddProp(Result, 'CIOT', Self.stringToJsonValue(Source.CIOT));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfCIOTToJson(Source: TMdfeSefazInfCIOT): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfCIOTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfCIOTFromJsonValue(Source: TJSONValue): TMdfeSefazInfCIOT;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfCIOT.Create;
  try
    if Json.ObjContains(Source, 'CIOT', JValue) then
      Result.CIOT := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfCIOTFromJson(Source: string): TMdfeSefazInfCIOT;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfCIOTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfCIOTListToJsonValue(Source: TMdfeSefazInfCIOTList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfCIOTToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfCIOTListToJson(Source: TMdfeSefazInfCIOTList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfCIOTListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfCIOTListFromJsonValue(Source: TJSONValue): TMdfeSefazInfCIOTList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfCIOTList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfCIOTFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfCIOTListFromJson(Source: string): TMdfeSefazInfCIOTList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfCIOTListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazDispToJsonValue(Source: TMdfeSefazDisp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJFornHasValue then
      Json.ObjAddProp(Result, 'CNPJForn', Self.stringToJsonValue(Source.CNPJForn));
    if Source.CNPJPgHasValue then
      Json.ObjAddProp(Result, 'CNPJPg', Self.stringToJsonValue(Source.CNPJPg));
    if Source.CPFPgHasValue then
      Json.ObjAddProp(Result, 'CPFPg', Self.stringToJsonValue(Source.CPFPg));
    if Source.NCompraHasValue then
      Json.ObjAddProp(Result, 'nCompra', Self.stringToJsonValue(Source.NCompra));
    if Source.VValePedHasValue then
      Json.ObjAddProp(Result, 'vValePed', Self.DoubleToJsonValue(Source.VValePed));
    if Source.TpValePedHasValue then
      Json.ObjAddProp(Result, 'tpValePed', Self.stringToJsonValue(Source.TpValePed));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazDispToJson(Source: TMdfeSefazDisp): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazDispToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazDispFromJsonValue(Source: TJSONValue): TMdfeSefazDisp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazDisp.Create;
  try
    if Json.ObjContains(Source, 'CNPJForn', JValue) then
      Result.CNPJForn := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJPg', JValue) then
      Result.CNPJPg := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPFPg', JValue) then
      Result.CPFPg := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nCompra', JValue) then
      Result.NCompra := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vValePed', JValue) then
      Result.VValePed := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpValePed', JValue) then
      Result.TpValePed := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazDispFromJson(Source: string): TMdfeSefazDisp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazDispFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazDispListToJsonValue(Source: TMdfeSefazDispList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazDispToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazDispListToJson(Source: TMdfeSefazDispList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazDispListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazDispListFromJsonValue(Source: TJSONValue): TMdfeSefazDispList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazDispList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazDispFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazDispListFromJson(Source: string): TMdfeSefazDispList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazDispListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazValePedToJsonValue(Source: TMdfeSefazValePed): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.Disp) then
      Json.ObjAddProp(Result, 'disp', Self.TMdfeSefazDispListToJsonValue(Source.Disp));
    if Source.CategCombVeicHasValue then
      Json.ObjAddProp(Result, 'categCombVeic', Self.stringToJsonValue(Source.CategCombVeic));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazValePedToJson(Source: TMdfeSefazValePed): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazValePedToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazValePedFromJsonValue(Source: TJSONValue): TMdfeSefazValePed;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazValePed.Create;
  try
    if Json.ObjContains(Source, 'disp', JValue) then
      Result.Disp := Self.TMdfeSefazDispListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'categCombVeic', JValue) then
      Result.CategCombVeic := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazValePedFromJson(Source: string): TMdfeSefazValePed;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazValePedFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratanteToJsonValue(Source: TMdfeSefazInfContratante): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.IdEstrangeiroHasValue then
      Json.ObjAddProp(Result, 'idEstrangeiro', Self.stringToJsonValue(Source.IdEstrangeiro));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratanteToJson(Source: TMdfeSefazInfContratante): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfContratanteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratanteFromJsonValue(Source: TJSONValue): TMdfeSefazInfContratante;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfContratante.Create;
  try
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idEstrangeiro', JValue) then
      Result.IdEstrangeiro := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratanteFromJson(Source: string): TMdfeSefazInfContratante;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfContratanteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratanteListToJsonValue(Source: TMdfeSefazInfContratanteList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfContratanteToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratanteListToJson(Source: TMdfeSefazInfContratanteList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfContratanteListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratanteListFromJsonValue(Source: TJSONValue): TMdfeSefazInfContratanteList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfContratanteList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfContratanteFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratanteListFromJson(Source: string): TMdfeSefazInfContratanteList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfContratanteListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazCompToJsonValue(Source: TMdfeSefazComp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpCompHasValue then
      Json.ObjAddProp(Result, 'tpComp', Self.stringToJsonValue(Source.TpComp));
    if Source.VCompHasValue then
      Json.ObjAddProp(Result, 'vComp', Self.DoubleToJsonValue(Source.VComp));
    if Source.XCompHasValue then
      Json.ObjAddProp(Result, 'xComp', Self.stringToJsonValue(Source.XComp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazCompToJson(Source: TMdfeSefazComp): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazCompToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazCompFromJsonValue(Source: TJSONValue): TMdfeSefazComp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazComp.Create;
  try
    if Json.ObjContains(Source, 'tpComp', JValue) then
      Result.TpComp := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vComp', JValue) then
      Result.VComp := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xComp', JValue) then
      Result.XComp := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazCompFromJson(Source: string): TMdfeSefazComp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazCompFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazCompListToJsonValue(Source: TMdfeSefazCompList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazCompToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazCompListToJson(Source: TMdfeSefazCompList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazCompListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazCompListFromJsonValue(Source: TJSONValue): TMdfeSefazCompList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazCompList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazCompFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazCompListFromJson(Source: string): TMdfeSefazCompList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazCompListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPrazoToJsonValue(Source: TMdfeSefazInfPrazo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NParcelaHasValue then
      Json.ObjAddProp(Result, 'nParcela', Self.IntegerToJsonValue(Source.NParcela));
    if Source.DVencHasValue then
      Json.ObjAddProp(Result, 'dVenc', Self.TDateToJsonValue(Source.DVenc));
    if Source.VParcelaHasValue then
      Json.ObjAddProp(Result, 'vParcela', Self.DoubleToJsonValue(Source.VParcela));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPrazoToJson(Source: TMdfeSefazInfPrazo): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfPrazoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPrazoFromJsonValue(Source: TJSONValue): TMdfeSefazInfPrazo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfPrazo.Create;
  try
    if Json.ObjContains(Source, 'nParcela', JValue) then
      Result.NParcela := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dVenc', JValue) then
      Result.DVenc := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vParcela', JValue) then
      Result.VParcela := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPrazoFromJson(Source: string): TMdfeSefazInfPrazo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfPrazoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPrazoListToJsonValue(Source: TMdfeSefazInfPrazoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfPrazoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPrazoListToJson(Source: TMdfeSefazInfPrazoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfPrazoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPrazoListFromJsonValue(Source: TJSONValue): TMdfeSefazInfPrazoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfPrazoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfPrazoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPrazoListFromJson(Source: string): TMdfeSefazInfPrazoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfPrazoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfBancToJsonValue(Source: TMdfeSefazInfBanc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CodBancoHasValue then
      Json.ObjAddProp(Result, 'codBanco', Self.stringToJsonValue(Source.CodBanco));
    if Source.CodAgenciaHasValue then
      Json.ObjAddProp(Result, 'codAgencia', Self.stringToJsonValue(Source.CodAgencia));
    if Source.CNPJIPEFHasValue then
      Json.ObjAddProp(Result, 'CNPJIPEF', Self.stringToJsonValue(Source.CNPJIPEF));
    if Source.PIXHasValue then
      Json.ObjAddProp(Result, 'PIX', Self.stringToJsonValue(Source.PIX));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfBancToJson(Source: TMdfeSefazInfBanc): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfBancToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfBancFromJsonValue(Source: TJSONValue): TMdfeSefazInfBanc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfBanc.Create;
  try
    if Json.ObjContains(Source, 'codBanco', JValue) then
      Result.CodBanco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codAgencia', JValue) then
      Result.CodAgencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJIPEF', JValue) then
      Result.CNPJIPEF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PIX', JValue) then
      Result.PIX := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfBancFromJson(Source: string): TMdfeSefazInfBanc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfBancFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPagToJsonValue(Source: TMdfeSefazInfPag): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.IdEstrangeiroHasValue then
      Json.ObjAddProp(Result, 'idEstrangeiro', Self.stringToJsonValue(Source.IdEstrangeiro));
    if Assigned(Source.Comp) then
      Json.ObjAddProp(Result, 'Comp', Self.TMdfeSefazCompListToJsonValue(Source.Comp));
    if Source.VContratoHasValue then
      Json.ObjAddProp(Result, 'vContrato', Self.DoubleToJsonValue(Source.VContrato));
    if Source.IndAltoDesempHasValue then
      Json.ObjAddProp(Result, 'indAltoDesemp', Self.IntegerToJsonValue(Source.IndAltoDesemp));
    if Source.IndPagHasValue then
      Json.ObjAddProp(Result, 'indPag', Self.IntegerToJsonValue(Source.IndPag));
    if Source.VAdiantHasValue then
      Json.ObjAddProp(Result, 'vAdiant', Self.DoubleToJsonValue(Source.VAdiant));
    if Assigned(Source.InfPrazo) then
      Json.ObjAddProp(Result, 'infPrazo', Self.TMdfeSefazInfPrazoListToJsonValue(Source.InfPrazo));
    if Assigned(Source.InfBanc) then
      Json.ObjAddProp(Result, 'infBanc', Self.TMdfeSefazInfBancToJsonValue(Source.InfBanc));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPagToJson(Source: TMdfeSefazInfPag): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfPagToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPagFromJsonValue(Source: TJSONValue): TMdfeSefazInfPag;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfPag.Create;
  try
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idEstrangeiro', JValue) then
      Result.IdEstrangeiro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Comp', JValue) then
      Result.Comp := Self.TMdfeSefazCompListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vContrato', JValue) then
      Result.VContrato := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indAltoDesemp', JValue) then
      Result.IndAltoDesemp := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indPag', JValue) then
      Result.IndPag := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAdiant', JValue) then
      Result.VAdiant := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infPrazo', JValue) then
      Result.InfPrazo := Self.TMdfeSefazInfPrazoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infBanc', JValue) then
      Result.InfBanc := Self.TMdfeSefazInfBancFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPagFromJson(Source: string): TMdfeSefazInfPag;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfPagFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPagListToJsonValue(Source: TMdfeSefazInfPagList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfPagToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPagListToJson(Source: TMdfeSefazInfPagList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfPagListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPagListFromJsonValue(Source: TJSONValue): TMdfeSefazInfPagList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfPagList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfPagFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPagListFromJson(Source: string): TMdfeSefazInfPagList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfPagListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfANTTToJsonValue(Source: TMdfeSefazInfANTT): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.RNTRCHasValue then
      Json.ObjAddProp(Result, 'RNTRC', Self.stringToJsonValue(Source.RNTRC));
    if Assigned(Source.InfCIOT) then
      Json.ObjAddProp(Result, 'infCIOT', Self.TMdfeSefazInfCIOTListToJsonValue(Source.InfCIOT));
    if Assigned(Source.ValePed) then
      Json.ObjAddProp(Result, 'valePed', Self.TMdfeSefazValePedToJsonValue(Source.ValePed));
    if Assigned(Source.InfContratante) then
      Json.ObjAddProp(Result, 'infContratante', Self.TMdfeSefazInfContratanteListToJsonValue(Source.InfContratante));
    if Assigned(Source.InfPag) then
      Json.ObjAddProp(Result, 'infPag', Self.TMdfeSefazInfPagListToJsonValue(Source.InfPag));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfANTTToJson(Source: TMdfeSefazInfANTT): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfANTTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfANTTFromJsonValue(Source: TJSONValue): TMdfeSefazInfANTT;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfANTT.Create;
  try
    if Json.ObjContains(Source, 'RNTRC', JValue) then
      Result.RNTRC := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCIOT', JValue) then
      Result.InfCIOT := Self.TMdfeSefazInfCIOTListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valePed', JValue) then
      Result.ValePed := Self.TMdfeSefazValePedFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infContratante', JValue) then
      Result.InfContratante := Self.TMdfeSefazInfContratanteListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infPag', JValue) then
      Result.InfPag := Self.TMdfeSefazInfPagListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfANTTFromJson(Source: string): TMdfeSefazInfANTT;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfANTTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazPropToJsonValue(Source: TMdfeSefazProp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.RNTRCHasValue then
      Json.ObjAddProp(Result, 'RNTRC', Self.stringToJsonValue(Source.RNTRC));
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.TpPropHasValue then
      Json.ObjAddProp(Result, 'tpProp', Self.IntegerToJsonValue(Source.TpProp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazPropToJson(Source: TMdfeSefazProp): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazPropToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazPropFromJsonValue(Source: TJSONValue): TMdfeSefazProp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazProp.Create;
  try
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'RNTRC', JValue) then
      Result.RNTRC := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpProp', JValue) then
      Result.TpProp := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazPropFromJson(Source: string): TMdfeSefazProp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazPropFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazCondutorToJsonValue(Source: TMdfeSefazCondutor): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazCondutorToJson(Source: TMdfeSefazCondutor): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazCondutorToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazCondutorFromJsonValue(Source: TJSONValue): TMdfeSefazCondutor;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazCondutor.Create;
  try
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazCondutorFromJson(Source: string): TMdfeSefazCondutor;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazCondutorFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazCondutorListToJsonValue(Source: TMdfeSefazCondutorList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazCondutorToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazCondutorListToJson(Source: TMdfeSefazCondutorList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazCondutorListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazCondutorListFromJsonValue(Source: TJSONValue): TMdfeSefazCondutorList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazCondutorList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazCondutorFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazCondutorListFromJson(Source: string): TMdfeSefazCondutorList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazCondutorListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVeicTracaoToJsonValue(Source: TMdfeSefazVeicTracao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CIntHasValue then
      Json.ObjAddProp(Result, 'cInt', Self.stringToJsonValue(Source.CInt));
    if Source.PlacaHasValue then
      Json.ObjAddProp(Result, 'placa', Self.stringToJsonValue(Source.Placa));
    if Source.RENAVAMHasValue then
      Json.ObjAddProp(Result, 'RENAVAM', Self.stringToJsonValue(Source.RENAVAM));
    if Source.TaraHasValue then
      Json.ObjAddProp(Result, 'tara', Self.IntegerToJsonValue(Source.Tara));
    if Source.CapKGHasValue then
      Json.ObjAddProp(Result, 'capKG', Self.IntegerToJsonValue(Source.CapKG));
    if Source.CapM3HasValue then
      Json.ObjAddProp(Result, 'capM3', Self.IntegerToJsonValue(Source.CapM3));
    if Assigned(Source.Prop) then
      Json.ObjAddProp(Result, 'prop', Self.TMdfeSefazPropToJsonValue(Source.Prop));
    if Assigned(Source.Condutor) then
      Json.ObjAddProp(Result, 'condutor', Self.TMdfeSefazCondutorListToJsonValue(Source.Condutor));
    if Source.TpRodHasValue then
      Json.ObjAddProp(Result, 'tpRod', Self.stringToJsonValue(Source.TpRod));
    if Source.TpCarHasValue then
      Json.ObjAddProp(Result, 'tpCar', Self.stringToJsonValue(Source.TpCar));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVeicTracaoToJson(Source: TMdfeSefazVeicTracao): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazVeicTracaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVeicTracaoFromJsonValue(Source: TJSONValue): TMdfeSefazVeicTracao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazVeicTracao.Create;
  try
    if Json.ObjContains(Source, 'cInt', JValue) then
      Result.CInt := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'placa', JValue) then
      Result.Placa := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'RENAVAM', JValue) then
      Result.RENAVAM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tara', JValue) then
      Result.Tara := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'capKG', JValue) then
      Result.CapKG := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'capM3', JValue) then
      Result.CapM3 := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prop', JValue) then
      Result.Prop := Self.TMdfeSefazPropFromJsonValue(JValue);
    if Json.ObjContains(Source, 'condutor', JValue) then
      Result.Condutor := Self.TMdfeSefazCondutorListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpRod', JValue) then
      Result.TpRod := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpCar', JValue) then
      Result.TpCar := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVeicTracaoFromJson(Source: string): TMdfeSefazVeicTracao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazVeicTracaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboquePropToJsonValue(Source: TMdfeSefazVeicReboqueProp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.RNTRCHasValue then
      Json.ObjAddProp(Result, 'RNTRC', Self.stringToJsonValue(Source.RNTRC));
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.TpPropHasValue then
      Json.ObjAddProp(Result, 'tpProp', Self.IntegerToJsonValue(Source.TpProp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboquePropToJson(Source: TMdfeSefazVeicReboqueProp): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazVeicReboquePropToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboquePropFromJsonValue(Source: TJSONValue): TMdfeSefazVeicReboqueProp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazVeicReboqueProp.Create;
  try
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'RNTRC', JValue) then
      Result.RNTRC := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpProp', JValue) then
      Result.TpProp := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboquePropFromJson(Source: string): TMdfeSefazVeicReboqueProp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazVeicReboquePropFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboqueToJsonValue(Source: TMdfeSefazVeicReboque): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CIntHasValue then
      Json.ObjAddProp(Result, 'cInt', Self.stringToJsonValue(Source.CInt));
    if Source.PlacaHasValue then
      Json.ObjAddProp(Result, 'placa', Self.stringToJsonValue(Source.Placa));
    if Source.RENAVAMHasValue then
      Json.ObjAddProp(Result, 'RENAVAM', Self.stringToJsonValue(Source.RENAVAM));
    if Source.TaraHasValue then
      Json.ObjAddProp(Result, 'tara', Self.IntegerToJsonValue(Source.Tara));
    if Source.CapKGHasValue then
      Json.ObjAddProp(Result, 'capKG', Self.IntegerToJsonValue(Source.CapKG));
    if Source.CapM3HasValue then
      Json.ObjAddProp(Result, 'capM3', Self.IntegerToJsonValue(Source.CapM3));
    if Assigned(Source.Prop) then
      Json.ObjAddProp(Result, 'prop', Self.TMdfeSefazVeicReboquePropToJsonValue(Source.Prop));
    if Source.TpCarHasValue then
      Json.ObjAddProp(Result, 'tpCar', Self.stringToJsonValue(Source.TpCar));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboqueToJson(Source: TMdfeSefazVeicReboque): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazVeicReboqueToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboqueFromJsonValue(Source: TJSONValue): TMdfeSefazVeicReboque;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazVeicReboque.Create;
  try
    if Json.ObjContains(Source, 'cInt', JValue) then
      Result.CInt := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'placa', JValue) then
      Result.Placa := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'RENAVAM', JValue) then
      Result.RENAVAM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tara', JValue) then
      Result.Tara := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'capKG', JValue) then
      Result.CapKG := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'capM3', JValue) then
      Result.CapM3 := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prop', JValue) then
      Result.Prop := Self.TMdfeSefazVeicReboquePropFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpCar', JValue) then
      Result.TpCar := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboqueFromJson(Source: string): TMdfeSefazVeicReboque;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazVeicReboqueFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboqueListToJsonValue(Source: TMdfeSefazVeicReboqueList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazVeicReboqueToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboqueListToJson(Source: TMdfeSefazVeicReboqueList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazVeicReboqueListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboqueListFromJsonValue(Source: TJSONValue): TMdfeSefazVeicReboqueList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazVeicReboqueList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazVeicReboqueFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboqueListFromJson(Source: string): TMdfeSefazVeicReboqueList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazVeicReboqueListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacRodoToJsonValue(Source: TMdfeSefazLacRodo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NLacreHasValue then
      Json.ObjAddProp(Result, 'nLacre', Self.stringToJsonValue(Source.NLacre));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacRodoToJson(Source: TMdfeSefazLacRodo): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazLacRodoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacRodoFromJsonValue(Source: TJSONValue): TMdfeSefazLacRodo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazLacRodo.Create;
  try
    if Json.ObjContains(Source, 'nLacre', JValue) then
      Result.NLacre := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacRodoFromJson(Source: string): TMdfeSefazLacRodo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazLacRodoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacRodoListToJsonValue(Source: TMdfeSefazLacRodoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazLacRodoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacRodoListToJson(Source: TMdfeSefazLacRodoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazLacRodoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacRodoListFromJsonValue(Source: TJSONValue): TMdfeSefazLacRodoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazLacRodoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazLacRodoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacRodoListFromJson(Source: string): TMdfeSefazLacRodoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazLacRodoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazRodoToJsonValue(Source: TMdfeSefazRodo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.InfANTT) then
      Json.ObjAddProp(Result, 'infANTT', Self.TMdfeSefazInfANTTToJsonValue(Source.InfANTT));
    if Assigned(Source.VeicTracao) then
      Json.ObjAddProp(Result, 'veicTracao', Self.TMdfeSefazVeicTracaoToJsonValue(Source.VeicTracao));
    if Assigned(Source.VeicReboque) then
      Json.ObjAddProp(Result, 'veicReboque', Self.TMdfeSefazVeicReboqueListToJsonValue(Source.VeicReboque));
    if Source.CodAgPortoHasValue then
      Json.ObjAddProp(Result, 'codAgPorto', Self.stringToJsonValue(Source.CodAgPorto));
    if Assigned(Source.LacRodo) then
      Json.ObjAddProp(Result, 'lacRodo', Self.TMdfeSefazLacRodoListToJsonValue(Source.LacRodo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazRodoToJson(Source: TMdfeSefazRodo): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazRodoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazRodoFromJsonValue(Source: TJSONValue): TMdfeSefazRodo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazRodo.Create;
  try
    if Json.ObjContains(Source, 'infANTT', JValue) then
      Result.InfANTT := Self.TMdfeSefazInfANTTFromJsonValue(JValue);
    if Json.ObjContains(Source, 'veicTracao', JValue) then
      Result.VeicTracao := Self.TMdfeSefazVeicTracaoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'veicReboque', JValue) then
      Result.VeicReboque := Self.TMdfeSefazVeicReboqueListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codAgPorto', JValue) then
      Result.CodAgPorto := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lacRodo', JValue) then
      Result.LacRodo := Self.TMdfeSefazLacRodoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazRodoFromJson(Source: string): TMdfeSefazRodo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazRodoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermCarregToJsonValue(Source: TMdfeSefazInfTermCarreg): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CTermCarregHasValue then
      Json.ObjAddProp(Result, 'cTermCarreg', Self.stringToJsonValue(Source.CTermCarreg));
    if Source.XTermCarregHasValue then
      Json.ObjAddProp(Result, 'xTermCarreg', Self.stringToJsonValue(Source.XTermCarreg));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermCarregToJson(Source: TMdfeSefazInfTermCarreg): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfTermCarregToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermCarregFromJsonValue(Source: TJSONValue): TMdfeSefazInfTermCarreg;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfTermCarreg.Create;
  try
    if Json.ObjContains(Source, 'cTermCarreg', JValue) then
      Result.CTermCarreg := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTermCarreg', JValue) then
      Result.XTermCarreg := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermCarregFromJson(Source: string): TMdfeSefazInfTermCarreg;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfTermCarregFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermCarregListToJsonValue(Source: TMdfeSefazInfTermCarregList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfTermCarregToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermCarregListToJson(Source: TMdfeSefazInfTermCarregList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfTermCarregListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermCarregListFromJsonValue(Source: TJSONValue): TMdfeSefazInfTermCarregList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfTermCarregList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfTermCarregFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermCarregListFromJson(Source: string): TMdfeSefazInfTermCarregList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfTermCarregListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermDescarregToJsonValue(Source: TMdfeSefazInfTermDescarreg): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CTermDescarregHasValue then
      Json.ObjAddProp(Result, 'cTermDescarreg', Self.stringToJsonValue(Source.CTermDescarreg));
    if Source.XTermDescarregHasValue then
      Json.ObjAddProp(Result, 'xTermDescarreg', Self.stringToJsonValue(Source.XTermDescarreg));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermDescarregToJson(Source: TMdfeSefazInfTermDescarreg): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfTermDescarregToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermDescarregFromJsonValue(Source: TJSONValue): TMdfeSefazInfTermDescarreg;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfTermDescarreg.Create;
  try
    if Json.ObjContains(Source, 'cTermDescarreg', JValue) then
      Result.CTermDescarreg := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTermDescarreg', JValue) then
      Result.XTermDescarreg := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermDescarregFromJson(Source: string): TMdfeSefazInfTermDescarreg;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfTermDescarregFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermDescarregListToJsonValue(Source: TMdfeSefazInfTermDescarregList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfTermDescarregToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermDescarregListToJson(Source: TMdfeSefazInfTermDescarregList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfTermDescarregListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermDescarregListFromJsonValue(Source: TJSONValue): TMdfeSefazInfTermDescarregList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfTermDescarregList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfTermDescarregFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermDescarregListFromJson(Source: string): TMdfeSefazInfTermDescarregList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfTermDescarregListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfEmbCombToJsonValue(Source: TMdfeSefazInfEmbComb): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CEmbCombHasValue then
      Json.ObjAddProp(Result, 'cEmbComb', Self.stringToJsonValue(Source.CEmbComb));
    if Source.XBalsaHasValue then
      Json.ObjAddProp(Result, 'xBalsa', Self.stringToJsonValue(Source.XBalsa));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfEmbCombToJson(Source: TMdfeSefazInfEmbComb): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfEmbCombToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfEmbCombFromJsonValue(Source: TJSONValue): TMdfeSefazInfEmbComb;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfEmbComb.Create;
  try
    if Json.ObjContains(Source, 'cEmbComb', JValue) then
      Result.CEmbComb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBalsa', JValue) then
      Result.XBalsa := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfEmbCombFromJson(Source: string): TMdfeSefazInfEmbComb;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfEmbCombFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfEmbCombListToJsonValue(Source: TMdfeSefazInfEmbCombList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfEmbCombToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfEmbCombListToJson(Source: TMdfeSefazInfEmbCombList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfEmbCombListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfEmbCombListFromJsonValue(Source: TJSONValue): TMdfeSefazInfEmbCombList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfEmbCombList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfEmbCombFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfEmbCombListFromJson(Source: string): TMdfeSefazInfEmbCombList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfEmbCombListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidCargaVaziaToJsonValue(Source: TMdfeSefazInfUnidCargaVazia): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.IdUnidCargaVaziaHasValue then
      Json.ObjAddProp(Result, 'idUnidCargaVazia', Self.stringToJsonValue(Source.IdUnidCargaVazia));
    if Source.TpUnidCargaVaziaHasValue then
      Json.ObjAddProp(Result, 'tpUnidCargaVazia', Self.IntegerToJsonValue(Source.TpUnidCargaVazia));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidCargaVaziaToJson(Source: TMdfeSefazInfUnidCargaVazia): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfUnidCargaVaziaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidCargaVaziaFromJsonValue(Source: TJSONValue): TMdfeSefazInfUnidCargaVazia;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfUnidCargaVazia.Create;
  try
    if Json.ObjContains(Source, 'idUnidCargaVazia', JValue) then
      Result.IdUnidCargaVazia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpUnidCargaVazia', JValue) then
      Result.TpUnidCargaVazia := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidCargaVaziaFromJson(Source: string): TMdfeSefazInfUnidCargaVazia;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfUnidCargaVaziaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidCargaVaziaListToJsonValue(Source: TMdfeSefazInfUnidCargaVaziaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfUnidCargaVaziaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidCargaVaziaListToJson(Source: TMdfeSefazInfUnidCargaVaziaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfUnidCargaVaziaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidCargaVaziaListFromJsonValue(Source: TJSONValue): TMdfeSefazInfUnidCargaVaziaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfUnidCargaVaziaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfUnidCargaVaziaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidCargaVaziaListFromJson(Source: string): TMdfeSefazInfUnidCargaVaziaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfUnidCargaVaziaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidTranspVaziaToJsonValue(Source: TMdfeSefazInfUnidTranspVazia): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.IdUnidTranspVaziaHasValue then
      Json.ObjAddProp(Result, 'idUnidTranspVazia', Self.stringToJsonValue(Source.IdUnidTranspVazia));
    if Source.TpUnidTranspVaziaHasValue then
      Json.ObjAddProp(Result, 'tpUnidTranspVazia', Self.IntegerToJsonValue(Source.TpUnidTranspVazia));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidTranspVaziaToJson(Source: TMdfeSefazInfUnidTranspVazia): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfUnidTranspVaziaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidTranspVaziaFromJsonValue(Source: TJSONValue): TMdfeSefazInfUnidTranspVazia;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfUnidTranspVazia.Create;
  try
    if Json.ObjContains(Source, 'idUnidTranspVazia', JValue) then
      Result.IdUnidTranspVazia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpUnidTranspVazia', JValue) then
      Result.TpUnidTranspVazia := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidTranspVaziaFromJson(Source: string): TMdfeSefazInfUnidTranspVazia;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfUnidTranspVaziaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidTranspVaziaListToJsonValue(Source: TMdfeSefazInfUnidTranspVaziaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfUnidTranspVaziaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidTranspVaziaListToJson(Source: TMdfeSefazInfUnidTranspVaziaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfUnidTranspVaziaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidTranspVaziaListFromJsonValue(Source: TJSONValue): TMdfeSefazInfUnidTranspVaziaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfUnidTranspVaziaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfUnidTranspVaziaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidTranspVaziaListFromJson(Source: string): TMdfeSefazInfUnidTranspVaziaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfUnidTranspVaziaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazAquavToJsonValue(Source: TMdfeSefazAquav): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.IrinHasValue then
      Json.ObjAddProp(Result, 'irin', Self.stringToJsonValue(Source.Irin));
    if Source.TpEmbHasValue then
      Json.ObjAddProp(Result, 'tpEmb', Self.stringToJsonValue(Source.TpEmb));
    if Source.CEmbarHasValue then
      Json.ObjAddProp(Result, 'cEmbar', Self.stringToJsonValue(Source.CEmbar));
    if Source.XEmbarHasValue then
      Json.ObjAddProp(Result, 'xEmbar', Self.stringToJsonValue(Source.XEmbar));
    if Source.NViagHasValue then
      Json.ObjAddProp(Result, 'nViag', Self.stringToJsonValue(Source.NViag));
    if Source.CPrtEmbHasValue then
      Json.ObjAddProp(Result, 'cPrtEmb', Self.stringToJsonValue(Source.CPrtEmb));
    if Source.CPrtDestHasValue then
      Json.ObjAddProp(Result, 'cPrtDest', Self.stringToJsonValue(Source.CPrtDest));
    if Source.PrtTransHasValue then
      Json.ObjAddProp(Result, 'prtTrans', Self.stringToJsonValue(Source.PrtTrans));
    if Source.TpNavHasValue then
      Json.ObjAddProp(Result, 'tpNav', Self.IntegerToJsonValue(Source.TpNav));
    if Assigned(Source.InfTermCarreg) then
      Json.ObjAddProp(Result, 'infTermCarreg', Self.TMdfeSefazInfTermCarregListToJsonValue(Source.InfTermCarreg));
    if Assigned(Source.InfTermDescarreg) then
      Json.ObjAddProp(Result, 'infTermDescarreg', Self.TMdfeSefazInfTermDescarregListToJsonValue(Source.InfTermDescarreg));
    if Assigned(Source.InfEmbComb) then
      Json.ObjAddProp(Result, 'infEmbComb', Self.TMdfeSefazInfEmbCombListToJsonValue(Source.InfEmbComb));
    if Assigned(Source.InfUnidCargaVazia) then
      Json.ObjAddProp(Result, 'infUnidCargaVazia', Self.TMdfeSefazInfUnidCargaVaziaListToJsonValue(Source.InfUnidCargaVazia));
    if Assigned(Source.InfUnidTranspVazia) then
      Json.ObjAddProp(Result, 'infUnidTranspVazia', Self.TMdfeSefazInfUnidTranspVaziaListToJsonValue(Source.InfUnidTranspVazia));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazAquavToJson(Source: TMdfeSefazAquav): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazAquavToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazAquavFromJsonValue(Source: TJSONValue): TMdfeSefazAquav;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazAquav.Create;
  try
    if Json.ObjContains(Source, 'irin', JValue) then
      Result.Irin := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpEmb', JValue) then
      Result.TpEmb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cEmbar', JValue) then
      Result.CEmbar := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xEmbar', JValue) then
      Result.XEmbar := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nViag', JValue) then
      Result.NViag := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPrtEmb', JValue) then
      Result.CPrtEmb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPrtDest', JValue) then
      Result.CPrtDest := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prtTrans', JValue) then
      Result.PrtTrans := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpNav', JValue) then
      Result.TpNav := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infTermCarreg', JValue) then
      Result.InfTermCarreg := Self.TMdfeSefazInfTermCarregListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infTermDescarreg', JValue) then
      Result.InfTermDescarreg := Self.TMdfeSefazInfTermDescarregListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infEmbComb', JValue) then
      Result.InfEmbComb := Self.TMdfeSefazInfEmbCombListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidCargaVazia', JValue) then
      Result.InfUnidCargaVazia := Self.TMdfeSefazInfUnidCargaVaziaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidTranspVazia', JValue) then
      Result.InfUnidTranspVazia := Self.TMdfeSefazInfUnidTranspVaziaListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazAquavFromJson(Source: string): TMdfeSefazAquav;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazAquavFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazTremToJsonValue(Source: TMdfeSefazTrem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XPrefHasValue then
      Json.ObjAddProp(Result, 'xPref', Self.stringToJsonValue(Source.XPref));
    if Source.DhTremHasValue then
      Json.ObjAddProp(Result, 'dhTrem', Self.TDateTimeToJsonValue(Source.DhTrem));
    if Source.XOriHasValue then
      Json.ObjAddProp(Result, 'xOri', Self.stringToJsonValue(Source.XOri));
    if Source.XDestHasValue then
      Json.ObjAddProp(Result, 'xDest', Self.stringToJsonValue(Source.XDest));
    if Source.QVagHasValue then
      Json.ObjAddProp(Result, 'qVag', Self.IntegerToJsonValue(Source.QVag));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazTremToJson(Source: TMdfeSefazTrem): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazTremToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazTremFromJsonValue(Source: TJSONValue): TMdfeSefazTrem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazTrem.Create;
  try
    if Json.ObjContains(Source, 'xPref', JValue) then
      Result.XPref := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhTrem', JValue) then
      Result.DhTrem := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xOri', JValue) then
      Result.XOri := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xDest', JValue) then
      Result.XDest := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qVag', JValue) then
      Result.QVag := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazTremFromJson(Source: string): TMdfeSefazTrem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazTremFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVagToJsonValue(Source: TMdfeSefazVag): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.PesoBCHasValue then
      Json.ObjAddProp(Result, 'pesoBC', Self.DoubleToJsonValue(Source.PesoBC));
    if Source.PesoRHasValue then
      Json.ObjAddProp(Result, 'pesoR', Self.DoubleToJsonValue(Source.PesoR));
    if Source.TpVagHasValue then
      Json.ObjAddProp(Result, 'tpVag', Self.stringToJsonValue(Source.TpVag));
    if Source.SerieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.stringToJsonValue(Source.Serie));
    if Source.NVagHasValue then
      Json.ObjAddProp(Result, 'nVag', Self.IntegerToJsonValue(Source.NVag));
    if Source.NSeqHasValue then
      Json.ObjAddProp(Result, 'nSeq', Self.IntegerToJsonValue(Source.NSeq));
    if Source.TUHasValue then
      Json.ObjAddProp(Result, 'TU', Self.DoubleToJsonValue(Source.TU));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVagToJson(Source: TMdfeSefazVag): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazVagToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVagFromJsonValue(Source: TJSONValue): TMdfeSefazVag;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazVag.Create;
  try
    if Json.ObjContains(Source, 'pesoBC', JValue) then
      Result.PesoBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pesoR', JValue) then
      Result.PesoR := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpVag', JValue) then
      Result.TpVag := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.Serie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nVag', JValue) then
      Result.NVag := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nSeq', JValue) then
      Result.NSeq := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'TU', JValue) then
      Result.TU := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVagFromJson(Source: string): TMdfeSefazVag;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazVagFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVagListToJsonValue(Source: TMdfeSefazVagList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazVagToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVagListToJson(Source: TMdfeSefazVagList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazVagListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVagListFromJsonValue(Source: TJSONValue): TMdfeSefazVagList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazVagList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazVagFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVagListFromJson(Source: string): TMdfeSefazVagList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazVagListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazFerrovToJsonValue(Source: TMdfeSefazFerrov): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.Trem) then
      Json.ObjAddProp(Result, 'trem', Self.TMdfeSefazTremToJsonValue(Source.Trem));
    if Assigned(Source.Vag) then
      Json.ObjAddProp(Result, 'vag', Self.TMdfeSefazVagListToJsonValue(Source.Vag));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazFerrovToJson(Source: TMdfeSefazFerrov): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazFerrovToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazFerrovFromJsonValue(Source: TJSONValue): TMdfeSefazFerrov;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazFerrov.Create;
  try
    if Json.ObjContains(Source, 'trem', JValue) then
      Result.Trem := Self.TMdfeSefazTremFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vag', JValue) then
      Result.Vag := Self.TMdfeSefazVagListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazFerrovFromJson(Source: string): TMdfeSefazFerrov;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazFerrovFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfModalToJsonValue(Source: TMdfeSefazInfModal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VersaoModalHasValue then
      Json.ObjAddProp(Result, 'versaoModal', Self.stringToJsonValue(Source.VersaoModal));
    if Assigned(Source.Aereo) then
      Json.ObjAddProp(Result, 'aereo', Self.TMdfeSefazAereoToJsonValue(Source.Aereo));
    if Assigned(Source.Rodo) then
      Json.ObjAddProp(Result, 'rodo', Self.TMdfeSefazRodoToJsonValue(Source.Rodo));
    if Assigned(Source.Aquav) then
      Json.ObjAddProp(Result, 'aquav', Self.TMdfeSefazAquavToJsonValue(Source.Aquav));
    if Assigned(Source.Ferrov) then
      Json.ObjAddProp(Result, 'ferrov', Self.TMdfeSefazFerrovToJsonValue(Source.Ferrov));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfModalToJson(Source: TMdfeSefazInfModal): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfModalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfModalFromJsonValue(Source: TJSONValue): TMdfeSefazInfModal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfModal.Create;
  try
    if Json.ObjContains(Source, 'versaoModal', JValue) then
      Result.VersaoModal := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aereo', JValue) then
      Result.Aereo := Self.TMdfeSefazAereoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'rodo', JValue) then
      Result.Rodo := Self.TMdfeSefazRodoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aquav', JValue) then
      Result.Aquav := Self.TMdfeSefazAquavFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ferrov', JValue) then
      Result.Ferrov := Self.TMdfeSefazFerrovFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfModalFromJson(Source: string): TMdfeSefazInfModal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfModalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidTranspToJsonValue(Source: TMdfeSefazLacUnidTransp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NLacreHasValue then
      Json.ObjAddProp(Result, 'nLacre', Self.stringToJsonValue(Source.NLacre));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidTranspToJson(Source: TMdfeSefazLacUnidTransp): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazLacUnidTranspToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidTranspFromJsonValue(Source: TJSONValue): TMdfeSefazLacUnidTransp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazLacUnidTransp.Create;
  try
    if Json.ObjContains(Source, 'nLacre', JValue) then
      Result.NLacre := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidTranspFromJson(Source: string): TMdfeSefazLacUnidTransp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazLacUnidTranspFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidTranspListToJsonValue(Source: TMdfeSefazLacUnidTranspList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazLacUnidTranspToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidTranspListToJson(Source: TMdfeSefazLacUnidTranspList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazLacUnidTranspListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidTranspListFromJsonValue(Source: TJSONValue): TMdfeSefazLacUnidTranspList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazLacUnidTranspList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazLacUnidTranspFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidTranspListFromJson(Source: string): TMdfeSefazLacUnidTranspList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazLacUnidTranspListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidCargaToJsonValue(Source: TMdfeSefazLacUnidCarga): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NLacreHasValue then
      Json.ObjAddProp(Result, 'nLacre', Self.stringToJsonValue(Source.NLacre));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidCargaToJson(Source: TMdfeSefazLacUnidCarga): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazLacUnidCargaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidCargaFromJsonValue(Source: TJSONValue): TMdfeSefazLacUnidCarga;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazLacUnidCarga.Create;
  try
    if Json.ObjContains(Source, 'nLacre', JValue) then
      Result.NLacre := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidCargaFromJson(Source: string): TMdfeSefazLacUnidCarga;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazLacUnidCargaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidCargaListToJsonValue(Source: TMdfeSefazLacUnidCargaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazLacUnidCargaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidCargaListToJson(Source: TMdfeSefazLacUnidCargaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazLacUnidCargaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidCargaListFromJsonValue(Source: TJSONValue): TMdfeSefazLacUnidCargaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazLacUnidCargaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazLacUnidCargaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidCargaListFromJson(Source: string): TMdfeSefazLacUnidCargaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazLacUnidCargaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazUnidCargaToJsonValue(Source: TMdfeSefazUnidCarga): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpUnidCargaHasValue then
      Json.ObjAddProp(Result, 'tpUnidCarga', Self.IntegerToJsonValue(Source.TpUnidCarga));
    if Source.IdUnidCargaHasValue then
      Json.ObjAddProp(Result, 'idUnidCarga', Self.stringToJsonValue(Source.IdUnidCarga));
    if Assigned(Source.LacUnidCarga) then
      Json.ObjAddProp(Result, 'lacUnidCarga', Self.TMdfeSefazLacUnidCargaListToJsonValue(Source.LacUnidCarga));
    if Source.QtdRatHasValue then
      Json.ObjAddProp(Result, 'qtdRat', Self.DoubleToJsonValue(Source.QtdRat));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazUnidCargaToJson(Source: TMdfeSefazUnidCarga): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazUnidCargaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazUnidCargaFromJsonValue(Source: TJSONValue): TMdfeSefazUnidCarga;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazUnidCarga.Create;
  try
    if Json.ObjContains(Source, 'tpUnidCarga', JValue) then
      Result.TpUnidCarga := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idUnidCarga', JValue) then
      Result.IdUnidCarga := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lacUnidCarga', JValue) then
      Result.LacUnidCarga := Self.TMdfeSefazLacUnidCargaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qtdRat', JValue) then
      Result.QtdRat := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazUnidCargaFromJson(Source: string): TMdfeSefazUnidCarga;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazUnidCargaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazUnidCargaListToJsonValue(Source: TMdfeSefazUnidCargaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazUnidCargaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazUnidCargaListToJson(Source: TMdfeSefazUnidCargaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazUnidCargaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazUnidCargaListFromJsonValue(Source: TJSONValue): TMdfeSefazUnidCargaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazUnidCargaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazUnidCargaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazUnidCargaListFromJson(Source: string): TMdfeSefazUnidCargaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazUnidCargaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazUnidadeTranspToJsonValue(Source: TMdfeSefazUnidadeTransp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpUnidTranspHasValue then
      Json.ObjAddProp(Result, 'tpUnidTransp', Self.IntegerToJsonValue(Source.TpUnidTransp));
    if Source.IdUnidTranspHasValue then
      Json.ObjAddProp(Result, 'idUnidTransp', Self.stringToJsonValue(Source.IdUnidTransp));
    if Assigned(Source.LacUnidTransp) then
      Json.ObjAddProp(Result, 'lacUnidTransp', Self.TMdfeSefazLacUnidTranspListToJsonValue(Source.LacUnidTransp));
    if Assigned(Source.InfUnidCarga) then
      Json.ObjAddProp(Result, 'infUnidCarga', Self.TMdfeSefazUnidCargaListToJsonValue(Source.InfUnidCarga));
    if Source.QtdRatHasValue then
      Json.ObjAddProp(Result, 'qtdRat', Self.DoubleToJsonValue(Source.QtdRat));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazUnidadeTranspToJson(Source: TMdfeSefazUnidadeTransp): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazUnidadeTranspToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazUnidadeTranspFromJsonValue(Source: TJSONValue): TMdfeSefazUnidadeTransp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazUnidadeTransp.Create;
  try
    if Json.ObjContains(Source, 'tpUnidTransp', JValue) then
      Result.TpUnidTransp := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idUnidTransp', JValue) then
      Result.IdUnidTransp := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lacUnidTransp', JValue) then
      Result.LacUnidTransp := Self.TMdfeSefazLacUnidTranspListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidCarga', JValue) then
      Result.InfUnidCarga := Self.TMdfeSefazUnidCargaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qtdRat', JValue) then
      Result.QtdRat := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazUnidadeTranspFromJson(Source: string): TMdfeSefazUnidadeTransp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazUnidadeTranspFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazUnidadeTranspListToJsonValue(Source: TMdfeSefazUnidadeTranspList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazUnidadeTranspToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazUnidadeTranspListToJson(Source: TMdfeSefazUnidadeTranspList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazUnidadeTranspListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazUnidadeTranspListFromJsonValue(Source: TJSONValue): TMdfeSefazUnidadeTranspList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazUnidadeTranspList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazUnidadeTranspFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazUnidadeTranspListFromJson(Source: string): TMdfeSefazUnidadeTranspList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazUnidadeTranspListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazPeriToJsonValue(Source: TMdfeSefazPeri): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NONUHasValue then
      Json.ObjAddProp(Result, 'nONU', Self.stringToJsonValue(Source.NONU));
    if Source.XNomeAEHasValue then
      Json.ObjAddProp(Result, 'xNomeAE', Self.stringToJsonValue(Source.XNomeAE));
    if Source.XClaRiscoHasValue then
      Json.ObjAddProp(Result, 'xClaRisco', Self.stringToJsonValue(Source.XClaRisco));
    if Source.GrEmbHasValue then
      Json.ObjAddProp(Result, 'grEmb', Self.stringToJsonValue(Source.GrEmb));
    if Source.QTotProdHasValue then
      Json.ObjAddProp(Result, 'qTotProd', Self.stringToJsonValue(Source.QTotProd));
    if Source.QVolTipoHasValue then
      Json.ObjAddProp(Result, 'qVolTipo', Self.stringToJsonValue(Source.QVolTipo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazPeriToJson(Source: TMdfeSefazPeri): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazPeriToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazPeriFromJsonValue(Source: TJSONValue): TMdfeSefazPeri;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazPeri.Create;
  try
    if Json.ObjContains(Source, 'nONU', JValue) then
      Result.NONU := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNomeAE', JValue) then
      Result.XNomeAE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xClaRisco', JValue) then
      Result.XClaRisco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'grEmb', JValue) then
      Result.GrEmb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTotProd', JValue) then
      Result.QTotProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qVolTipo', JValue) then
      Result.QVolTipo := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazPeriFromJson(Source: string): TMdfeSefazPeri;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazPeriFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazPeriListToJsonValue(Source: TMdfeSefazPeriList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazPeriToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazPeriListToJson(Source: TMdfeSefazPeriList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazPeriListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazPeriListFromJsonValue(Source: TJSONValue): TMdfeSefazPeriList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazPeriList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazPeriFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazPeriListFromJson(Source: string): TMdfeSefazPeriList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazPeriListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfEntregaParcialToJsonValue(Source: TMdfeSefazInfEntregaParcial): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.QtdTotalHasValue then
      Json.ObjAddProp(Result, 'qtdTotal', Self.DoubleToJsonValue(Source.QtdTotal));
    if Source.QtdParcialHasValue then
      Json.ObjAddProp(Result, 'qtdParcial', Self.DoubleToJsonValue(Source.QtdParcial));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfEntregaParcialToJson(Source: TMdfeSefazInfEntregaParcial): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfEntregaParcialToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfEntregaParcialFromJsonValue(Source: TJSONValue): TMdfeSefazInfEntregaParcial;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfEntregaParcial.Create;
  try
    if Json.ObjContains(Source, 'qtdTotal', JValue) then
      Result.QtdTotal := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qtdParcial', JValue) then
      Result.QtdParcial := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfEntregaParcialFromJson(Source: string): TMdfeSefazInfEntregaParcial;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfEntregaParcialFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfCTeToJsonValue(Source: TMdfeSefazInfCTe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.ChCTeHasValue then
      Json.ObjAddProp(Result, 'chCTe', Self.stringToJsonValue(Source.ChCTe));
    if Source.SegCodBarraHasValue then
      Json.ObjAddProp(Result, 'SegCodBarra', Self.stringToJsonValue(Source.SegCodBarra));
    if Source.IndReentregaHasValue then
      Json.ObjAddProp(Result, 'indReentrega', Self.IntegerToJsonValue(Source.IndReentrega));
    if Assigned(Source.InfUnidTransp) then
      Json.ObjAddProp(Result, 'infUnidTransp', Self.TMdfeSefazUnidadeTranspListToJsonValue(Source.InfUnidTransp));
    if Assigned(Source.Peri) then
      Json.ObjAddProp(Result, 'peri', Self.TMdfeSefazPeriListToJsonValue(Source.Peri));
    if Assigned(Source.InfEntregaParcial) then
      Json.ObjAddProp(Result, 'infEntregaParcial', Self.TMdfeSefazInfEntregaParcialToJsonValue(Source.InfEntregaParcial));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfCTeToJson(Source: TMdfeSefazInfCTe): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfCTeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfCTeFromJsonValue(Source: TJSONValue): TMdfeSefazInfCTe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfCTe.Create;
  try
    if Json.ObjContains(Source, 'chCTe', JValue) then
      Result.ChCTe := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'SegCodBarra', JValue) then
      Result.SegCodBarra := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indReentrega', JValue) then
      Result.IndReentrega := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidTransp', JValue) then
      Result.InfUnidTransp := Self.TMdfeSefazUnidadeTranspListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'peri', JValue) then
      Result.Peri := Self.TMdfeSefazPeriListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infEntregaParcial', JValue) then
      Result.InfEntregaParcial := Self.TMdfeSefazInfEntregaParcialFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfCTeFromJson(Source: string): TMdfeSefazInfCTe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfCTeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfCTeListToJsonValue(Source: TMdfeSefazInfCTeList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfCTeToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfCTeListToJson(Source: TMdfeSefazInfCTeList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfCTeListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfCTeListFromJsonValue(Source: TJSONValue): TMdfeSefazInfCTeList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfCTeList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfCTeFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfCTeListFromJson(Source: string): TMdfeSefazInfCTeList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfCTeListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFePeriToJsonValue(Source: TMdfeSefazInfNFePeri): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NONUHasValue then
      Json.ObjAddProp(Result, 'nONU', Self.stringToJsonValue(Source.NONU));
    if Source.XNomeAEHasValue then
      Json.ObjAddProp(Result, 'xNomeAE', Self.stringToJsonValue(Source.XNomeAE));
    if Source.XClaRiscoHasValue then
      Json.ObjAddProp(Result, 'xClaRisco', Self.stringToJsonValue(Source.XClaRisco));
    if Source.GrEmbHasValue then
      Json.ObjAddProp(Result, 'grEmb', Self.stringToJsonValue(Source.GrEmb));
    if Source.QTotProdHasValue then
      Json.ObjAddProp(Result, 'qTotProd', Self.stringToJsonValue(Source.QTotProd));
    if Source.QVolTipoHasValue then
      Json.ObjAddProp(Result, 'qVolTipo', Self.stringToJsonValue(Source.QVolTipo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFePeriToJson(Source: TMdfeSefazInfNFePeri): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfNFePeriToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFePeriFromJsonValue(Source: TJSONValue): TMdfeSefazInfNFePeri;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfNFePeri.Create;
  try
    if Json.ObjContains(Source, 'nONU', JValue) then
      Result.NONU := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNomeAE', JValue) then
      Result.XNomeAE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xClaRisco', JValue) then
      Result.XClaRisco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'grEmb', JValue) then
      Result.GrEmb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTotProd', JValue) then
      Result.QTotProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qVolTipo', JValue) then
      Result.QVolTipo := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFePeriFromJson(Source: string): TMdfeSefazInfNFePeri;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfNFePeriFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFePeriListToJsonValue(Source: TMdfeSefazInfNFePeriList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfNFePeriToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFePeriListToJson(Source: TMdfeSefazInfNFePeriList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfNFePeriListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFePeriListFromJsonValue(Source: TJSONValue): TMdfeSefazInfNFePeriList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfNFePeriList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfNFePeriFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFePeriListFromJson(Source: string): TMdfeSefazInfNFePeriList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfNFePeriListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFeToJsonValue(Source: TMdfeSefazInfNFe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.ChNFeHasValue then
      Json.ObjAddProp(Result, 'chNFe', Self.stringToJsonValue(Source.ChNFe));
    if Source.SegCodBarraHasValue then
      Json.ObjAddProp(Result, 'SegCodBarra', Self.stringToJsonValue(Source.SegCodBarra));
    if Source.IndReentregaHasValue then
      Json.ObjAddProp(Result, 'indReentrega', Self.IntegerToJsonValue(Source.IndReentrega));
    if Assigned(Source.InfUnidTransp) then
      Json.ObjAddProp(Result, 'infUnidTransp', Self.TMdfeSefazUnidadeTranspListToJsonValue(Source.InfUnidTransp));
    if Assigned(Source.Peri) then
      Json.ObjAddProp(Result, 'peri', Self.TMdfeSefazInfNFePeriListToJsonValue(Source.Peri));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFeToJson(Source: TMdfeSefazInfNFe): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfNFeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFeFromJsonValue(Source: TJSONValue): TMdfeSefazInfNFe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfNFe.Create;
  try
    if Json.ObjContains(Source, 'chNFe', JValue) then
      Result.ChNFe := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'SegCodBarra', JValue) then
      Result.SegCodBarra := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indReentrega', JValue) then
      Result.IndReentrega := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidTransp', JValue) then
      Result.InfUnidTransp := Self.TMdfeSefazUnidadeTranspListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'peri', JValue) then
      Result.Peri := Self.TMdfeSefazInfNFePeriListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFeFromJson(Source: string): TMdfeSefazInfNFe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfNFeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFeListToJsonValue(Source: TMdfeSefazInfNFeList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfNFeToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFeListToJson(Source: TMdfeSefazInfNFeList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfNFeListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFeListFromJsonValue(Source: TJSONValue): TMdfeSefazInfNFeList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfNFeList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfNFeFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFeListFromJson(Source: string): TMdfeSefazInfNFeList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfNFeListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspPeriToJsonValue(Source: TMdfeSefazInfMDFeTranspPeri): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NONUHasValue then
      Json.ObjAddProp(Result, 'nONU', Self.stringToJsonValue(Source.NONU));
    if Source.XNomeAEHasValue then
      Json.ObjAddProp(Result, 'xNomeAE', Self.stringToJsonValue(Source.XNomeAE));
    if Source.XClaRiscoHasValue then
      Json.ObjAddProp(Result, 'xClaRisco', Self.stringToJsonValue(Source.XClaRisco));
    if Source.GrEmbHasValue then
      Json.ObjAddProp(Result, 'grEmb', Self.stringToJsonValue(Source.GrEmb));
    if Source.QTotProdHasValue then
      Json.ObjAddProp(Result, 'qTotProd', Self.stringToJsonValue(Source.QTotProd));
    if Source.QVolTipoHasValue then
      Json.ObjAddProp(Result, 'qVolTipo', Self.stringToJsonValue(Source.QVolTipo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspPeriToJson(Source: TMdfeSefazInfMDFeTranspPeri): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMDFeTranspPeriToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspPeriFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeTranspPeri;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMDFeTranspPeri.Create;
  try
    if Json.ObjContains(Source, 'nONU', JValue) then
      Result.NONU := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNomeAE', JValue) then
      Result.XNomeAE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xClaRisco', JValue) then
      Result.XClaRisco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'grEmb', JValue) then
      Result.GrEmb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTotProd', JValue) then
      Result.QTotProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qVolTipo', JValue) then
      Result.QVolTipo := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspPeriFromJson(Source: string): TMdfeSefazInfMDFeTranspPeri;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMDFeTranspPeriFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspPeriListToJsonValue(Source: TMdfeSefazInfMDFeTranspPeriList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfMDFeTranspPeriToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspPeriListToJson(Source: TMdfeSefazInfMDFeTranspPeriList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMDFeTranspPeriListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspPeriListFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeTranspPeriList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMDFeTranspPeriList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfMDFeTranspPeriFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspPeriListFromJson(Source: string): TMdfeSefazInfMDFeTranspPeriList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMDFeTranspPeriListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspToJsonValue(Source: TMdfeSefazInfMDFeTransp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.ChMDFeHasValue then
      Json.ObjAddProp(Result, 'chMDFe', Self.stringToJsonValue(Source.ChMDFe));
    if Source.IndReentregaHasValue then
      Json.ObjAddProp(Result, 'indReentrega', Self.IntegerToJsonValue(Source.IndReentrega));
    if Assigned(Source.InfUnidTransp) then
      Json.ObjAddProp(Result, 'infUnidTransp', Self.TMdfeSefazUnidadeTranspListToJsonValue(Source.InfUnidTransp));
    if Assigned(Source.Peri) then
      Json.ObjAddProp(Result, 'peri', Self.TMdfeSefazInfMDFeTranspPeriListToJsonValue(Source.Peri));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspToJson(Source: TMdfeSefazInfMDFeTransp): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMDFeTranspToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeTransp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMDFeTransp.Create;
  try
    if Json.ObjContains(Source, 'chMDFe', JValue) then
      Result.ChMDFe := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indReentrega', JValue) then
      Result.IndReentrega := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidTransp', JValue) then
      Result.InfUnidTransp := Self.TMdfeSefazUnidadeTranspListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'peri', JValue) then
      Result.Peri := Self.TMdfeSefazInfMDFeTranspPeriListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspFromJson(Source: string): TMdfeSefazInfMDFeTransp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMDFeTranspFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspListToJsonValue(Source: TMdfeSefazInfMDFeTranspList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfMDFeTranspToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspListToJson(Source: TMdfeSefazInfMDFeTranspList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMDFeTranspListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspListFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeTranspList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMDFeTranspList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfMDFeTranspFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspListFromJson(Source: string): TMdfeSefazInfMDFeTranspList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMDFeTranspListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunDescargaToJsonValue(Source: TMdfeSefazInfMunDescarga): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CMunDescargaHasValue then
      Json.ObjAddProp(Result, 'cMunDescarga', Self.IntegerToJsonValue(Source.CMunDescarga));
    if Source.XMunDescargaHasValue then
      Json.ObjAddProp(Result, 'xMunDescarga', Self.stringToJsonValue(Source.XMunDescarga));
    if Assigned(Source.InfCTe) then
      Json.ObjAddProp(Result, 'infCTe', Self.TMdfeSefazInfCTeListToJsonValue(Source.InfCTe));
    if Assigned(Source.InfNFe) then
      Json.ObjAddProp(Result, 'infNFe', Self.TMdfeSefazInfNFeListToJsonValue(Source.InfNFe));
    if Assigned(Source.InfMDFeTransp) then
      Json.ObjAddProp(Result, 'infMDFeTransp', Self.TMdfeSefazInfMDFeTranspListToJsonValue(Source.InfMDFeTransp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunDescargaToJson(Source: TMdfeSefazInfMunDescarga): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMunDescargaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunDescargaFromJsonValue(Source: TJSONValue): TMdfeSefazInfMunDescarga;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMunDescarga.Create;
  try
    if Json.ObjContains(Source, 'cMunDescarga', JValue) then
      Result.CMunDescarga := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMunDescarga', JValue) then
      Result.XMunDescarga := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCTe', JValue) then
      Result.InfCTe := Self.TMdfeSefazInfCTeListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infNFe', JValue) then
      Result.InfNFe := Self.TMdfeSefazInfNFeListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infMDFeTransp', JValue) then
      Result.InfMDFeTransp := Self.TMdfeSefazInfMDFeTranspListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunDescargaFromJson(Source: string): TMdfeSefazInfMunDescarga;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMunDescargaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunDescargaListToJsonValue(Source: TMdfeSefazInfMunDescargaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfMunDescargaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunDescargaListToJson(Source: TMdfeSefazInfMunDescargaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMunDescargaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunDescargaListFromJsonValue(Source: TJSONValue): TMdfeSefazInfMunDescargaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMunDescargaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfMunDescargaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunDescargaListFromJson(Source: string): TMdfeSefazInfMunDescargaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMunDescargaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfDocToJsonValue(Source: TMdfeSefazInfDoc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.InfMunDescarga) then
      Json.ObjAddProp(Result, 'infMunDescarga', Self.TMdfeSefazInfMunDescargaListToJsonValue(Source.InfMunDescarga));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfDocToJson(Source: TMdfeSefazInfDoc): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfDocToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfDocFromJsonValue(Source: TJSONValue): TMdfeSefazInfDoc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfDoc.Create;
  try
    if Json.ObjContains(Source, 'infMunDescarga', JValue) then
      Result.InfMunDescarga := Self.TMdfeSefazInfMunDescargaListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfDocFromJson(Source: string): TMdfeSefazInfDoc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfDocFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfRespToJsonValue(Source: TMdfeSefazInfResp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.RespSegHasValue then
      Json.ObjAddProp(Result, 'respSeg', Self.IntegerToJsonValue(Source.RespSeg));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfRespToJson(Source: TMdfeSefazInfResp): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfRespToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfRespFromJsonValue(Source: TJSONValue): TMdfeSefazInfResp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfResp.Create;
  try
    if Json.ObjContains(Source, 'respSeg', JValue) then
      Result.RespSeg := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfRespFromJson(Source: string): TMdfeSefazInfResp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfRespFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfSegToJsonValue(Source: TMdfeSefazInfSeg): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XSegHasValue then
      Json.ObjAddProp(Result, 'xSeg', Self.stringToJsonValue(Source.XSeg));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfSegToJson(Source: TMdfeSefazInfSeg): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfSegToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfSegFromJsonValue(Source: TJSONValue): TMdfeSefazInfSeg;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfSeg.Create;
  try
    if Json.ObjContains(Source, 'xSeg', JValue) then
      Result.XSeg := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfSegFromJson(Source: string): TMdfeSefazInfSeg;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfSegFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazSegToJsonValue(Source: TMdfeSefazSeg): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.InfResp) then
      Json.ObjAddProp(Result, 'infResp', Self.TMdfeSefazInfRespToJsonValue(Source.InfResp));
    if Assigned(Source.InfSeg) then
      Json.ObjAddProp(Result, 'infSeg', Self.TMdfeSefazInfSegToJsonValue(Source.InfSeg));
    if Source.NApolHasValue then
      Json.ObjAddProp(Result, 'nApol', Self.stringToJsonValue(Source.NApol));
    if Assigned(Source.NAver) then
      Json.ObjAddProp(Result, 'nAver', Self.stringListToJsonValue(Source.NAver));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazSegToJson(Source: TMdfeSefazSeg): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazSegToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazSegFromJsonValue(Source: TJSONValue): TMdfeSefazSeg;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazSeg.Create;
  try
    if Json.ObjContains(Source, 'infResp', JValue) then
      Result.InfResp := Self.TMdfeSefazInfRespFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infSeg', JValue) then
      Result.InfSeg := Self.TMdfeSefazInfSegFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nApol', JValue) then
      Result.NApol := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nAver', JValue) then
      Result.NAver := Self.stringListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazSegFromJson(Source: string): TMdfeSefazSeg;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazSegFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazSegListToJsonValue(Source: TMdfeSefazSegList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazSegToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazSegListToJson(Source: TMdfeSefazSegList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazSegListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazSegListFromJsonValue(Source: TJSONValue): TMdfeSefazSegList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazSegList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazSegFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazSegListFromJson(Source: string): TMdfeSefazSegList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazSegListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfLocalCarregaToJsonValue(Source: TMdfeSefazInfLocalCarrega): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.IntegerToJsonValue(Source.CEP));
    if Source.LatitudeHasValue then
      Json.ObjAddProp(Result, 'latitude', Self.DoubleToJsonValue(Source.Latitude));
    if Source.LongitudeHasValue then
      Json.ObjAddProp(Result, 'longitude', Self.DoubleToJsonValue(Source.Longitude));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfLocalCarregaToJson(Source: TMdfeSefazInfLocalCarrega): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfLocalCarregaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfLocalCarregaFromJsonValue(Source: TJSONValue): TMdfeSefazInfLocalCarrega;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfLocalCarrega.Create;
  try
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'latitude', JValue) then
      Result.Latitude := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'longitude', JValue) then
      Result.Longitude := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfLocalCarregaFromJson(Source: string): TMdfeSefazInfLocalCarrega;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfLocalCarregaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfLocalDescarregaToJsonValue(Source: TMdfeSefazInfLocalDescarrega): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.IntegerToJsonValue(Source.CEP));
    if Source.LatitudeHasValue then
      Json.ObjAddProp(Result, 'latitude', Self.DoubleToJsonValue(Source.Latitude));
    if Source.LongitudeHasValue then
      Json.ObjAddProp(Result, 'longitude', Self.DoubleToJsonValue(Source.Longitude));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfLocalDescarregaToJson(Source: TMdfeSefazInfLocalDescarrega): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfLocalDescarregaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfLocalDescarregaFromJsonValue(Source: TJSONValue): TMdfeSefazInfLocalDescarrega;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfLocalDescarrega.Create;
  try
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'latitude', JValue) then
      Result.Latitude := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'longitude', JValue) then
      Result.Longitude := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfLocalDescarregaFromJson(Source: string): TMdfeSefazInfLocalDescarrega;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfLocalDescarregaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfLotacaoToJsonValue(Source: TMdfeSefazInfLotacao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.InfLocalCarrega) then
      Json.ObjAddProp(Result, 'infLocalCarrega', Self.TMdfeSefazInfLocalCarregaToJsonValue(Source.InfLocalCarrega));
    if Assigned(Source.InfLocalDescarrega) then
      Json.ObjAddProp(Result, 'infLocalDescarrega', Self.TMdfeSefazInfLocalDescarregaToJsonValue(Source.InfLocalDescarrega));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfLotacaoToJson(Source: TMdfeSefazInfLotacao): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfLotacaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfLotacaoFromJsonValue(Source: TJSONValue): TMdfeSefazInfLotacao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfLotacao.Create;
  try
    if Json.ObjContains(Source, 'infLocalCarrega', JValue) then
      Result.InfLocalCarrega := Self.TMdfeSefazInfLocalCarregaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infLocalDescarrega', JValue) then
      Result.InfLocalDescarrega := Self.TMdfeSefazInfLocalDescarregaFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfLotacaoFromJson(Source: string): TMdfeSefazInfLotacao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfLotacaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazProdPredToJsonValue(Source: TMdfeSefazProdPred): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpCargaHasValue then
      Json.ObjAddProp(Result, 'tpCarga', Self.stringToJsonValue(Source.TpCarga));
    if Source.XProdHasValue then
      Json.ObjAddProp(Result, 'xProd', Self.stringToJsonValue(Source.XProd));
    if Source.CEANHasValue then
      Json.ObjAddProp(Result, 'cEAN', Self.stringToJsonValue(Source.CEAN));
    if Source.NCMHasValue then
      Json.ObjAddProp(Result, 'NCM', Self.stringToJsonValue(Source.NCM));
    if Assigned(Source.InfLotacao) then
      Json.ObjAddProp(Result, 'infLotacao', Self.TMdfeSefazInfLotacaoToJsonValue(Source.InfLotacao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazProdPredToJson(Source: TMdfeSefazProdPred): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazProdPredToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazProdPredFromJsonValue(Source: TJSONValue): TMdfeSefazProdPred;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazProdPred.Create;
  try
    if Json.ObjContains(Source, 'tpCarga', JValue) then
      Result.TpCarga := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xProd', JValue) then
      Result.XProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cEAN', JValue) then
      Result.CEAN := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'NCM', JValue) then
      Result.NCM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infLotacao', JValue) then
      Result.InfLotacao := Self.TMdfeSefazInfLotacaoFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazProdPredFromJson(Source: string): TMdfeSefazProdPred;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazProdPredFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazTotToJsonValue(Source: TMdfeSefazTot): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.QCTeHasValue then
      Json.ObjAddProp(Result, 'qCTe', Self.IntegerToJsonValue(Source.QCTe));
    if Source.QNFeHasValue then
      Json.ObjAddProp(Result, 'qNFe', Self.IntegerToJsonValue(Source.QNFe));
    if Source.QMDFeHasValue then
      Json.ObjAddProp(Result, 'qMDFe', Self.IntegerToJsonValue(Source.QMDFe));
    if Source.VCargaHasValue then
      Json.ObjAddProp(Result, 'vCarga', Self.DoubleToJsonValue(Source.VCarga));
    if Source.CUnidHasValue then
      Json.ObjAddProp(Result, 'cUnid', Self.stringToJsonValue(Source.CUnid));
    if Source.QCargaHasValue then
      Json.ObjAddProp(Result, 'qCarga', Self.DoubleToJsonValue(Source.QCarga));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazTotToJson(Source: TMdfeSefazTot): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazTotToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazTotFromJsonValue(Source: TJSONValue): TMdfeSefazTot;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazTot.Create;
  try
    if Json.ObjContains(Source, 'qCTe', JValue) then
      Result.QCTe := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qNFe', JValue) then
      Result.QNFe := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qMDFe', JValue) then
      Result.QMDFe := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCarga', JValue) then
      Result.VCarga := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cUnid', JValue) then
      Result.CUnid := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qCarga', JValue) then
      Result.QCarga := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazTotFromJson(Source: string): TMdfeSefazTot;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazTotFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacresToJsonValue(Source: TMdfeSefazLacres): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NLacreHasValue then
      Json.ObjAddProp(Result, 'nLacre', Self.stringToJsonValue(Source.NLacre));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacresToJson(Source: TMdfeSefazLacres): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazLacresToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacresFromJsonValue(Source: TJSONValue): TMdfeSefazLacres;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazLacres.Create;
  try
    if Json.ObjContains(Source, 'nLacre', JValue) then
      Result.NLacre := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacresFromJson(Source: string): TMdfeSefazLacres;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazLacresFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacresListToJsonValue(Source: TMdfeSefazLacresList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazLacresToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacresListToJson(Source: TMdfeSefazLacresList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazLacresListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacresListFromJsonValue(Source: TJSONValue): TMdfeSefazLacresList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazLacresList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazLacresFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacresListFromJson(Source: string): TMdfeSefazLacresList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazLacresListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazAutXMLToJsonValue(Source: TMdfeSefazAutXML): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazAutXMLToJson(Source: TMdfeSefazAutXML): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazAutXMLToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazAutXMLFromJsonValue(Source: TJSONValue): TMdfeSefazAutXML;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazAutXML.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazAutXMLFromJson(Source: string): TMdfeSefazAutXML;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazAutXMLFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazAutXMLListToJsonValue(Source: TMdfeSefazAutXMLList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazAutXMLToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazAutXMLListToJson(Source: TMdfeSefazAutXMLList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazAutXMLListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazAutXMLListFromJsonValue(Source: TJSONValue): TMdfeSefazAutXMLList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazAutXMLList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazAutXMLFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazAutXMLListFromJson(Source: string): TMdfeSefazAutXMLList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazAutXMLListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfAdicToJsonValue(Source: TMdfeSefazInfAdic): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.InfAdFiscoHasValue then
      Json.ObjAddProp(Result, 'infAdFisco', Self.stringToJsonValue(Source.InfAdFisco));
    if Source.InfCplHasValue then
      Json.ObjAddProp(Result, 'infCpl', Self.stringToJsonValue(Source.InfCpl));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfAdicToJson(Source: TMdfeSefazInfAdic): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfAdicToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfAdicFromJsonValue(Source: TJSONValue): TMdfeSefazInfAdic;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfAdic.Create;
  try
    if Json.ObjContains(Source, 'infAdFisco', JValue) then
      Result.InfAdFisco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCpl', JValue) then
      Result.InfCpl := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfAdicFromJson(Source: string): TMdfeSefazInfAdic;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfAdicFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazRespTecToJsonValue(Source: TMdfeSefazRespTec): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.XContatoHasValue then
      Json.ObjAddProp(Result, 'xContato', Self.stringToJsonValue(Source.XContato));
    if Source.EmailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.Email));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
    if Source.IdCSRTHasValue then
      Json.ObjAddProp(Result, 'idCSRT', Self.IntegerToJsonValue(Source.IdCSRT));
    if Source.HashCSRTHasValue then
      Json.ObjAddProp(Result, 'hashCSRT', Self.stringToJsonValue(Source.HashCSRT));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazRespTecToJson(Source: TMdfeSefazRespTec): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazRespTecToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazRespTecFromJsonValue(Source: TJSONValue): TMdfeSefazRespTec;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazRespTec.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xContato', JValue) then
      Result.XContato := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.Email := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idCSRT', JValue) then
      Result.IdCSRT := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'hashCSRT', JValue) then
      Result.HashCSRT := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazRespTecFromJson(Source: string): TMdfeSefazRespTec;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazRespTecFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfSolicNFFToJsonValue(Source: TMdfeSefazInfSolicNFF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XSolicHasValue then
      Json.ObjAddProp(Result, 'xSolic', Self.stringToJsonValue(Source.XSolic));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfSolicNFFToJson(Source: TMdfeSefazInfSolicNFF): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfSolicNFFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfSolicNFFFromJsonValue(Source: TJSONValue): TMdfeSefazInfSolicNFF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfSolicNFF.Create;
  try
    if Json.ObjContains(Source, 'xSolic', JValue) then
      Result.XSolic := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfSolicNFFFromJson(Source: string): TMdfeSefazInfSolicNFF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfSolicNFFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeToJsonValue(Source: TMdfeSefazInfMDFe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VersaoHasValue then
      Json.ObjAddProp(Result, 'versao', Self.stringToJsonValue(Source.Versao));
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'Id', Self.stringToJsonValue(Source.Id));
    if Assigned(Source.Ide) then
      Json.ObjAddProp(Result, 'ide', Self.TMdfeSefazIdeToJsonValue(Source.Ide));
    if Assigned(Source.Emit) then
      Json.ObjAddProp(Result, 'emit', Self.TMdfeSefazEmitToJsonValue(Source.Emit));
    if Assigned(Source.InfModal) then
      Json.ObjAddProp(Result, 'infModal', Self.TMdfeSefazInfModalToJsonValue(Source.InfModal));
    if Assigned(Source.InfDoc) then
      Json.ObjAddProp(Result, 'infDoc', Self.TMdfeSefazInfDocToJsonValue(Source.InfDoc));
    if Assigned(Source.Seg) then
      Json.ObjAddProp(Result, 'seg', Self.TMdfeSefazSegListToJsonValue(Source.Seg));
    if Assigned(Source.ProdPred) then
      Json.ObjAddProp(Result, 'prodPred', Self.TMdfeSefazProdPredToJsonValue(Source.ProdPred));
    if Assigned(Source.Tot) then
      Json.ObjAddProp(Result, 'tot', Self.TMdfeSefazTotToJsonValue(Source.Tot));
    if Assigned(Source.Lacres) then
      Json.ObjAddProp(Result, 'lacres', Self.TMdfeSefazLacresListToJsonValue(Source.Lacres));
    if Assigned(Source.AutXML) then
      Json.ObjAddProp(Result, 'autXML', Self.TMdfeSefazAutXMLListToJsonValue(Source.AutXML));
    if Assigned(Source.InfAdic) then
      Json.ObjAddProp(Result, 'infAdic', Self.TMdfeSefazInfAdicToJsonValue(Source.InfAdic));
    if Assigned(Source.InfRespTec) then
      Json.ObjAddProp(Result, 'infRespTec', Self.TMdfeSefazRespTecToJsonValue(Source.InfRespTec));
    if Assigned(Source.InfSolicNFF) then
      Json.ObjAddProp(Result, 'infSolicNFF', Self.TMdfeSefazInfSolicNFFToJsonValue(Source.InfSolicNFF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeToJson(Source: TMdfeSefazInfMDFe): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMDFeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMDFe.Create;
  try
    if Json.ObjContains(Source, 'versao', JValue) then
      Result.Versao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ide', JValue) then
      Result.Ide := Self.TMdfeSefazIdeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'emit', JValue) then
      Result.Emit := Self.TMdfeSefazEmitFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infModal', JValue) then
      Result.InfModal := Self.TMdfeSefazInfModalFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infDoc', JValue) then
      Result.InfDoc := Self.TMdfeSefazInfDocFromJsonValue(JValue);
    if Json.ObjContains(Source, 'seg', JValue) then
      Result.Seg := Self.TMdfeSefazSegListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prodPred', JValue) then
      Result.ProdPred := Self.TMdfeSefazProdPredFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tot', JValue) then
      Result.Tot := Self.TMdfeSefazTotFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lacres', JValue) then
      Result.Lacres := Self.TMdfeSefazLacresListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autXML', JValue) then
      Result.AutXML := Self.TMdfeSefazAutXMLListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infAdic', JValue) then
      Result.InfAdic := Self.TMdfeSefazInfAdicFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infRespTec', JValue) then
      Result.InfRespTec := Self.TMdfeSefazRespTecFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infSolicNFF', JValue) then
      Result.InfSolicNFF := Self.TMdfeSefazInfSolicNFFFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeFromJson(Source: string): TMdfeSefazInfMDFe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMDFeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeSuplToJsonValue(Source: TMdfeSefazInfMDFeSupl): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.QrCodMDFeHasValue then
      Json.ObjAddProp(Result, 'qrCodMDFe', Self.stringToJsonValue(Source.QrCodMDFe));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeSuplToJson(Source: TMdfeSefazInfMDFeSupl): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMDFeSuplToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeSuplFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeSupl;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMDFeSupl.Create;
  try
    if Json.ObjContains(Source, 'qrCodMDFe', JValue) then
      Result.QrCodMDFe := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeSuplFromJson(Source: string): TMdfeSefazInfMDFeSupl;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMDFeSuplFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoToJsonValue(Source: TMdfePedidoEmissao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.InfMDFe) then
      Json.ObjAddProp(Result, 'infMDFe', Self.TMdfeSefazInfMDFeToJsonValue(Source.InfMDFe));
    if Assigned(Source.InfMDFeSupl) then
      Json.ObjAddProp(Result, 'infMDFeSupl', Self.TMdfeSefazInfMDFeSuplToJsonValue(Source.InfMDFeSupl));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.ReferenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.Referencia));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoToJson(Source: TMdfePedidoEmissao): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfePedidoEmissaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoFromJsonValue(Source: TJSONValue): TMdfePedidoEmissao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfePedidoEmissao.Create;
  try
    if Json.ObjContains(Source, 'infMDFe', JValue) then
      Result.InfMDFe := Self.TMdfeSefazInfMDFeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infMDFeSupl', JValue) then
      Result.InfMDFeSupl := Self.TMdfeSefazInfMDFeSuplFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.Referencia := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoFromJson(Source: string): TMdfePedidoEmissao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfePedidoEmissaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoListToJsonValue(Source: TMdfePedidoEmissaoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfePedidoEmissaoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoListToJson(Source: TMdfePedidoEmissaoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfePedidoEmissaoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoListFromJsonValue(Source: TJSONValue): TMdfePedidoEmissaoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfePedidoEmissaoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfePedidoEmissaoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoListFromJson(Source: string): TMdfePedidoEmissaoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfePedidoEmissaoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoLoteToJsonValue(Source: TMdfePedidoEmissaoLote): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.Documentos) then
      Json.ObjAddProp(Result, 'documentos', Self.TMdfePedidoEmissaoListToJsonValue(Source.Documentos));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.ReferenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.Referencia));
    if Source.IdLoteHasValue then
      Json.ObjAddProp(Result, 'id_lote', Self.stringToJsonValue(Source.IdLote));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoLoteToJson(Source: TMdfePedidoEmissaoLote): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfePedidoEmissaoLoteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoLoteFromJsonValue(Source: TJSONValue): TMdfePedidoEmissaoLote;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfePedidoEmissaoLote.Create;
  try
    if Json.ObjContains(Source, 'documentos', JValue) then
      Result.Documentos := Self.TMdfePedidoEmissaoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.Referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id_lote', JValue) then
      Result.IdLote := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoLoteFromJson(Source: string): TMdfePedidoEmissaoLote;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfePedidoEmissaoLoteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoCancelamentoToJsonValue(Source: TMdfePedidoCancelamento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.JustificativaHasValue then
      Json.ObjAddProp(Result, 'justificativa', Self.stringToJsonValue(Source.Justificativa));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoCancelamentoToJson(Source: TMdfePedidoCancelamento): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfePedidoCancelamentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoCancelamentoFromJsonValue(Source: TJSONValue): TMdfePedidoCancelamento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfePedidoCancelamento.Create;
  try
    if Json.ObjContains(Source, 'justificativa', JValue) then
      Result.Justificativa := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoCancelamentoFromJson(Source: string): TMdfePedidoCancelamento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfePedidoCancelamentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoEncerramentoToJsonValue(Source: TMdfePedidoEncerramento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.DataEncerramentoHasValue then
      Json.ObjAddProp(Result, 'data_encerramento', Self.TDateToJsonValue(Source.DataEncerramento));
    if Source.UfHasValue then
      Json.ObjAddProp(Result, 'uf', Self.stringToJsonValue(Source.Uf));
    if Source.CodigoMunicipioHasValue then
      Json.ObjAddProp(Result, 'codigo_municipio', Self.IntegerToJsonValue(Source.CodigoMunicipio));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoEncerramentoToJson(Source: TMdfePedidoEncerramento): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfePedidoEncerramentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoEncerramentoFromJsonValue(Source: TJSONValue): TMdfePedidoEncerramento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfePedidoEncerramento.Create;
  try
    if Json.ObjContains(Source, 'data_encerramento', JValue) then
      Result.DataEncerramento := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf', JValue) then
      Result.Uf := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_municipio', JValue) then
      Result.CodigoMunicipio := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoEncerramentoFromJson(Source: string): TMdfePedidoEncerramento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfePedidoEncerramentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeEncerramentoToJsonValue(Source: TMdfeEncerramento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.DataEncerramentoHasValue then
      Json.ObjAddProp(Result, 'data_encerramento', Self.TDateToJsonValue(Source.DataEncerramento));
    if Source.UfHasValue then
      Json.ObjAddProp(Result, 'uf', Self.stringToJsonValue(Source.Uf));
    if Source.CodigoMunicipioHasValue then
      Json.ObjAddProp(Result, 'codigo_municipio', Self.IntegerToJsonValue(Source.CodigoMunicipio));
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.Id));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.StatusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.Status));
    if Assigned(Source.Autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.Autor));
    if Source.ChaveAcessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.ChaveAcesso));
    if Source.DataEventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.DataEvento));
    if Source.NumeroSequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.NumeroSequencial));
    if Source.DataRecebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.DataRecebimento));
    if Source.CodigoStatusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.CodigoStatus));
    if Source.MotivoStatusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.MotivoStatus));
    if Source.NumeroProtocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.NumeroProtocolo));
    if Source.CodigoMensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.CodigoMensagem));
    if Source.MensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.Mensagem));
    if Source.TipoEventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.TipoEvento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeEncerramentoToJson(Source: TMdfeEncerramento): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeEncerramentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeEncerramentoFromJsonValue(Source: TJSONValue): TMdfeEncerramento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeEncerramento.Create;
  try
    if Json.ObjContains(Source, 'data_encerramento', JValue) then
      Result.DataEncerramento := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf', JValue) then
      Result.Uf := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_municipio', JValue) then
      Result.CodigoMunicipio := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.Status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.Autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.ChaveAcesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.DataEvento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.NumeroSequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.DataRecebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.CodigoStatus := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.MotivoStatus := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.NumeroProtocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.CodigoMensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.Mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.TipoEvento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeEncerramentoFromJson(Source: string): TMdfeEncerramento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeEncerramentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoInclusaoCondutorToJsonValue(Source: TMdfePedidoInclusaoCondutor): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NomeCondutorHasValue then
      Json.ObjAddProp(Result, 'nome_condutor', Self.stringToJsonValue(Source.NomeCondutor));
    if Source.CpfCondutorHasValue then
      Json.ObjAddProp(Result, 'cpf_condutor', Self.stringToJsonValue(Source.CpfCondutor));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoInclusaoCondutorToJson(Source: TMdfePedidoInclusaoCondutor): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfePedidoInclusaoCondutorToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoInclusaoCondutorFromJsonValue(Source: TJSONValue): TMdfePedidoInclusaoCondutor;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfePedidoInclusaoCondutor.Create;
  try
    if Json.ObjContains(Source, 'nome_condutor', JValue) then
      Result.NomeCondutor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cpf_condutor', JValue) then
      Result.CpfCondutor := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoInclusaoCondutorFromJson(Source: string): TMdfePedidoInclusaoCondutor;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfePedidoInclusaoCondutorFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeInclusaoCondutorToJsonValue(Source: TMdfeInclusaoCondutor): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NomeCondutorHasValue then
      Json.ObjAddProp(Result, 'nome_condutor', Self.stringToJsonValue(Source.NomeCondutor));
    if Source.CpfCondutorHasValue then
      Json.ObjAddProp(Result, 'cpf_condutor', Self.stringToJsonValue(Source.CpfCondutor));
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.Id));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.StatusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.Status));
    if Assigned(Source.Autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.Autor));
    if Source.ChaveAcessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.ChaveAcesso));
    if Source.DataEventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.DataEvento));
    if Source.NumeroSequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.NumeroSequencial));
    if Source.DataRecebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.DataRecebimento));
    if Source.CodigoStatusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.CodigoStatus));
    if Source.MotivoStatusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.MotivoStatus));
    if Source.NumeroProtocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.NumeroProtocolo));
    if Source.CodigoMensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.CodigoMensagem));
    if Source.MensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.Mensagem));
    if Source.TipoEventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.TipoEvento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeInclusaoCondutorToJson(Source: TMdfeInclusaoCondutor): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeInclusaoCondutorToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeInclusaoCondutorFromJsonValue(Source: TJSONValue): TMdfeInclusaoCondutor;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeInclusaoCondutor.Create;
  try
    if Json.ObjContains(Source, 'nome_condutor', JValue) then
      Result.NomeCondutor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cpf_condutor', JValue) then
      Result.CpfCondutor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.Status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.Autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.ChaveAcesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.DataEvento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.NumeroSequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.DataRecebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.CodigoStatus := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.MotivoStatus := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.NumeroProtocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.CodigoMensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.Mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.TipoEvento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeInclusaoCondutorFromJson(Source: string): TMdfeInclusaoCondutor;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeInclusaoCondutorFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeDocumentoVinculadoToJsonValue(Source: TMdfeDocumentoVinculado): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CodigoMunicipioDescargaHasValue then
      Json.ObjAddProp(Result, 'codigo_municipio_descarga', Self.IntegerToJsonValue(Source.CodigoMunicipioDescarga));
    if Source.MunicipioDescargaHasValue then
      Json.ObjAddProp(Result, 'municipio_descarga', Self.stringToJsonValue(Source.MunicipioDescarga));
    if Source.ChaveAcessoNfeHasValue then
      Json.ObjAddProp(Result, 'chave_acesso_nfe', Self.stringToJsonValue(Source.ChaveAcessoNfe));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeDocumentoVinculadoToJson(Source: TMdfeDocumentoVinculado): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeDocumentoVinculadoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeDocumentoVinculadoFromJsonValue(Source: TJSONValue): TMdfeDocumentoVinculado;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeDocumentoVinculado.Create;
  try
    if Json.ObjContains(Source, 'codigo_municipio_descarga', JValue) then
      Result.CodigoMunicipioDescarga := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'municipio_descarga', JValue) then
      Result.MunicipioDescarga := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso_nfe', JValue) then
      Result.ChaveAcessoNfe := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeDocumentoVinculadoFromJson(Source: string): TMdfeDocumentoVinculado;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeDocumentoVinculadoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeDocumentoVinculadoListToJsonValue(Source: TMdfeDocumentoVinculadoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeDocumentoVinculadoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeDocumentoVinculadoListToJson(Source: TMdfeDocumentoVinculadoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeDocumentoVinculadoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeDocumentoVinculadoListFromJsonValue(Source: TJSONValue): TMdfeDocumentoVinculadoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeDocumentoVinculadoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeDocumentoVinculadoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeDocumentoVinculadoListFromJson(Source: string): TMdfeDocumentoVinculadoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeDocumentoVinculadoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoInclusaoDfeToJsonValue(Source: TMdfePedidoInclusaoDfe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CodigoMunicipioCarregaHasValue then
      Json.ObjAddProp(Result, 'codigo_municipio_carrega', Self.IntegerToJsonValue(Source.CodigoMunicipioCarrega));
    if Source.MunicipioCarregaHasValue then
      Json.ObjAddProp(Result, 'municipio_carrega', Self.stringToJsonValue(Source.MunicipioCarrega));
    if Assigned(Source.Documentos) then
      Json.ObjAddProp(Result, 'documentos', Self.TMdfeDocumentoVinculadoListToJsonValue(Source.Documentos));
    if Source.ProtocoloAutorizacaoHasValue then
      Json.ObjAddProp(Result, 'protocolo_autorizacao', Self.stringToJsonValue(Source.ProtocoloAutorizacao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoInclusaoDfeToJson(Source: TMdfePedidoInclusaoDfe): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfePedidoInclusaoDfeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoInclusaoDfeFromJsonValue(Source: TJSONValue): TMdfePedidoInclusaoDfe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfePedidoInclusaoDfe.Create;
  try
    if Json.ObjContains(Source, 'codigo_municipio_carrega', JValue) then
      Result.CodigoMunicipioCarrega := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'municipio_carrega', JValue) then
      Result.MunicipioCarrega := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'documentos', JValue) then
      Result.Documentos := Self.TMdfeDocumentoVinculadoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'protocolo_autorizacao', JValue) then
      Result.ProtocoloAutorizacao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoInclusaoDfeFromJson(Source: string): TMdfePedidoInclusaoDfe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfePedidoInclusaoDfeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeInclusaoDfeToJsonValue(Source: TMdfeInclusaoDfe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CodigoMunicipioCarregaHasValue then
      Json.ObjAddProp(Result, 'codigo_municipio_carrega', Self.IntegerToJsonValue(Source.CodigoMunicipioCarrega));
    if Source.MunicipioCarregaHasValue then
      Json.ObjAddProp(Result, 'municipio_carrega', Self.stringToJsonValue(Source.MunicipioCarrega));
    if Assigned(Source.Documentos) then
      Json.ObjAddProp(Result, 'documentos', Self.TMdfeDocumentoVinculadoListToJsonValue(Source.Documentos));
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.Id));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.StatusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.Status));
    if Assigned(Source.Autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.Autor));
    if Source.ChaveAcessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.ChaveAcesso));
    if Source.DataEventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.DataEvento));
    if Source.NumeroSequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.NumeroSequencial));
    if Source.DataRecebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.DataRecebimento));
    if Source.CodigoStatusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.CodigoStatus));
    if Source.MotivoStatusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.MotivoStatus));
    if Source.NumeroProtocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.NumeroProtocolo));
    if Source.CodigoMensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.CodigoMensagem));
    if Source.MensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.Mensagem));
    if Source.TipoEventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.TipoEvento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeInclusaoDfeToJson(Source: TMdfeInclusaoDfe): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeInclusaoDfeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeInclusaoDfeFromJsonValue(Source: TJSONValue): TMdfeInclusaoDfe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeInclusaoDfe.Create;
  try
    if Json.ObjContains(Source, 'codigo_municipio_carrega', JValue) then
      Result.CodigoMunicipioCarrega := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'municipio_carrega', JValue) then
      Result.MunicipioCarrega := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'documentos', JValue) then
      Result.Documentos := Self.TMdfeDocumentoVinculadoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.Status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.Autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.ChaveAcesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.DataEvento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.NumeroSequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.DataRecebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.CodigoStatus := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.MotivoStatus := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.NumeroProtocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.CodigoMensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.Mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.TipoEvento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeInclusaoDfeFromJson(Source: string): TMdfeInclusaoDfe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeInclusaoDfeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRefNFToJsonValue(Source: TNfeSefazRefNF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CUFHasValue then
      Json.ObjAddProp(Result, 'cUF', Self.IntegerToJsonValue(Source.CUF));
    if Source.AAMMHasValue then
      Json.ObjAddProp(Result, 'AAMM', Self.stringToJsonValue(Source.AAMM));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.&ModHasValue then
      Json.ObjAddProp(Result, 'mod', Self.stringToJsonValue(Source.&Mod));
    if Source.SerieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.Serie));
    if Source.NNFHasValue then
      Json.ObjAddProp(Result, 'nNF', Self.IntegerToJsonValue(Source.NNF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRefNFToJson(Source: TNfeSefazRefNF): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazRefNFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRefNFFromJsonValue(Source: TJSONValue): TNfeSefazRefNF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazRefNF.Create;
  try
    if Json.ObjContains(Source, 'cUF', JValue) then
      Result.CUF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'AAMM', JValue) then
      Result.AAMM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&Mod := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.Serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nNF', JValue) then
      Result.NNF := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRefNFFromJson(Source: string): TNfeSefazRefNF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazRefNFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRefNFPToJsonValue(Source: TNfeSefazRefNFP): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CUFHasValue then
      Json.ObjAddProp(Result, 'cUF', Self.IntegerToJsonValue(Source.CUF));
    if Source.AAMMHasValue then
      Json.ObjAddProp(Result, 'AAMM', Self.stringToJsonValue(Source.AAMM));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.&ModHasValue then
      Json.ObjAddProp(Result, 'mod', Self.stringToJsonValue(Source.&Mod));
    if Source.SerieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.Serie));
    if Source.NNFHasValue then
      Json.ObjAddProp(Result, 'nNF', Self.IntegerToJsonValue(Source.NNF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRefNFPToJson(Source: TNfeSefazRefNFP): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazRefNFPToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRefNFPFromJsonValue(Source: TJSONValue): TNfeSefazRefNFP;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazRefNFP.Create;
  try
    if Json.ObjContains(Source, 'cUF', JValue) then
      Result.CUF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'AAMM', JValue) then
      Result.AAMM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&Mod := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.Serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nNF', JValue) then
      Result.NNF := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRefNFPFromJson(Source: string): TNfeSefazRefNFP;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazRefNFPFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRefECFToJsonValue(Source: TNfeSefazRefECF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.&ModHasValue then
      Json.ObjAddProp(Result, 'mod', Self.stringToJsonValue(Source.&Mod));
    if Source.NECFHasValue then
      Json.ObjAddProp(Result, 'nECF', Self.IntegerToJsonValue(Source.NECF));
    if Source.NCOOHasValue then
      Json.ObjAddProp(Result, 'nCOO', Self.IntegerToJsonValue(Source.NCOO));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRefECFToJson(Source: TNfeSefazRefECF): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazRefECFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRefECFFromJsonValue(Source: TJSONValue): TNfeSefazRefECF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazRefECF.Create;
  try
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&Mod := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nECF', JValue) then
      Result.NECF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nCOO', JValue) then
      Result.NCOO := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRefECFFromJson(Source: string): TNfeSefazRefECF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazRefECFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazNFrefToJsonValue(Source: TNfeSefazNFref): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.RefNFeHasValue then
      Json.ObjAddProp(Result, 'refNFe', Self.stringToJsonValue(Source.RefNFe));
    if Assigned(Source.RefNF) then
      Json.ObjAddProp(Result, 'refNF', Self.TNfeSefazRefNFToJsonValue(Source.RefNF));
    if Assigned(Source.RefNFP) then
      Json.ObjAddProp(Result, 'refNFP', Self.TNfeSefazRefNFPToJsonValue(Source.RefNFP));
    if Source.RefCTeHasValue then
      Json.ObjAddProp(Result, 'refCTe', Self.stringToJsonValue(Source.RefCTe));
    if Assigned(Source.RefECF) then
      Json.ObjAddProp(Result, 'refECF', Self.TNfeSefazRefECFToJsonValue(Source.RefECF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazNFrefToJson(Source: TNfeSefazNFref): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazNFrefToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazNFrefFromJsonValue(Source: TJSONValue): TNfeSefazNFref;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazNFref.Create;
  try
    if Json.ObjContains(Source, 'refNFe', JValue) then
      Result.RefNFe := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'refNF', JValue) then
      Result.RefNF := Self.TNfeSefazRefNFFromJsonValue(JValue);
    if Json.ObjContains(Source, 'refNFP', JValue) then
      Result.RefNFP := Self.TNfeSefazRefNFPFromJsonValue(JValue);
    if Json.ObjContains(Source, 'refCTe', JValue) then
      Result.RefCTe := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'refECF', JValue) then
      Result.RefECF := Self.TNfeSefazRefECFFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazNFrefFromJson(Source: string): TNfeSefazNFref;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazNFrefFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazNFrefListToJsonValue(Source: TNfeSefazNFrefList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazNFrefToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazNFrefListToJson(Source: TNfeSefazNFrefList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazNFrefListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazNFrefListFromJsonValue(Source: TJSONValue): TNfeSefazNFrefList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazNFrefList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazNFrefFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazNFrefListFromJson(Source: string): TNfeSefazNFrefList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazNFrefListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIdeToJsonValue(Source: TNfeSefazIde): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CUFHasValue then
      Json.ObjAddProp(Result, 'cUF', Self.IntegerToJsonValue(Source.CUF));
    if Source.CNFHasValue then
      Json.ObjAddProp(Result, 'cNF', Self.IntegerToJsonValue(Source.CNF));
    if Source.NatOpHasValue then
      Json.ObjAddProp(Result, 'natOp', Self.stringToJsonValue(Source.NatOp));
    if Source.&ModHasValue then
      Json.ObjAddProp(Result, 'mod', Self.IntegerToJsonValue(Source.&Mod));
    if Source.SerieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.Serie));
    if Source.NNFHasValue then
      Json.ObjAddProp(Result, 'nNF', Self.IntegerToJsonValue(Source.NNF));
    if Source.DhEmiHasValue then
      Json.ObjAddProp(Result, 'dhEmi', Self.TDateTimeToJsonValue(Source.DhEmi));
    if Source.DhSaiEntHasValue then
      Json.ObjAddProp(Result, 'dhSaiEnt', Self.TDateTimeToJsonValue(Source.DhSaiEnt));
    if Source.TpNFHasValue then
      Json.ObjAddProp(Result, 'tpNF', Self.IntegerToJsonValue(Source.TpNF));
    if Source.IdDestHasValue then
      Json.ObjAddProp(Result, 'idDest', Self.IntegerToJsonValue(Source.IdDest));
    if Source.CMunFGHasValue then
      Json.ObjAddProp(Result, 'cMunFG', Self.IntegerToJsonValue(Source.CMunFG));
    if Source.TpImpHasValue then
      Json.ObjAddProp(Result, 'tpImp', Self.IntegerToJsonValue(Source.TpImp));
    if Source.TpEmisHasValue then
      Json.ObjAddProp(Result, 'tpEmis', Self.IntegerToJsonValue(Source.TpEmis));
    if Source.CDVHasValue then
      Json.ObjAddProp(Result, 'cDV', Self.IntegerToJsonValue(Source.CDV));
    if Source.TpAmbHasValue then
      Json.ObjAddProp(Result, 'tpAmb', Self.IntegerToJsonValue(Source.TpAmb));
    if Source.FinNFeHasValue then
      Json.ObjAddProp(Result, 'finNFe', Self.IntegerToJsonValue(Source.FinNFe));
    if Source.IndFinalHasValue then
      Json.ObjAddProp(Result, 'indFinal', Self.IntegerToJsonValue(Source.IndFinal));
    if Source.IndPresHasValue then
      Json.ObjAddProp(Result, 'indPres', Self.IntegerToJsonValue(Source.IndPres));
    if Source.IndIntermedHasValue then
      Json.ObjAddProp(Result, 'indIntermed', Self.IntegerToJsonValue(Source.IndIntermed));
    if Source.ProcEmiHasValue then
      Json.ObjAddProp(Result, 'procEmi', Self.IntegerToJsonValue(Source.ProcEmi));
    if Source.VerProcHasValue then
      Json.ObjAddProp(Result, 'verProc', Self.stringToJsonValue(Source.VerProc));
    if Source.DhContHasValue then
      Json.ObjAddProp(Result, 'dhCont', Self.TDateTimeToJsonValue(Source.DhCont));
    if Source.XJustHasValue then
      Json.ObjAddProp(Result, 'xJust', Self.stringToJsonValue(Source.XJust));
    if Assigned(Source.NFref) then
      Json.ObjAddProp(Result, 'NFref', Self.TNfeSefazNFrefListToJsonValue(Source.NFref));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIdeToJson(Source: TNfeSefazIde): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazIdeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIdeFromJsonValue(Source: TJSONValue): TNfeSefazIde;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazIde.Create;
  try
    if Json.ObjContains(Source, 'cUF', JValue) then
      Result.CUF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cNF', JValue) then
      Result.CNF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'natOp', JValue) then
      Result.NatOp := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&Mod := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.Serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nNF', JValue) then
      Result.NNF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhEmi', JValue) then
      Result.DhEmi := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhSaiEnt', JValue) then
      Result.DhSaiEnt := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpNF', JValue) then
      Result.TpNF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idDest', JValue) then
      Result.IdDest := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMunFG', JValue) then
      Result.CMunFG := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpImp', JValue) then
      Result.TpImp := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpEmis', JValue) then
      Result.TpEmis := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cDV', JValue) then
      Result.CDV := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpAmb', JValue) then
      Result.TpAmb := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'finNFe', JValue) then
      Result.FinNFe := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indFinal', JValue) then
      Result.IndFinal := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indPres', JValue) then
      Result.IndPres := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indIntermed', JValue) then
      Result.IndIntermed := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'procEmi', JValue) then
      Result.ProcEmi := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'verProc', JValue) then
      Result.VerProc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhCont', JValue) then
      Result.DhCont := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xJust', JValue) then
      Result.XJust := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'NFref', JValue) then
      Result.NFref := Self.TNfeSefazNFrefListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIdeFromJson(Source: string): TNfeSefazIde;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazIdeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazEnderEmiToJsonValue(Source: TNfeSefazEnderEmi): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XLgrHasValue then
      Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.XLgr));
    if Source.NroHasValue then
      Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.Nro));
    if Source.XCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.XCpl));
    if Source.XBairroHasValue then
      Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.XBairro));
    if Source.CMunHasValue then
      Json.ObjAddProp(Result, 'cMun', Self.IntegerToJsonValue(Source.CMun));
    if Source.XMunHasValue then
      Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.XMun));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.IntegerToJsonValue(Source.CEP));
    if Source.CPaisHasValue then
      Json.ObjAddProp(Result, 'cPais', Self.IntegerToJsonValue(Source.CPais));
    if Source.XPaisHasValue then
      Json.ObjAddProp(Result, 'xPais', Self.stringToJsonValue(Source.XPais));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazEnderEmiToJson(Source: TNfeSefazEnderEmi): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazEnderEmiToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazEnderEmiFromJsonValue(Source: TJSONValue): TNfeSefazEnderEmi;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazEnderEmi.Create;
  try
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.XLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.Nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.XCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.XBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.CMun := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.XMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPais', JValue) then
      Result.CPais := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xPais', JValue) then
      Result.XPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazEnderEmiFromJson(Source: string): TNfeSefazEnderEmi;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazEnderEmiFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazEmitToJsonValue(Source: TNfeSefazEmit): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Source.XFantHasValue then
      Json.ObjAddProp(Result, 'xFant', Self.stringToJsonValue(Source.XFant));
    if Assigned(Source.EnderEmit) then
      Json.ObjAddProp(Result, 'enderEmit', Self.TNfeSefazEnderEmiToJsonValue(Source.EnderEmit));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.IESTHasValue then
      Json.ObjAddProp(Result, 'IEST', Self.stringToJsonValue(Source.IEST));
    if Source.IMHasValue then
      Json.ObjAddProp(Result, 'IM', Self.stringToJsonValue(Source.IM));
    if Source.CNAEHasValue then
      Json.ObjAddProp(Result, 'CNAE', Self.stringToJsonValue(Source.CNAE));
    if Source.CRTHasValue then
      Json.ObjAddProp(Result, 'CRT', Self.IntegerToJsonValue(Source.CRT));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazEmitToJson(Source: TNfeSefazEmit): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazEmitToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazEmitFromJsonValue(Source: TJSONValue): TNfeSefazEmit;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazEmit.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xFant', JValue) then
      Result.XFant := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderEmit', JValue) then
      Result.EnderEmit := Self.TNfeSefazEnderEmiFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IEST', JValue) then
      Result.IEST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IM', JValue) then
      Result.IM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNAE', JValue) then
      Result.CNAE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CRT', JValue) then
      Result.CRT := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazEmitFromJson(Source: string): TNfeSefazEmit;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazEmitFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAvulsaToJsonValue(Source: TNfeSefazAvulsa): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.XOrgaoHasValue then
      Json.ObjAddProp(Result, 'xOrgao', Self.stringToJsonValue(Source.XOrgao));
    if Source.MatrHasValue then
      Json.ObjAddProp(Result, 'matr', Self.stringToJsonValue(Source.Matr));
    if Source.XAgenteHasValue then
      Json.ObjAddProp(Result, 'xAgente', Self.stringToJsonValue(Source.XAgente));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.NDARHasValue then
      Json.ObjAddProp(Result, 'nDAR', Self.stringToJsonValue(Source.NDAR));
    if Source.DEmiHasValue then
      Json.ObjAddProp(Result, 'dEmi', Self.TDateToJsonValue(Source.DEmi));
    if Source.VDARHasValue then
      Json.ObjAddProp(Result, 'vDAR', Self.DoubleToJsonValue(Source.VDAR));
    if Source.RepEmiHasValue then
      Json.ObjAddProp(Result, 'repEmi', Self.stringToJsonValue(Source.RepEmi));
    if Source.DPagHasValue then
      Json.ObjAddProp(Result, 'dPag', Self.TDateToJsonValue(Source.DPag));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAvulsaToJson(Source: TNfeSefazAvulsa): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazAvulsaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAvulsaFromJsonValue(Source: TJSONValue): TNfeSefazAvulsa;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazAvulsa.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xOrgao', JValue) then
      Result.XOrgao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'matr', JValue) then
      Result.Matr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xAgente', JValue) then
      Result.XAgente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nDAR', JValue) then
      Result.NDAR := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dEmi', JValue) then
      Result.DEmi := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDAR', JValue) then
      Result.VDAR := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'repEmi', JValue) then
      Result.RepEmi := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dPag', JValue) then
      Result.DPag := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAvulsaFromJson(Source: string): TNfeSefazAvulsa;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazAvulsaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazEnderecoToJsonValue(Source: TNfeSefazEndereco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XLgrHasValue then
      Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.XLgr));
    if Source.NroHasValue then
      Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.Nro));
    if Source.XCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.XCpl));
    if Source.XBairroHasValue then
      Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.XBairro));
    if Source.CMunHasValue then
      Json.ObjAddProp(Result, 'cMun', Self.IntegerToJsonValue(Source.CMun));
    if Source.XMunHasValue then
      Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.XMun));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.IntegerToJsonValue(Source.CEP));
    if Source.CPaisHasValue then
      Json.ObjAddProp(Result, 'cPais', Self.IntegerToJsonValue(Source.CPais));
    if Source.XPaisHasValue then
      Json.ObjAddProp(Result, 'xPais', Self.stringToJsonValue(Source.XPais));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazEnderecoToJson(Source: TNfeSefazEndereco): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazEnderecoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazEnderecoFromJsonValue(Source: TJSONValue): TNfeSefazEndereco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazEndereco.Create;
  try
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.XLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.Nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.XCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.XBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.CMun := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.XMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPais', JValue) then
      Result.CPais := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xPais', JValue) then
      Result.XPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazEnderecoFromJson(Source: string): TNfeSefazEndereco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazEnderecoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDestToJsonValue(Source: TNfeSefazDest): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IdEstrangeiroHasValue then
      Json.ObjAddProp(Result, 'idEstrangeiro', Self.stringToJsonValue(Source.IdEstrangeiro));
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Assigned(Source.EnderDest) then
      Json.ObjAddProp(Result, 'enderDest', Self.TNfeSefazEnderecoToJsonValue(Source.EnderDest));
    if Source.IndIEDestHasValue then
      Json.ObjAddProp(Result, 'indIEDest', Self.IntegerToJsonValue(Source.IndIEDest));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.ISUFHasValue then
      Json.ObjAddProp(Result, 'ISUF', Self.stringToJsonValue(Source.ISUF));
    if Source.IMHasValue then
      Json.ObjAddProp(Result, 'IM', Self.stringToJsonValue(Source.IM));
    if Source.EmailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.Email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDestToJson(Source: TNfeSefazDest): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDestToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDestFromJsonValue(Source: TJSONValue): TNfeSefazDest;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDest.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idEstrangeiro', JValue) then
      Result.IdEstrangeiro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderDest', JValue) then
      Result.EnderDest := Self.TNfeSefazEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indIEDest', JValue) then
      Result.IndIEDest := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ISUF', JValue) then
      Result.ISUF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IM', JValue) then
      Result.IM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.Email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDestFromJson(Source: string): TNfeSefazDest;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDestFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazLocalToJsonValue(Source: TNfeSefazLocal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Source.XLgrHasValue then
      Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.XLgr));
    if Source.NroHasValue then
      Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.Nro));
    if Source.XCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.XCpl));
    if Source.XBairroHasValue then
      Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.XBairro));
    if Source.CMunHasValue then
      Json.ObjAddProp(Result, 'cMun', Self.IntegerToJsonValue(Source.CMun));
    if Source.XMunHasValue then
      Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.XMun));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.IntegerToJsonValue(Source.CEP));
    if Source.CPaisHasValue then
      Json.ObjAddProp(Result, 'cPais', Self.IntegerToJsonValue(Source.CPais));
    if Source.XPaisHasValue then
      Json.ObjAddProp(Result, 'xPais', Self.stringToJsonValue(Source.XPais));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
    if Source.EmailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.Email));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazLocalToJson(Source: TNfeSefazLocal): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazLocalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazLocalFromJsonValue(Source: TJSONValue): TNfeSefazLocal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazLocal.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.XLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.Nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.XCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.XBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.CMun := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.XMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPais', JValue) then
      Result.CPais := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xPais', JValue) then
      Result.XPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.Email := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazLocalFromJson(Source: string): TNfeSefazLocal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazLocalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAutXMLToJsonValue(Source: TNfeSefazAutXML): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAutXMLToJson(Source: TNfeSefazAutXML): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazAutXMLToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAutXMLFromJsonValue(Source: TJSONValue): TNfeSefazAutXML;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazAutXML.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAutXMLFromJson(Source: string): TNfeSefazAutXML;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazAutXMLFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAutXMLListToJsonValue(Source: TNfeSefazAutXMLList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazAutXMLToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAutXMLListToJson(Source: TNfeSefazAutXMLList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazAutXMLListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAutXMLListFromJsonValue(Source: TJSONValue): TNfeSefazAutXMLList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazAutXMLList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazAutXMLFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAutXMLListFromJson(Source: string): TNfeSefazAutXMLList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazAutXMLListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAdiToJsonValue(Source: TNfeSefazAdi): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NAdicaoHasValue then
      Json.ObjAddProp(Result, 'nAdicao', Self.IntegerToJsonValue(Source.NAdicao));
    if Source.NSeqAdicHasValue then
      Json.ObjAddProp(Result, 'nSeqAdic', Self.IntegerToJsonValue(Source.NSeqAdic));
    if Source.CFabricanteHasValue then
      Json.ObjAddProp(Result, 'cFabricante', Self.stringToJsonValue(Source.CFabricante));
    if Source.VDescDIHasValue then
      Json.ObjAddProp(Result, 'vDescDI', Self.DoubleToJsonValue(Source.VDescDI));
    if Source.NDrawHasValue then
      Json.ObjAddProp(Result, 'nDraw', Self.stringToJsonValue(Source.NDraw));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAdiToJson(Source: TNfeSefazAdi): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazAdiToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAdiFromJsonValue(Source: TJSONValue): TNfeSefazAdi;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazAdi.Create;
  try
    if Json.ObjContains(Source, 'nAdicao', JValue) then
      Result.NAdicao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nSeqAdic', JValue) then
      Result.NSeqAdic := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cFabricante', JValue) then
      Result.CFabricante := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDescDI', JValue) then
      Result.VDescDI := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nDraw', JValue) then
      Result.NDraw := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAdiFromJson(Source: string): TNfeSefazAdi;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazAdiFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAdiListToJsonValue(Source: TNfeSefazAdiList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazAdiToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAdiListToJson(Source: TNfeSefazAdiList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazAdiListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAdiListFromJsonValue(Source: TJSONValue): TNfeSefazAdiList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazAdiList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazAdiFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAdiListFromJson(Source: string): TNfeSefazAdiList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazAdiListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDIToJsonValue(Source: TNfeSefazDI): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NDIHasValue then
      Json.ObjAddProp(Result, 'nDI', Self.stringToJsonValue(Source.NDI));
    if Source.DDIHasValue then
      Json.ObjAddProp(Result, 'dDI', Self.TDateToJsonValue(Source.DDI));
    if Source.XLocDesembHasValue then
      Json.ObjAddProp(Result, 'xLocDesemb', Self.stringToJsonValue(Source.XLocDesemb));
    if Source.UFDesembHasValue then
      Json.ObjAddProp(Result, 'UFDesemb', Self.stringToJsonValue(Source.UFDesemb));
    if Source.DDesembHasValue then
      Json.ObjAddProp(Result, 'dDesemb', Self.TDateToJsonValue(Source.DDesemb));
    if Source.TpViaTranspHasValue then
      Json.ObjAddProp(Result, 'tpViaTransp', Self.IntegerToJsonValue(Source.TpViaTransp));
    if Source.VAFRMMHasValue then
      Json.ObjAddProp(Result, 'vAFRMM', Self.DoubleToJsonValue(Source.VAFRMM));
    if Source.TpIntermedioHasValue then
      Json.ObjAddProp(Result, 'tpIntermedio', Self.IntegerToJsonValue(Source.TpIntermedio));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.UFTerceiroHasValue then
      Json.ObjAddProp(Result, 'UFTerceiro', Self.stringToJsonValue(Source.UFTerceiro));
    if Source.CExportadorHasValue then
      Json.ObjAddProp(Result, 'cExportador', Self.stringToJsonValue(Source.CExportador));
    if Assigned(Source.Adi) then
      Json.ObjAddProp(Result, 'adi', Self.TNfeSefazAdiListToJsonValue(Source.Adi));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDIToJson(Source: TNfeSefazDI): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDIToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDIFromJsonValue(Source: TJSONValue): TNfeSefazDI;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDI.Create;
  try
    if Json.ObjContains(Source, 'nDI', JValue) then
      Result.NDI := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dDI', JValue) then
      Result.DDI := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xLocDesemb', JValue) then
      Result.XLocDesemb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFDesemb', JValue) then
      Result.UFDesemb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dDesemb', JValue) then
      Result.DDesemb := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpViaTransp', JValue) then
      Result.TpViaTransp := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAFRMM', JValue) then
      Result.VAFRMM := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpIntermedio', JValue) then
      Result.TpIntermedio := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFTerceiro', JValue) then
      Result.UFTerceiro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cExportador', JValue) then
      Result.CExportador := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'adi', JValue) then
      Result.Adi := Self.TNfeSefazAdiListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDIFromJson(Source: string): TNfeSefazDI;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDIFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDIListToJsonValue(Source: TNfeSefazDIList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazDIToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDIListToJson(Source: TNfeSefazDIList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDIListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDIListFromJsonValue(Source: TJSONValue): TNfeSefazDIList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDIList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazDIFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDIListFromJson(Source: string): TNfeSefazDIList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDIListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazExportIndToJsonValue(Source: TNfeSefazExportInd): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NREHasValue then
      Json.ObjAddProp(Result, 'nRE', Self.stringToJsonValue(Source.NRE));
    if Source.ChNFeHasValue then
      Json.ObjAddProp(Result, 'chNFe', Self.stringToJsonValue(Source.ChNFe));
    if Source.QExportHasValue then
      Json.ObjAddProp(Result, 'qExport', Self.DoubleToJsonValue(Source.QExport));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazExportIndToJson(Source: TNfeSefazExportInd): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazExportIndToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazExportIndFromJsonValue(Source: TJSONValue): TNfeSefazExportInd;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazExportInd.Create;
  try
    if Json.ObjContains(Source, 'nRE', JValue) then
      Result.NRE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chNFe', JValue) then
      Result.ChNFe := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qExport', JValue) then
      Result.QExport := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazExportIndFromJson(Source: string): TNfeSefazExportInd;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazExportIndFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetExportToJsonValue(Source: TNfeSefazDetExport): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NDrawHasValue then
      Json.ObjAddProp(Result, 'nDraw', Self.stringToJsonValue(Source.NDraw));
    if Assigned(Source.ExportInd) then
      Json.ObjAddProp(Result, 'exportInd', Self.TNfeSefazExportIndToJsonValue(Source.ExportInd));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetExportToJson(Source: TNfeSefazDetExport): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDetExportToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetExportFromJsonValue(Source: TJSONValue): TNfeSefazDetExport;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDetExport.Create;
  try
    if Json.ObjContains(Source, 'nDraw', JValue) then
      Result.NDraw := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'exportInd', JValue) then
      Result.ExportInd := Self.TNfeSefazExportIndFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetExportFromJson(Source: string): TNfeSefazDetExport;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDetExportFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetExportListToJsonValue(Source: TNfeSefazDetExportList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazDetExportToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetExportListToJson(Source: TNfeSefazDetExportList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDetExportListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetExportListFromJsonValue(Source: TJSONValue): TNfeSefazDetExportList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDetExportList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazDetExportFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetExportListFromJson(Source: string): TNfeSefazDetExportList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDetExportListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRastroToJsonValue(Source: TNfeSefazRastro): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NLoteHasValue then
      Json.ObjAddProp(Result, 'nLote', Self.stringToJsonValue(Source.NLote));
    if Source.QLoteHasValue then
      Json.ObjAddProp(Result, 'qLote', Self.DoubleToJsonValue(Source.QLote));
    if Source.DFabHasValue then
      Json.ObjAddProp(Result, 'dFab', Self.TDateToJsonValue(Source.DFab));
    if Source.DValHasValue then
      Json.ObjAddProp(Result, 'dVal', Self.TDateToJsonValue(Source.DVal));
    if Source.CAgregHasValue then
      Json.ObjAddProp(Result, 'cAgreg', Self.stringToJsonValue(Source.CAgreg));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRastroToJson(Source: TNfeSefazRastro): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazRastroToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRastroFromJsonValue(Source: TJSONValue): TNfeSefazRastro;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazRastro.Create;
  try
    if Json.ObjContains(Source, 'nLote', JValue) then
      Result.NLote := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qLote', JValue) then
      Result.QLote := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dFab', JValue) then
      Result.DFab := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dVal', JValue) then
      Result.DVal := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cAgreg', JValue) then
      Result.CAgreg := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRastroFromJson(Source: string): TNfeSefazRastro;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazRastroFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRastroListToJsonValue(Source: TNfeSefazRastroList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazRastroToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRastroListToJson(Source: TNfeSefazRastroList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazRastroListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRastroListFromJsonValue(Source: TJSONValue): TNfeSefazRastroList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazRastroList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazRastroFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRastroListFromJson(Source: string): TNfeSefazRastroList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazRastroListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfProdNFFToJsonValue(Source: TNfeSefazInfProdNFF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CProdFiscoHasValue then
      Json.ObjAddProp(Result, 'cProdFisco', Self.stringToJsonValue(Source.CProdFisco));
    if Source.COperNFFHasValue then
      Json.ObjAddProp(Result, 'cOperNFF', Self.stringToJsonValue(Source.COperNFF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfProdNFFToJson(Source: TNfeSefazInfProdNFF): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfProdNFFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfProdNFFFromJsonValue(Source: TJSONValue): TNfeSefazInfProdNFF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfProdNFF.Create;
  try
    if Json.ObjContains(Source, 'cProdFisco', JValue) then
      Result.CProdFisco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cOperNFF', JValue) then
      Result.COperNFF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfProdNFFFromJson(Source: string): TNfeSefazInfProdNFF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfProdNFFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfProdEmbToJsonValue(Source: TNfeSefazInfProdEmb): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XEmbHasValue then
      Json.ObjAddProp(Result, 'xEmb', Self.stringToJsonValue(Source.XEmb));
    if Source.QVolEmbHasValue then
      Json.ObjAddProp(Result, 'qVolEmb', Self.DoubleToJsonValue(Source.QVolEmb));
    if Source.UEmbHasValue then
      Json.ObjAddProp(Result, 'uEmb', Self.stringToJsonValue(Source.UEmb));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfProdEmbToJson(Source: TNfeSefazInfProdEmb): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfProdEmbToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfProdEmbFromJsonValue(Source: TJSONValue): TNfeSefazInfProdEmb;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfProdEmb.Create;
  try
    if Json.ObjContains(Source, 'xEmb', JValue) then
      Result.XEmb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qVolEmb', JValue) then
      Result.QVolEmb := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uEmb', JValue) then
      Result.UEmb := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfProdEmbFromJson(Source: string): TNfeSefazInfProdEmb;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfProdEmbFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVeicProdToJsonValue(Source: TNfeSefazVeicProd): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpOpHasValue then
      Json.ObjAddProp(Result, 'tpOp', Self.IntegerToJsonValue(Source.TpOp));
    if Source.ChassiHasValue then
      Json.ObjAddProp(Result, 'chassi', Self.stringToJsonValue(Source.Chassi));
    if Source.CCorHasValue then
      Json.ObjAddProp(Result, 'cCor', Self.stringToJsonValue(Source.CCor));
    if Source.XCorHasValue then
      Json.ObjAddProp(Result, 'xCor', Self.stringToJsonValue(Source.XCor));
    if Source.PotHasValue then
      Json.ObjAddProp(Result, 'pot', Self.stringToJsonValue(Source.Pot));
    if Source.CilinHasValue then
      Json.ObjAddProp(Result, 'cilin', Self.stringToJsonValue(Source.Cilin));
    if Source.PesoLHasValue then
      Json.ObjAddProp(Result, 'pesoL', Self.stringToJsonValue(Source.PesoL));
    if Source.PesoBHasValue then
      Json.ObjAddProp(Result, 'pesoB', Self.stringToJsonValue(Source.PesoB));
    if Source.NSerieHasValue then
      Json.ObjAddProp(Result, 'nSerie', Self.stringToJsonValue(Source.NSerie));
    if Source.TpCombHasValue then
      Json.ObjAddProp(Result, 'tpComb', Self.stringToJsonValue(Source.TpComb));
    if Source.NMotorHasValue then
      Json.ObjAddProp(Result, 'nMotor', Self.stringToJsonValue(Source.NMotor));
    if Source.CMTHasValue then
      Json.ObjAddProp(Result, 'CMT', Self.stringToJsonValue(Source.CMT));
    if Source.DistHasValue then
      Json.ObjAddProp(Result, 'dist', Self.stringToJsonValue(Source.Dist));
    if Source.AnoModHasValue then
      Json.ObjAddProp(Result, 'anoMod', Self.IntegerToJsonValue(Source.AnoMod));
    if Source.AnoFabHasValue then
      Json.ObjAddProp(Result, 'anoFab', Self.IntegerToJsonValue(Source.AnoFab));
    if Source.TpPintHasValue then
      Json.ObjAddProp(Result, 'tpPint', Self.stringToJsonValue(Source.TpPint));
    if Source.TpVeicHasValue then
      Json.ObjAddProp(Result, 'tpVeic', Self.IntegerToJsonValue(Source.TpVeic));
    if Source.EspVeicHasValue then
      Json.ObjAddProp(Result, 'espVeic', Self.IntegerToJsonValue(Source.EspVeic));
    if Source.VINHasValue then
      Json.ObjAddProp(Result, 'VIN', Self.stringToJsonValue(Source.VIN));
    if Source.CondVeicHasValue then
      Json.ObjAddProp(Result, 'condVeic', Self.IntegerToJsonValue(Source.CondVeic));
    if Source.CModHasValue then
      Json.ObjAddProp(Result, 'cMod', Self.stringToJsonValue(Source.CMod));
    if Source.CCorDENATRANHasValue then
      Json.ObjAddProp(Result, 'cCorDENATRAN', Self.stringToJsonValue(Source.CCorDENATRAN));
    if Source.LotaHasValue then
      Json.ObjAddProp(Result, 'lota', Self.IntegerToJsonValue(Source.Lota));
    if Source.TpRestHasValue then
      Json.ObjAddProp(Result, 'tpRest', Self.IntegerToJsonValue(Source.TpRest));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVeicProdToJson(Source: TNfeSefazVeicProd): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazVeicProdToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVeicProdFromJsonValue(Source: TJSONValue): TNfeSefazVeicProd;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazVeicProd.Create;
  try
    if Json.ObjContains(Source, 'tpOp', JValue) then
      Result.TpOp := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chassi', JValue) then
      Result.Chassi := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cCor', JValue) then
      Result.CCor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCor', JValue) then
      Result.XCor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pot', JValue) then
      Result.Pot := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cilin', JValue) then
      Result.Cilin := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pesoL', JValue) then
      Result.PesoL := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pesoB', JValue) then
      Result.PesoB := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nSerie', JValue) then
      Result.NSerie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpComb', JValue) then
      Result.TpComb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nMotor', JValue) then
      Result.NMotor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CMT', JValue) then
      Result.CMT := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dist', JValue) then
      Result.Dist := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'anoMod', JValue) then
      Result.AnoMod := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'anoFab', JValue) then
      Result.AnoFab := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpPint', JValue) then
      Result.TpPint := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpVeic', JValue) then
      Result.TpVeic := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'espVeic', JValue) then
      Result.EspVeic := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'VIN', JValue) then
      Result.VIN := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'condVeic', JValue) then
      Result.CondVeic := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMod', JValue) then
      Result.CMod := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cCorDENATRAN', JValue) then
      Result.CCorDENATRAN := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lota', JValue) then
      Result.Lota := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpRest', JValue) then
      Result.TpRest := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVeicProdFromJson(Source: string): TNfeSefazVeicProd;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazVeicProdFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazMedToJsonValue(Source: TNfeSefazMed): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CProdANVISAHasValue then
      Json.ObjAddProp(Result, 'cProdANVISA', Self.stringToJsonValue(Source.CProdANVISA));
    if Source.XMotivoIsencaoHasValue then
      Json.ObjAddProp(Result, 'xMotivoIsencao', Self.stringToJsonValue(Source.XMotivoIsencao));
    if Source.VPMCHasValue then
      Json.ObjAddProp(Result, 'vPMC', Self.DoubleToJsonValue(Source.VPMC));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazMedToJson(Source: TNfeSefazMed): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazMedToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazMedFromJsonValue(Source: TJSONValue): TNfeSefazMed;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazMed.Create;
  try
    if Json.ObjContains(Source, 'cProdANVISA', JValue) then
      Result.CProdANVISA := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMotivoIsencao', JValue) then
      Result.XMotivoIsencao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPMC', JValue) then
      Result.VPMC := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazMedFromJson(Source: string): TNfeSefazMed;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazMedFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazArmaToJsonValue(Source: TNfeSefazArma): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpArmaHasValue then
      Json.ObjAddProp(Result, 'tpArma', Self.IntegerToJsonValue(Source.TpArma));
    if Source.NSerieHasValue then
      Json.ObjAddProp(Result, 'nSerie', Self.stringToJsonValue(Source.NSerie));
    if Source.NCanoHasValue then
      Json.ObjAddProp(Result, 'nCano', Self.stringToJsonValue(Source.NCano));
    if Source.DescrHasValue then
      Json.ObjAddProp(Result, 'descr', Self.stringToJsonValue(Source.Descr));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazArmaToJson(Source: TNfeSefazArma): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazArmaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazArmaFromJsonValue(Source: TJSONValue): TNfeSefazArma;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazArma.Create;
  try
    if Json.ObjContains(Source, 'tpArma', JValue) then
      Result.TpArma := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nSerie', JValue) then
      Result.NSerie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nCano', JValue) then
      Result.NCano := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descr', JValue) then
      Result.Descr := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazArmaFromJson(Source: string): TNfeSefazArma;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazArmaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazArmaListToJsonValue(Source: TNfeSefazArmaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazArmaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazArmaListToJson(Source: TNfeSefazArmaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazArmaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazArmaListFromJsonValue(Source: TJSONValue): TNfeSefazArmaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazArmaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazArmaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazArmaListFromJson(Source: string): TNfeSefazArmaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazArmaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCIDEToJsonValue(Source: TNfeSefazCIDE): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.QBCProdHasValue then
      Json.ObjAddProp(Result, 'qBCProd', Self.DoubleToJsonValue(Source.QBCProd));
    if Source.VAliqProdHasValue then
      Json.ObjAddProp(Result, 'vAliqProd', Self.DoubleToJsonValue(Source.VAliqProd));
    if Source.VCIDEHasValue then
      Json.ObjAddProp(Result, 'vCIDE', Self.DoubleToJsonValue(Source.VCIDE));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCIDEToJson(Source: TNfeSefazCIDE): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCIDEToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCIDEFromJsonValue(Source: TJSONValue): TNfeSefazCIDE;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCIDE.Create;
  try
    if Json.ObjContains(Source, 'qBCProd', JValue) then
      Result.QBCProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAliqProd', JValue) then
      Result.VAliqProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCIDE', JValue) then
      Result.VCIDE := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCIDEFromJson(Source: string): TNfeSefazCIDE;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCIDEFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazEncerranteToJsonValue(Source: TNfeSefazEncerrante): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NBicoHasValue then
      Json.ObjAddProp(Result, 'nBico', Self.IntegerToJsonValue(Source.NBico));
    if Source.NBombaHasValue then
      Json.ObjAddProp(Result, 'nBomba', Self.IntegerToJsonValue(Source.NBomba));
    if Source.NTanqueHasValue then
      Json.ObjAddProp(Result, 'nTanque', Self.IntegerToJsonValue(Source.NTanque));
    if Source.VEncIniHasValue then
      Json.ObjAddProp(Result, 'vEncIni', Self.DoubleToJsonValue(Source.VEncIni));
    if Source.VEncFinHasValue then
      Json.ObjAddProp(Result, 'vEncFin', Self.DoubleToJsonValue(Source.VEncFin));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazEncerranteToJson(Source: TNfeSefazEncerrante): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazEncerranteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazEncerranteFromJsonValue(Source: TJSONValue): TNfeSefazEncerrante;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazEncerrante.Create;
  try
    if Json.ObjContains(Source, 'nBico', JValue) then
      Result.NBico := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nBomba', JValue) then
      Result.NBomba := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nTanque', JValue) then
      Result.NTanque := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vEncIni', JValue) then
      Result.VEncIni := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vEncFin', JValue) then
      Result.VEncFin := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazEncerranteFromJson(Source: string): TNfeSefazEncerrante;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazEncerranteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCombToJsonValue(Source: TNfeSefazComb): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CProdANPHasValue then
      Json.ObjAddProp(Result, 'cProdANP', Self.IntegerToJsonValue(Source.CProdANP));
    if Source.DescANPHasValue then
      Json.ObjAddProp(Result, 'descANP', Self.stringToJsonValue(Source.DescANP));
    if Source.PGLPHasValue then
      Json.ObjAddProp(Result, 'pGLP', Self.DoubleToJsonValue(Source.PGLP));
    if Source.PGNnHasValue then
      Json.ObjAddProp(Result, 'pGNn', Self.DoubleToJsonValue(Source.PGNn));
    if Source.PGNiHasValue then
      Json.ObjAddProp(Result, 'pGNi', Self.DoubleToJsonValue(Source.PGNi));
    if Source.VPartHasValue then
      Json.ObjAddProp(Result, 'vPart', Self.DoubleToJsonValue(Source.VPart));
    if Source.CODIFHasValue then
      Json.ObjAddProp(Result, 'CODIF', Self.stringToJsonValue(Source.CODIF));
    if Source.QTempHasValue then
      Json.ObjAddProp(Result, 'qTemp', Self.DoubleToJsonValue(Source.QTemp));
    if Source.UFConsHasValue then
      Json.ObjAddProp(Result, 'UFCons', Self.stringToJsonValue(Source.UFCons));
    if Assigned(Source.CIDE) then
      Json.ObjAddProp(Result, 'CIDE', Self.TNfeSefazCIDEToJsonValue(Source.CIDE));
    if Assigned(Source.Encerrante) then
      Json.ObjAddProp(Result, 'encerrante', Self.TNfeSefazEncerranteToJsonValue(Source.Encerrante));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCombToJson(Source: TNfeSefazComb): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCombToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCombFromJsonValue(Source: TJSONValue): TNfeSefazComb;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazComb.Create;
  try
    if Json.ObjContains(Source, 'cProdANP', JValue) then
      Result.CProdANP := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descANP', JValue) then
      Result.DescANP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pGLP', JValue) then
      Result.PGLP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pGNn', JValue) then
      Result.PGNn := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pGNi', JValue) then
      Result.PGNi := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPart', JValue) then
      Result.VPart := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CODIF', JValue) then
      Result.CODIF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTemp', JValue) then
      Result.QTemp := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFCons', JValue) then
      Result.UFCons := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CIDE', JValue) then
      Result.CIDE := Self.TNfeSefazCIDEFromJsonValue(JValue);
    if Json.ObjContains(Source, 'encerrante', JValue) then
      Result.Encerrante := Self.TNfeSefazEncerranteFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCombFromJson(Source: string): TNfeSefazComb;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCombFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazProdToJsonValue(Source: TNfeSefazProd): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CProdHasValue then
      Json.ObjAddProp(Result, 'cProd', Self.stringToJsonValue(Source.CProd));
    if Source.CEANHasValue then
      Json.ObjAddProp(Result, 'cEAN', Self.stringToJsonValue(Source.CEAN));
    if Source.CBarraHasValue then
      Json.ObjAddProp(Result, 'cBarra', Self.stringToJsonValue(Source.CBarra));
    if Source.XProdHasValue then
      Json.ObjAddProp(Result, 'xProd', Self.stringToJsonValue(Source.XProd));
    if Source.NCMHasValue then
      Json.ObjAddProp(Result, 'NCM', Self.stringToJsonValue(Source.NCM));
    if Assigned(Source.NVE) then
      Json.ObjAddProp(Result, 'NVE', Self.stringListToJsonValue(Source.NVE));
    if Source.CESTHasValue then
      Json.ObjAddProp(Result, 'CEST', Self.stringToJsonValue(Source.CEST));
    if Source.IndEscalaHasValue then
      Json.ObjAddProp(Result, 'indEscala', Self.stringToJsonValue(Source.IndEscala));
    if Source.CNPJFabHasValue then
      Json.ObjAddProp(Result, 'CNPJFab', Self.stringToJsonValue(Source.CNPJFab));
    if Source.CBenefHasValue then
      Json.ObjAddProp(Result, 'cBenef', Self.stringToJsonValue(Source.CBenef));
    if Source.EXTIPIHasValue then
      Json.ObjAddProp(Result, 'EXTIPI', Self.stringToJsonValue(Source.EXTIPI));
    if Source.CFOPHasValue then
      Json.ObjAddProp(Result, 'CFOP', Self.IntegerToJsonValue(Source.CFOP));
    if Source.UComHasValue then
      Json.ObjAddProp(Result, 'uCom', Self.stringToJsonValue(Source.UCom));
    if Source.QComHasValue then
      Json.ObjAddProp(Result, 'qCom', Self.DoubleToJsonValue(Source.QCom));
    if Source.VUnComHasValue then
      Json.ObjAddProp(Result, 'vUnCom', Self.DoubleToJsonValue(Source.VUnCom));
    if Source.VProdHasValue then
      Json.ObjAddProp(Result, 'vProd', Self.DoubleToJsonValue(Source.VProd));
    if Source.CEANTribHasValue then
      Json.ObjAddProp(Result, 'cEANTrib', Self.stringToJsonValue(Source.CEANTrib));
    if Source.CBarraTribHasValue then
      Json.ObjAddProp(Result, 'cBarraTrib', Self.stringToJsonValue(Source.CBarraTrib));
    if Source.UTribHasValue then
      Json.ObjAddProp(Result, 'uTrib', Self.stringToJsonValue(Source.UTrib));
    if Source.QTribHasValue then
      Json.ObjAddProp(Result, 'qTrib', Self.DoubleToJsonValue(Source.QTrib));
    if Source.VUnTribHasValue then
      Json.ObjAddProp(Result, 'vUnTrib', Self.DoubleToJsonValue(Source.VUnTrib));
    if Source.VFreteHasValue then
      Json.ObjAddProp(Result, 'vFrete', Self.DoubleToJsonValue(Source.VFrete));
    if Source.VSegHasValue then
      Json.ObjAddProp(Result, 'vSeg', Self.DoubleToJsonValue(Source.VSeg));
    if Source.VDescHasValue then
      Json.ObjAddProp(Result, 'vDesc', Self.DoubleToJsonValue(Source.VDesc));
    if Source.VOutroHasValue then
      Json.ObjAddProp(Result, 'vOutro', Self.DoubleToJsonValue(Source.VOutro));
    if Source.IndTotHasValue then
      Json.ObjAddProp(Result, 'indTot', Self.IntegerToJsonValue(Source.IndTot));
    if Assigned(Source.DI) then
      Json.ObjAddProp(Result, 'DI', Self.TNfeSefazDIListToJsonValue(Source.DI));
    if Assigned(Source.DetExport) then
      Json.ObjAddProp(Result, 'detExport', Self.TNfeSefazDetExportListToJsonValue(Source.DetExport));
    if Source.XPedHasValue then
      Json.ObjAddProp(Result, 'xPed', Self.stringToJsonValue(Source.XPed));
    if Source.NItemPedHasValue then
      Json.ObjAddProp(Result, 'nItemPed', Self.IntegerToJsonValue(Source.NItemPed));
    if Source.NFCIHasValue then
      Json.ObjAddProp(Result, 'nFCI', Self.stringToJsonValue(Source.NFCI));
    if Assigned(Source.Rastro) then
      Json.ObjAddProp(Result, 'rastro', Self.TNfeSefazRastroListToJsonValue(Source.Rastro));
    if Assigned(Source.InfProdNFF) then
      Json.ObjAddProp(Result, 'infProdNFF', Self.TNfeSefazInfProdNFFToJsonValue(Source.InfProdNFF));
    if Assigned(Source.InfProdEmb) then
      Json.ObjAddProp(Result, 'infProdEmb', Self.TNfeSefazInfProdEmbToJsonValue(Source.InfProdEmb));
    if Assigned(Source.VeicProd) then
      Json.ObjAddProp(Result, 'veicProd', Self.TNfeSefazVeicProdToJsonValue(Source.VeicProd));
    if Assigned(Source.Med) then
      Json.ObjAddProp(Result, 'med', Self.TNfeSefazMedToJsonValue(Source.Med));
    if Assigned(Source.Arma) then
      Json.ObjAddProp(Result, 'arma', Self.TNfeSefazArmaListToJsonValue(Source.Arma));
    if Assigned(Source.Comb) then
      Json.ObjAddProp(Result, 'comb', Self.TNfeSefazCombToJsonValue(Source.Comb));
    if Source.NRECOPIHasValue then
      Json.ObjAddProp(Result, 'nRECOPI', Self.stringToJsonValue(Source.NRECOPI));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazProdToJson(Source: TNfeSefazProd): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazProdToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazProdFromJsonValue(Source: TJSONValue): TNfeSefazProd;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazProd.Create;
  try
    if Json.ObjContains(Source, 'cProd', JValue) then
      Result.CProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cEAN', JValue) then
      Result.CEAN := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cBarra', JValue) then
      Result.CBarra := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xProd', JValue) then
      Result.XProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'NCM', JValue) then
      Result.NCM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'NVE', JValue) then
      Result.NVE := Self.stringListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEST', JValue) then
      Result.CEST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indEscala', JValue) then
      Result.IndEscala := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJFab', JValue) then
      Result.CNPJFab := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cBenef', JValue) then
      Result.CBenef := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'EXTIPI', JValue) then
      Result.EXTIPI := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CFOP', JValue) then
      Result.CFOP := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uCom', JValue) then
      Result.UCom := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qCom', JValue) then
      Result.QCom := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vUnCom', JValue) then
      Result.VUnCom := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vProd', JValue) then
      Result.VProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cEANTrib', JValue) then
      Result.CEANTrib := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cBarraTrib', JValue) then
      Result.CBarraTrib := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uTrib', JValue) then
      Result.UTrib := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTrib', JValue) then
      Result.QTrib := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vUnTrib', JValue) then
      Result.VUnTrib := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFrete', JValue) then
      Result.VFrete := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vSeg', JValue) then
      Result.VSeg := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDesc', JValue) then
      Result.VDesc := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vOutro', JValue) then
      Result.VOutro := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indTot', JValue) then
      Result.IndTot := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'DI', JValue) then
      Result.DI := Self.TNfeSefazDIListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'detExport', JValue) then
      Result.DetExport := Self.TNfeSefazDetExportListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xPed', JValue) then
      Result.XPed := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nItemPed', JValue) then
      Result.NItemPed := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nFCI', JValue) then
      Result.NFCI := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'rastro', JValue) then
      Result.Rastro := Self.TNfeSefazRastroListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infProdNFF', JValue) then
      Result.InfProdNFF := Self.TNfeSefazInfProdNFFFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infProdEmb', JValue) then
      Result.InfProdEmb := Self.TNfeSefazInfProdEmbFromJsonValue(JValue);
    if Json.ObjContains(Source, 'veicProd', JValue) then
      Result.VeicProd := Self.TNfeSefazVeicProdFromJsonValue(JValue);
    if Json.ObjContains(Source, 'med', JValue) then
      Result.Med := Self.TNfeSefazMedFromJsonValue(JValue);
    if Json.ObjContains(Source, 'arma', JValue) then
      Result.Arma := Self.TNfeSefazArmaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'comb', JValue) then
      Result.Comb := Self.TNfeSefazCombFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nRECOPI', JValue) then
      Result.NRECOPI := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazProdFromJson(Source: string): TNfeSefazProd;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazProdFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS00ToJsonValue(Source: TNfeSefazICMS00): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OrigHasValue then
      Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.Orig));
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.ModBCHasValue then
      Json.ObjAddProp(Result, 'modBC', Self.IntegerToJsonValue(Source.ModBC));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PICMSHasValue then
      Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.PICMS));
    if Source.VICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.VICMS));
    if Source.PFCPHasValue then
      Json.ObjAddProp(Result, 'pFCP', Self.DoubleToJsonValue(Source.PFCP));
    if Source.VFCPHasValue then
      Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.VFCP));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS00ToJson(Source: TNfeSefazICMS00): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS00ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS00FromJsonValue(Source: TJSONValue): TNfeSefazICMS00;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS00.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.Orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBC', JValue) then
      Result.ModBC := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.PICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.VICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCP', JValue) then
      Result.PFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.VFCP := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS00FromJson(Source: string): TNfeSefazICMS00;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS00FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS10ToJsonValue(Source: TNfeSefazICMS10): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OrigHasValue then
      Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.Orig));
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.ModBCHasValue then
      Json.ObjAddProp(Result, 'modBC', Self.IntegerToJsonValue(Source.ModBC));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PICMSHasValue then
      Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.PICMS));
    if Source.VICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.VICMS));
    if Source.VBCFCPHasValue then
      Json.ObjAddProp(Result, 'vBCFCP', Self.DoubleToJsonValue(Source.VBCFCP));
    if Source.PFCPHasValue then
      Json.ObjAddProp(Result, 'pFCP', Self.DoubleToJsonValue(Source.PFCP));
    if Source.VFCPHasValue then
      Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.VFCP));
    if Source.ModBCSTHasValue then
      Json.ObjAddProp(Result, 'modBCST', Self.IntegerToJsonValue(Source.ModBCST));
    if Source.PMVASTHasValue then
      Json.ObjAddProp(Result, 'pMVAST', Self.DoubleToJsonValue(Source.PMVAST));
    if Source.PRedBCSTHasValue then
      Json.ObjAddProp(Result, 'pRedBCST', Self.DoubleToJsonValue(Source.PRedBCST));
    if Source.VBCSTHasValue then
      Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.VBCST));
    if Source.PICMSSTHasValue then
      Json.ObjAddProp(Result, 'pICMSST', Self.DoubleToJsonValue(Source.PICMSST));
    if Source.VICMSSTHasValue then
      Json.ObjAddProp(Result, 'vICMSST', Self.DoubleToJsonValue(Source.VICMSST));
    if Source.VBCFCPSTHasValue then
      Json.ObjAddProp(Result, 'vBCFCPST', Self.DoubleToJsonValue(Source.VBCFCPST));
    if Source.PFCPSTHasValue then
      Json.ObjAddProp(Result, 'pFCPST', Self.DoubleToJsonValue(Source.PFCPST));
    if Source.VFCPSTHasValue then
      Json.ObjAddProp(Result, 'vFCPST', Self.DoubleToJsonValue(Source.VFCPST));
    if Source.VICMSSTDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSSTDeson', Self.DoubleToJsonValue(Source.VICMSSTDeson));
    if Source.MotDesICMSSTHasValue then
      Json.ObjAddProp(Result, 'motDesICMSST', Self.IntegerToJsonValue(Source.MotDesICMSST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS10ToJson(Source: TNfeSefazICMS10): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS10ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS10FromJsonValue(Source: TJSONValue): TNfeSefazICMS10;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS10.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.Orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBC', JValue) then
      Result.ModBC := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.PICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.VICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCP', JValue) then
      Result.VBCFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCP', JValue) then
      Result.PFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.VFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBCST', JValue) then
      Result.ModBCST := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pMVAST', JValue) then
      Result.PMVAST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCST', JValue) then
      Result.PRedBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.VBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSST', JValue) then
      Result.PICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSST', JValue) then
      Result.VICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPST', JValue) then
      Result.VBCFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPST', JValue) then
      Result.PFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPST', JValue) then
      Result.VFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSTDeson', JValue) then
      Result.VICMSSTDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motDesICMSST', JValue) then
      Result.MotDesICMSST := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS10FromJson(Source: string): TNfeSefazICMS10;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS10FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS20ToJsonValue(Source: TNfeSefazICMS20): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OrigHasValue then
      Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.Orig));
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.ModBCHasValue then
      Json.ObjAddProp(Result, 'modBC', Self.IntegerToJsonValue(Source.ModBC));
    if Source.PRedBCHasValue then
      Json.ObjAddProp(Result, 'pRedBC', Self.DoubleToJsonValue(Source.PRedBC));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PICMSHasValue then
      Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.PICMS));
    if Source.VICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.VICMS));
    if Source.VBCFCPHasValue then
      Json.ObjAddProp(Result, 'vBCFCP', Self.DoubleToJsonValue(Source.VBCFCP));
    if Source.PFCPHasValue then
      Json.ObjAddProp(Result, 'pFCP', Self.DoubleToJsonValue(Source.PFCP));
    if Source.VFCPHasValue then
      Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.VFCP));
    if Source.VICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.VICMSDeson));
    if Source.MotDesICMSHasValue then
      Json.ObjAddProp(Result, 'motDesICMS', Self.IntegerToJsonValue(Source.MotDesICMS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS20ToJson(Source: TNfeSefazICMS20): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS20ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS20FromJsonValue(Source: TJSONValue): TNfeSefazICMS20;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS20.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.Orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBC', JValue) then
      Result.ModBC := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBC', JValue) then
      Result.PRedBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.PICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.VICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCP', JValue) then
      Result.VBCFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCP', JValue) then
      Result.PFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.VFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.VICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motDesICMS', JValue) then
      Result.MotDesICMS := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS20FromJson(Source: string): TNfeSefazICMS20;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS20FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS30ToJsonValue(Source: TNfeSefazICMS30): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OrigHasValue then
      Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.Orig));
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.ModBCSTHasValue then
      Json.ObjAddProp(Result, 'modBCST', Self.IntegerToJsonValue(Source.ModBCST));
    if Source.PMVASTHasValue then
      Json.ObjAddProp(Result, 'pMVAST', Self.DoubleToJsonValue(Source.PMVAST));
    if Source.PRedBCSTHasValue then
      Json.ObjAddProp(Result, 'pRedBCST', Self.DoubleToJsonValue(Source.PRedBCST));
    if Source.VBCSTHasValue then
      Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.VBCST));
    if Source.PICMSSTHasValue then
      Json.ObjAddProp(Result, 'pICMSST', Self.DoubleToJsonValue(Source.PICMSST));
    if Source.VICMSSTHasValue then
      Json.ObjAddProp(Result, 'vICMSST', Self.DoubleToJsonValue(Source.VICMSST));
    if Source.VBCFCPSTHasValue then
      Json.ObjAddProp(Result, 'vBCFCPST', Self.DoubleToJsonValue(Source.VBCFCPST));
    if Source.PFCPSTHasValue then
      Json.ObjAddProp(Result, 'pFCPST', Self.DoubleToJsonValue(Source.PFCPST));
    if Source.VFCPSTHasValue then
      Json.ObjAddProp(Result, 'vFCPST', Self.DoubleToJsonValue(Source.VFCPST));
    if Source.VICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.VICMSDeson));
    if Source.MotDesICMSHasValue then
      Json.ObjAddProp(Result, 'motDesICMS', Self.IntegerToJsonValue(Source.MotDesICMS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS30ToJson(Source: TNfeSefazICMS30): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS30ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS30FromJsonValue(Source: TJSONValue): TNfeSefazICMS30;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS30.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.Orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBCST', JValue) then
      Result.ModBCST := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pMVAST', JValue) then
      Result.PMVAST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCST', JValue) then
      Result.PRedBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.VBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSST', JValue) then
      Result.PICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSST', JValue) then
      Result.VICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPST', JValue) then
      Result.VBCFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPST', JValue) then
      Result.PFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPST', JValue) then
      Result.VFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.VICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motDesICMS', JValue) then
      Result.MotDesICMS := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS30FromJson(Source: string): TNfeSefazICMS30;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS30FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS40ToJsonValue(Source: TNfeSefazICMS40): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OrigHasValue then
      Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.Orig));
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.VICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.VICMSDeson));
    if Source.MotDesICMSHasValue then
      Json.ObjAddProp(Result, 'motDesICMS', Self.IntegerToJsonValue(Source.MotDesICMS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS40ToJson(Source: TNfeSefazICMS40): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS40ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS40FromJsonValue(Source: TJSONValue): TNfeSefazICMS40;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS40.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.Orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.VICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motDesICMS', JValue) then
      Result.MotDesICMS := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS40FromJson(Source: string): TNfeSefazICMS40;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS40FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS51ToJsonValue(Source: TNfeSefazICMS51): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OrigHasValue then
      Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.Orig));
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.ModBCHasValue then
      Json.ObjAddProp(Result, 'modBC', Self.IntegerToJsonValue(Source.ModBC));
    if Source.PRedBCHasValue then
      Json.ObjAddProp(Result, 'pRedBC', Self.DoubleToJsonValue(Source.PRedBC));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PICMSHasValue then
      Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.PICMS));
    if Source.VICMSOpHasValue then
      Json.ObjAddProp(Result, 'vICMSOp', Self.DoubleToJsonValue(Source.VICMSOp));
    if Source.PDifHasValue then
      Json.ObjAddProp(Result, 'pDif', Self.DoubleToJsonValue(Source.PDif));
    if Source.VICMSDifHasValue then
      Json.ObjAddProp(Result, 'vICMSDif', Self.DoubleToJsonValue(Source.VICMSDif));
    if Source.VICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.VICMS));
    if Source.VBCFCPHasValue then
      Json.ObjAddProp(Result, 'vBCFCP', Self.DoubleToJsonValue(Source.VBCFCP));
    if Source.PFCPHasValue then
      Json.ObjAddProp(Result, 'pFCP', Self.DoubleToJsonValue(Source.PFCP));
    if Source.VFCPHasValue then
      Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.VFCP));
    if Source.PFCPDifHasValue then
      Json.ObjAddProp(Result, 'pFCPDif', Self.DoubleToJsonValue(Source.PFCPDif));
    if Source.VFCPDifHasValue then
      Json.ObjAddProp(Result, 'vFCPDif', Self.DoubleToJsonValue(Source.VFCPDif));
    if Source.VFCPEfetHasValue then
      Json.ObjAddProp(Result, 'vFCPEfet', Self.DoubleToJsonValue(Source.VFCPEfet));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS51ToJson(Source: TNfeSefazICMS51): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS51ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS51FromJsonValue(Source: TJSONValue): TNfeSefazICMS51;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS51.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.Orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBC', JValue) then
      Result.ModBC := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBC', JValue) then
      Result.PRedBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.PICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSOp', JValue) then
      Result.VICMSOp := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pDif', JValue) then
      Result.PDif := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDif', JValue) then
      Result.VICMSDif := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.VICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCP', JValue) then
      Result.VBCFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCP', JValue) then
      Result.PFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.VFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPDif', JValue) then
      Result.PFCPDif := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPDif', JValue) then
      Result.VFCPDif := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPEfet', JValue) then
      Result.VFCPEfet := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS51FromJson(Source: string): TNfeSefazICMS51;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS51FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS60ToJsonValue(Source: TNfeSefazICMS60): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OrigHasValue then
      Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.Orig));
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.VBCSTRetHasValue then
      Json.ObjAddProp(Result, 'vBCSTRet', Self.DoubleToJsonValue(Source.VBCSTRet));
    if Source.PSTHasValue then
      Json.ObjAddProp(Result, 'pST', Self.DoubleToJsonValue(Source.PST));
    if Source.VICMSSubstitutoHasValue then
      Json.ObjAddProp(Result, 'vICMSSubstituto', Self.DoubleToJsonValue(Source.VICMSSubstituto));
    if Source.VICMSSTRetHasValue then
      Json.ObjAddProp(Result, 'vICMSSTRet', Self.DoubleToJsonValue(Source.VICMSSTRet));
    if Source.VBCFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'vBCFCPSTRet', Self.DoubleToJsonValue(Source.VBCFCPSTRet));
    if Source.PFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'pFCPSTRet', Self.DoubleToJsonValue(Source.PFCPSTRet));
    if Source.VFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'vFCPSTRet', Self.DoubleToJsonValue(Source.VFCPSTRet));
    if Source.PRedBCEfetHasValue then
      Json.ObjAddProp(Result, 'pRedBCEfet', Self.DoubleToJsonValue(Source.PRedBCEfet));
    if Source.VBCEfetHasValue then
      Json.ObjAddProp(Result, 'vBCEfet', Self.DoubleToJsonValue(Source.VBCEfet));
    if Source.PICMSEfetHasValue then
      Json.ObjAddProp(Result, 'pICMSEfet', Self.DoubleToJsonValue(Source.PICMSEfet));
    if Source.VICMSEfetHasValue then
      Json.ObjAddProp(Result, 'vICMSEfet', Self.DoubleToJsonValue(Source.VICMSEfet));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS60ToJson(Source: TNfeSefazICMS60): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS60ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS60FromJsonValue(Source: TJSONValue): TNfeSefazICMS60;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS60.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.Orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCSTRet', JValue) then
      Result.VBCSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pST', JValue) then
      Result.PST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSubstituto', JValue) then
      Result.VICMSSubstituto := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSTRet', JValue) then
      Result.VICMSSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPSTRet', JValue) then
      Result.VBCFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPSTRet', JValue) then
      Result.PFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPSTRet', JValue) then
      Result.VFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCEfet', JValue) then
      Result.PRedBCEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCEfet', JValue) then
      Result.VBCEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSEfet', JValue) then
      Result.PICMSEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSEfet', JValue) then
      Result.VICMSEfet := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS60FromJson(Source: string): TNfeSefazICMS60;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS60FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS70ToJsonValue(Source: TNfeSefazICMS70): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OrigHasValue then
      Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.Orig));
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.ModBCHasValue then
      Json.ObjAddProp(Result, 'modBC', Self.IntegerToJsonValue(Source.ModBC));
    if Source.PRedBCHasValue then
      Json.ObjAddProp(Result, 'pRedBC', Self.DoubleToJsonValue(Source.PRedBC));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PICMSHasValue then
      Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.PICMS));
    if Source.VICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.VICMS));
    if Source.VBCFCPHasValue then
      Json.ObjAddProp(Result, 'vBCFCP', Self.DoubleToJsonValue(Source.VBCFCP));
    if Source.PFCPHasValue then
      Json.ObjAddProp(Result, 'pFCP', Self.DoubleToJsonValue(Source.PFCP));
    if Source.VFCPHasValue then
      Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.VFCP));
    if Source.ModBCSTHasValue then
      Json.ObjAddProp(Result, 'modBCST', Self.IntegerToJsonValue(Source.ModBCST));
    if Source.PMVASTHasValue then
      Json.ObjAddProp(Result, 'pMVAST', Self.DoubleToJsonValue(Source.PMVAST));
    if Source.PRedBCSTHasValue then
      Json.ObjAddProp(Result, 'pRedBCST', Self.DoubleToJsonValue(Source.PRedBCST));
    if Source.VBCSTHasValue then
      Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.VBCST));
    if Source.PICMSSTHasValue then
      Json.ObjAddProp(Result, 'pICMSST', Self.DoubleToJsonValue(Source.PICMSST));
    if Source.VICMSSTHasValue then
      Json.ObjAddProp(Result, 'vICMSST', Self.DoubleToJsonValue(Source.VICMSST));
    if Source.VBCFCPSTHasValue then
      Json.ObjAddProp(Result, 'vBCFCPST', Self.DoubleToJsonValue(Source.VBCFCPST));
    if Source.PFCPSTHasValue then
      Json.ObjAddProp(Result, 'pFCPST', Self.DoubleToJsonValue(Source.PFCPST));
    if Source.VFCPSTHasValue then
      Json.ObjAddProp(Result, 'vFCPST', Self.DoubleToJsonValue(Source.VFCPST));
    if Source.VICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.VICMSDeson));
    if Source.MotDesICMSHasValue then
      Json.ObjAddProp(Result, 'motDesICMS', Self.IntegerToJsonValue(Source.MotDesICMS));
    if Source.VICMSSTDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSSTDeson', Self.DoubleToJsonValue(Source.VICMSSTDeson));
    if Source.MotDesICMSSTHasValue then
      Json.ObjAddProp(Result, 'motDesICMSST', Self.IntegerToJsonValue(Source.MotDesICMSST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS70ToJson(Source: TNfeSefazICMS70): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS70ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS70FromJsonValue(Source: TJSONValue): TNfeSefazICMS70;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS70.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.Orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBC', JValue) then
      Result.ModBC := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBC', JValue) then
      Result.PRedBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.PICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.VICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCP', JValue) then
      Result.VBCFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCP', JValue) then
      Result.PFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.VFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBCST', JValue) then
      Result.ModBCST := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pMVAST', JValue) then
      Result.PMVAST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCST', JValue) then
      Result.PRedBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.VBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSST', JValue) then
      Result.PICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSST', JValue) then
      Result.VICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPST', JValue) then
      Result.VBCFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPST', JValue) then
      Result.PFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPST', JValue) then
      Result.VFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.VICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motDesICMS', JValue) then
      Result.MotDesICMS := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSTDeson', JValue) then
      Result.VICMSSTDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motDesICMSST', JValue) then
      Result.MotDesICMSST := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS70FromJson(Source: string): TNfeSefazICMS70;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS70FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS90ToJsonValue(Source: TNfeSefazICMS90): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OrigHasValue then
      Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.Orig));
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.ModBCHasValue then
      Json.ObjAddProp(Result, 'modBC', Self.IntegerToJsonValue(Source.ModBC));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PRedBCHasValue then
      Json.ObjAddProp(Result, 'pRedBC', Self.DoubleToJsonValue(Source.PRedBC));
    if Source.PICMSHasValue then
      Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.PICMS));
    if Source.VICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.VICMS));
    if Source.VBCFCPHasValue then
      Json.ObjAddProp(Result, 'vBCFCP', Self.DoubleToJsonValue(Source.VBCFCP));
    if Source.PFCPHasValue then
      Json.ObjAddProp(Result, 'pFCP', Self.DoubleToJsonValue(Source.PFCP));
    if Source.VFCPHasValue then
      Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.VFCP));
    if Source.ModBCSTHasValue then
      Json.ObjAddProp(Result, 'modBCST', Self.IntegerToJsonValue(Source.ModBCST));
    if Source.PMVASTHasValue then
      Json.ObjAddProp(Result, 'pMVAST', Self.DoubleToJsonValue(Source.PMVAST));
    if Source.PRedBCSTHasValue then
      Json.ObjAddProp(Result, 'pRedBCST', Self.DoubleToJsonValue(Source.PRedBCST));
    if Source.VBCSTHasValue then
      Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.VBCST));
    if Source.PICMSSTHasValue then
      Json.ObjAddProp(Result, 'pICMSST', Self.DoubleToJsonValue(Source.PICMSST));
    if Source.VICMSSTHasValue then
      Json.ObjAddProp(Result, 'vICMSST', Self.DoubleToJsonValue(Source.VICMSST));
    if Source.VBCFCPSTHasValue then
      Json.ObjAddProp(Result, 'vBCFCPST', Self.DoubleToJsonValue(Source.VBCFCPST));
    if Source.PFCPSTHasValue then
      Json.ObjAddProp(Result, 'pFCPST', Self.DoubleToJsonValue(Source.PFCPST));
    if Source.VFCPSTHasValue then
      Json.ObjAddProp(Result, 'vFCPST', Self.DoubleToJsonValue(Source.VFCPST));
    if Source.VICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.VICMSDeson));
    if Source.MotDesICMSHasValue then
      Json.ObjAddProp(Result, 'motDesICMS', Self.IntegerToJsonValue(Source.MotDesICMS));
    if Source.VICMSSTDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSSTDeson', Self.DoubleToJsonValue(Source.VICMSSTDeson));
    if Source.MotDesICMSSTHasValue then
      Json.ObjAddProp(Result, 'motDesICMSST', Self.IntegerToJsonValue(Source.MotDesICMSST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS90ToJson(Source: TNfeSefazICMS90): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS90ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS90FromJsonValue(Source: TJSONValue): TNfeSefazICMS90;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS90.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.Orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBC', JValue) then
      Result.ModBC := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBC', JValue) then
      Result.PRedBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.PICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.VICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCP', JValue) then
      Result.VBCFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCP', JValue) then
      Result.PFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.VFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBCST', JValue) then
      Result.ModBCST := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pMVAST', JValue) then
      Result.PMVAST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCST', JValue) then
      Result.PRedBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.VBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSST', JValue) then
      Result.PICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSST', JValue) then
      Result.VICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPST', JValue) then
      Result.VBCFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPST', JValue) then
      Result.PFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPST', JValue) then
      Result.VFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.VICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motDesICMS', JValue) then
      Result.MotDesICMS := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSTDeson', JValue) then
      Result.VICMSSTDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motDesICMSST', JValue) then
      Result.MotDesICMSST := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS90FromJson(Source: string): TNfeSefazICMS90;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS90FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSPartToJsonValue(Source: TNfeSefazICMSPart): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OrigHasValue then
      Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.Orig));
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.ModBCHasValue then
      Json.ObjAddProp(Result, 'modBC', Self.IntegerToJsonValue(Source.ModBC));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PRedBCHasValue then
      Json.ObjAddProp(Result, 'pRedBC', Self.DoubleToJsonValue(Source.PRedBC));
    if Source.PICMSHasValue then
      Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.PICMS));
    if Source.VICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.VICMS));
    if Source.ModBCSTHasValue then
      Json.ObjAddProp(Result, 'modBCST', Self.IntegerToJsonValue(Source.ModBCST));
    if Source.PMVASTHasValue then
      Json.ObjAddProp(Result, 'pMVAST', Self.DoubleToJsonValue(Source.PMVAST));
    if Source.PRedBCSTHasValue then
      Json.ObjAddProp(Result, 'pRedBCST', Self.DoubleToJsonValue(Source.PRedBCST));
    if Source.VBCSTHasValue then
      Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.VBCST));
    if Source.PICMSSTHasValue then
      Json.ObjAddProp(Result, 'pICMSST', Self.DoubleToJsonValue(Source.PICMSST));
    if Source.VICMSSTHasValue then
      Json.ObjAddProp(Result, 'vICMSST', Self.DoubleToJsonValue(Source.VICMSST));
    if Source.PBCOpHasValue then
      Json.ObjAddProp(Result, 'pBCOp', Self.DoubleToJsonValue(Source.PBCOp));
    if Source.UFSTHasValue then
      Json.ObjAddProp(Result, 'UFST', Self.stringToJsonValue(Source.UFST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSPartToJson(Source: TNfeSefazICMSPart): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSPartToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSPartFromJsonValue(Source: TJSONValue): TNfeSefazICMSPart;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSPart.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.Orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBC', JValue) then
      Result.ModBC := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBC', JValue) then
      Result.PRedBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.PICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.VICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBCST', JValue) then
      Result.ModBCST := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pMVAST', JValue) then
      Result.PMVAST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCST', JValue) then
      Result.PRedBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.VBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSST', JValue) then
      Result.PICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSST', JValue) then
      Result.VICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pBCOp', JValue) then
      Result.PBCOp := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFST', JValue) then
      Result.UFST := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSPartFromJson(Source: string): TNfeSefazICMSPart;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSPartFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSTToJsonValue(Source: TNfeSefazICMSST): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OrigHasValue then
      Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.Orig));
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.VBCSTRetHasValue then
      Json.ObjAddProp(Result, 'vBCSTRet', Self.DoubleToJsonValue(Source.VBCSTRet));
    if Source.PSTHasValue then
      Json.ObjAddProp(Result, 'pST', Self.DoubleToJsonValue(Source.PST));
    if Source.VICMSSubstitutoHasValue then
      Json.ObjAddProp(Result, 'vICMSSubstituto', Self.DoubleToJsonValue(Source.VICMSSubstituto));
    if Source.VICMSSTRetHasValue then
      Json.ObjAddProp(Result, 'vICMSSTRet', Self.DoubleToJsonValue(Source.VICMSSTRet));
    if Source.VBCFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'vBCFCPSTRet', Self.DoubleToJsonValue(Source.VBCFCPSTRet));
    if Source.PFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'pFCPSTRet', Self.DoubleToJsonValue(Source.PFCPSTRet));
    if Source.VFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'vFCPSTRet', Self.DoubleToJsonValue(Source.VFCPSTRet));
    if Source.VBCSTDestHasValue then
      Json.ObjAddProp(Result, 'vBCSTDest', Self.DoubleToJsonValue(Source.VBCSTDest));
    if Source.VICMSSTDestHasValue then
      Json.ObjAddProp(Result, 'vICMSSTDest', Self.DoubleToJsonValue(Source.VICMSSTDest));
    if Source.PRedBCEfetHasValue then
      Json.ObjAddProp(Result, 'pRedBCEfet', Self.DoubleToJsonValue(Source.PRedBCEfet));
    if Source.VBCEfetHasValue then
      Json.ObjAddProp(Result, 'vBCEfet', Self.DoubleToJsonValue(Source.VBCEfet));
    if Source.PICMSEfetHasValue then
      Json.ObjAddProp(Result, 'pICMSEfet', Self.DoubleToJsonValue(Source.PICMSEfet));
    if Source.VICMSEfetHasValue then
      Json.ObjAddProp(Result, 'vICMSEfet', Self.DoubleToJsonValue(Source.VICMSEfet));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSTToJson(Source: TNfeSefazICMSST): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSSTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSTFromJsonValue(Source: TJSONValue): TNfeSefazICMSST;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSST.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.Orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCSTRet', JValue) then
      Result.VBCSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pST', JValue) then
      Result.PST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSubstituto', JValue) then
      Result.VICMSSubstituto := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSTRet', JValue) then
      Result.VICMSSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPSTRet', JValue) then
      Result.VBCFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPSTRet', JValue) then
      Result.PFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPSTRet', JValue) then
      Result.VFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCSTDest', JValue) then
      Result.VBCSTDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSTDest', JValue) then
      Result.VICMSSTDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCEfet', JValue) then
      Result.PRedBCEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCEfet', JValue) then
      Result.VBCEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSEfet', JValue) then
      Result.PICMSEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSEfet', JValue) then
      Result.VICMSEfet := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSTFromJson(Source: string): TNfeSefazICMSST;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSSTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN101ToJsonValue(Source: TNfeSefazICMSSN101): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OrigHasValue then
      Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.Orig));
    if Source.CSOSNHasValue then
      Json.ObjAddProp(Result, 'CSOSN', Self.IntegerToJsonValue(Source.CSOSN));
    if Source.PCredSNHasValue then
      Json.ObjAddProp(Result, 'pCredSN', Self.DoubleToJsonValue(Source.PCredSN));
    if Source.VCredICMSSNHasValue then
      Json.ObjAddProp(Result, 'vCredICMSSN', Self.DoubleToJsonValue(Source.VCredICMSSN));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN101ToJson(Source: TNfeSefazICMSSN101): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSSN101ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN101FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN101;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSSN101.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.Orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CSOSN', JValue) then
      Result.CSOSN := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pCredSN', JValue) then
      Result.PCredSN := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCredICMSSN', JValue) then
      Result.VCredICMSSN := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN101FromJson(Source: string): TNfeSefazICMSSN101;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSSN101FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN102ToJsonValue(Source: TNfeSefazICMSSN102): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OrigHasValue then
      Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.Orig));
    if Source.CSOSNHasValue then
      Json.ObjAddProp(Result, 'CSOSN', Self.IntegerToJsonValue(Source.CSOSN));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN102ToJson(Source: TNfeSefazICMSSN102): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSSN102ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN102FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN102;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSSN102.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.Orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CSOSN', JValue) then
      Result.CSOSN := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN102FromJson(Source: string): TNfeSefazICMSSN102;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSSN102FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN201ToJsonValue(Source: TNfeSefazICMSSN201): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OrigHasValue then
      Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.Orig));
    if Source.CSOSNHasValue then
      Json.ObjAddProp(Result, 'CSOSN', Self.IntegerToJsonValue(Source.CSOSN));
    if Source.ModBCSTHasValue then
      Json.ObjAddProp(Result, 'modBCST', Self.IntegerToJsonValue(Source.ModBCST));
    if Source.PMVASTHasValue then
      Json.ObjAddProp(Result, 'pMVAST', Self.DoubleToJsonValue(Source.PMVAST));
    if Source.PRedBCSTHasValue then
      Json.ObjAddProp(Result, 'pRedBCST', Self.DoubleToJsonValue(Source.PRedBCST));
    if Source.VBCSTHasValue then
      Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.VBCST));
    if Source.PICMSSTHasValue then
      Json.ObjAddProp(Result, 'pICMSST', Self.DoubleToJsonValue(Source.PICMSST));
    if Source.VICMSSTHasValue then
      Json.ObjAddProp(Result, 'vICMSST', Self.DoubleToJsonValue(Source.VICMSST));
    if Source.VBCFCPSTHasValue then
      Json.ObjAddProp(Result, 'vBCFCPST', Self.DoubleToJsonValue(Source.VBCFCPST));
    if Source.PFCPSTHasValue then
      Json.ObjAddProp(Result, 'pFCPST', Self.DoubleToJsonValue(Source.PFCPST));
    if Source.VFCPSTHasValue then
      Json.ObjAddProp(Result, 'vFCPST', Self.DoubleToJsonValue(Source.VFCPST));
    if Source.PCredSNHasValue then
      Json.ObjAddProp(Result, 'pCredSN', Self.DoubleToJsonValue(Source.PCredSN));
    if Source.VCredICMSSNHasValue then
      Json.ObjAddProp(Result, 'vCredICMSSN', Self.DoubleToJsonValue(Source.VCredICMSSN));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN201ToJson(Source: TNfeSefazICMSSN201): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSSN201ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN201FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN201;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSSN201.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.Orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CSOSN', JValue) then
      Result.CSOSN := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBCST', JValue) then
      Result.ModBCST := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pMVAST', JValue) then
      Result.PMVAST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCST', JValue) then
      Result.PRedBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.VBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSST', JValue) then
      Result.PICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSST', JValue) then
      Result.VICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPST', JValue) then
      Result.VBCFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPST', JValue) then
      Result.PFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPST', JValue) then
      Result.VFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pCredSN', JValue) then
      Result.PCredSN := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCredICMSSN', JValue) then
      Result.VCredICMSSN := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN201FromJson(Source: string): TNfeSefazICMSSN201;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSSN201FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN202ToJsonValue(Source: TNfeSefazICMSSN202): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OrigHasValue then
      Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.Orig));
    if Source.CSOSNHasValue then
      Json.ObjAddProp(Result, 'CSOSN', Self.IntegerToJsonValue(Source.CSOSN));
    if Source.ModBCSTHasValue then
      Json.ObjAddProp(Result, 'modBCST', Self.IntegerToJsonValue(Source.ModBCST));
    if Source.PMVASTHasValue then
      Json.ObjAddProp(Result, 'pMVAST', Self.DoubleToJsonValue(Source.PMVAST));
    if Source.PRedBCSTHasValue then
      Json.ObjAddProp(Result, 'pRedBCST', Self.DoubleToJsonValue(Source.PRedBCST));
    if Source.VBCSTHasValue then
      Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.VBCST));
    if Source.PICMSSTHasValue then
      Json.ObjAddProp(Result, 'pICMSST', Self.DoubleToJsonValue(Source.PICMSST));
    if Source.VICMSSTHasValue then
      Json.ObjAddProp(Result, 'vICMSST', Self.DoubleToJsonValue(Source.VICMSST));
    if Source.VBCFCPSTHasValue then
      Json.ObjAddProp(Result, 'vBCFCPST', Self.DoubleToJsonValue(Source.VBCFCPST));
    if Source.PFCPSTHasValue then
      Json.ObjAddProp(Result, 'pFCPST', Self.DoubleToJsonValue(Source.PFCPST));
    if Source.VFCPSTHasValue then
      Json.ObjAddProp(Result, 'vFCPST', Self.DoubleToJsonValue(Source.VFCPST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN202ToJson(Source: TNfeSefazICMSSN202): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSSN202ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN202FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN202;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSSN202.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.Orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CSOSN', JValue) then
      Result.CSOSN := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBCST', JValue) then
      Result.ModBCST := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pMVAST', JValue) then
      Result.PMVAST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCST', JValue) then
      Result.PRedBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.VBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSST', JValue) then
      Result.PICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSST', JValue) then
      Result.VICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPST', JValue) then
      Result.VBCFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPST', JValue) then
      Result.PFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPST', JValue) then
      Result.VFCPST := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN202FromJson(Source: string): TNfeSefazICMSSN202;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSSN202FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN500ToJsonValue(Source: TNfeSefazICMSSN500): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OrigHasValue then
      Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.Orig));
    if Source.CSOSNHasValue then
      Json.ObjAddProp(Result, 'CSOSN', Self.IntegerToJsonValue(Source.CSOSN));
    if Source.VBCSTRetHasValue then
      Json.ObjAddProp(Result, 'vBCSTRet', Self.DoubleToJsonValue(Source.VBCSTRet));
    if Source.PSTHasValue then
      Json.ObjAddProp(Result, 'pST', Self.DoubleToJsonValue(Source.PST));
    if Source.VICMSSubstitutoHasValue then
      Json.ObjAddProp(Result, 'vICMSSubstituto', Self.DoubleToJsonValue(Source.VICMSSubstituto));
    if Source.VICMSSTRetHasValue then
      Json.ObjAddProp(Result, 'vICMSSTRet', Self.DoubleToJsonValue(Source.VICMSSTRet));
    if Source.VBCFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'vBCFCPSTRet', Self.DoubleToJsonValue(Source.VBCFCPSTRet));
    if Source.PFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'pFCPSTRet', Self.DoubleToJsonValue(Source.PFCPSTRet));
    if Source.VFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'vFCPSTRet', Self.DoubleToJsonValue(Source.VFCPSTRet));
    if Source.PRedBCEfetHasValue then
      Json.ObjAddProp(Result, 'pRedBCEfet', Self.DoubleToJsonValue(Source.PRedBCEfet));
    if Source.VBCEfetHasValue then
      Json.ObjAddProp(Result, 'vBCEfet', Self.DoubleToJsonValue(Source.VBCEfet));
    if Source.PICMSEfetHasValue then
      Json.ObjAddProp(Result, 'pICMSEfet', Self.DoubleToJsonValue(Source.PICMSEfet));
    if Source.VICMSEfetHasValue then
      Json.ObjAddProp(Result, 'vICMSEfet', Self.DoubleToJsonValue(Source.VICMSEfet));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN500ToJson(Source: TNfeSefazICMSSN500): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSSN500ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN500FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN500;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSSN500.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.Orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CSOSN', JValue) then
      Result.CSOSN := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCSTRet', JValue) then
      Result.VBCSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pST', JValue) then
      Result.PST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSubstituto', JValue) then
      Result.VICMSSubstituto := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSTRet', JValue) then
      Result.VICMSSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPSTRet', JValue) then
      Result.VBCFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPSTRet', JValue) then
      Result.PFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPSTRet', JValue) then
      Result.VFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCEfet', JValue) then
      Result.PRedBCEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCEfet', JValue) then
      Result.VBCEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSEfet', JValue) then
      Result.PICMSEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSEfet', JValue) then
      Result.VICMSEfet := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN500FromJson(Source: string): TNfeSefazICMSSN500;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSSN500FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN900ToJsonValue(Source: TNfeSefazICMSSN900): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OrigHasValue then
      Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.Orig));
    if Source.CSOSNHasValue then
      Json.ObjAddProp(Result, 'CSOSN', Self.IntegerToJsonValue(Source.CSOSN));
    if Source.ModBCHasValue then
      Json.ObjAddProp(Result, 'modBC', Self.IntegerToJsonValue(Source.ModBC));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PRedBCHasValue then
      Json.ObjAddProp(Result, 'pRedBC', Self.DoubleToJsonValue(Source.PRedBC));
    if Source.PICMSHasValue then
      Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.PICMS));
    if Source.VICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.VICMS));
    if Source.ModBCSTHasValue then
      Json.ObjAddProp(Result, 'modBCST', Self.IntegerToJsonValue(Source.ModBCST));
    if Source.PMVASTHasValue then
      Json.ObjAddProp(Result, 'pMVAST', Self.DoubleToJsonValue(Source.PMVAST));
    if Source.PRedBCSTHasValue then
      Json.ObjAddProp(Result, 'pRedBCST', Self.DoubleToJsonValue(Source.PRedBCST));
    if Source.VBCSTHasValue then
      Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.VBCST));
    if Source.PICMSSTHasValue then
      Json.ObjAddProp(Result, 'pICMSST', Self.DoubleToJsonValue(Source.PICMSST));
    if Source.VICMSSTHasValue then
      Json.ObjAddProp(Result, 'vICMSST', Self.DoubleToJsonValue(Source.VICMSST));
    if Source.VBCFCPSTHasValue then
      Json.ObjAddProp(Result, 'vBCFCPST', Self.DoubleToJsonValue(Source.VBCFCPST));
    if Source.PFCPSTHasValue then
      Json.ObjAddProp(Result, 'pFCPST', Self.DoubleToJsonValue(Source.PFCPST));
    if Source.VFCPSTHasValue then
      Json.ObjAddProp(Result, 'vFCPST', Self.DoubleToJsonValue(Source.VFCPST));
    if Source.PCredSNHasValue then
      Json.ObjAddProp(Result, 'pCredSN', Self.DoubleToJsonValue(Source.PCredSN));
    if Source.VCredICMSSNHasValue then
      Json.ObjAddProp(Result, 'vCredICMSSN', Self.DoubleToJsonValue(Source.VCredICMSSN));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN900ToJson(Source: TNfeSefazICMSSN900): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSSN900ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN900FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN900;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSSN900.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.Orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CSOSN', JValue) then
      Result.CSOSN := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBC', JValue) then
      Result.ModBC := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBC', JValue) then
      Result.PRedBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.PICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.VICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBCST', JValue) then
      Result.ModBCST := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pMVAST', JValue) then
      Result.PMVAST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCST', JValue) then
      Result.PRedBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.VBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSST', JValue) then
      Result.PICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSST', JValue) then
      Result.VICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPST', JValue) then
      Result.VBCFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPST', JValue) then
      Result.PFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPST', JValue) then
      Result.VFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pCredSN', JValue) then
      Result.PCredSN := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCredICMSSN', JValue) then
      Result.VCredICMSSN := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN900FromJson(Source: string): TNfeSefazICMSSN900;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSSN900FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSToJsonValue(Source: TNfeSefazICMS): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.ICMS00) then
      Json.ObjAddProp(Result, 'ICMS00', Self.TNfeSefazICMS00ToJsonValue(Source.ICMS00));
    if Assigned(Source.ICMS10) then
      Json.ObjAddProp(Result, 'ICMS10', Self.TNfeSefazICMS10ToJsonValue(Source.ICMS10));
    if Assigned(Source.ICMS20) then
      Json.ObjAddProp(Result, 'ICMS20', Self.TNfeSefazICMS20ToJsonValue(Source.ICMS20));
    if Assigned(Source.ICMS30) then
      Json.ObjAddProp(Result, 'ICMS30', Self.TNfeSefazICMS30ToJsonValue(Source.ICMS30));
    if Assigned(Source.ICMS40) then
      Json.ObjAddProp(Result, 'ICMS40', Self.TNfeSefazICMS40ToJsonValue(Source.ICMS40));
    if Assigned(Source.ICMS51) then
      Json.ObjAddProp(Result, 'ICMS51', Self.TNfeSefazICMS51ToJsonValue(Source.ICMS51));
    if Assigned(Source.ICMS60) then
      Json.ObjAddProp(Result, 'ICMS60', Self.TNfeSefazICMS60ToJsonValue(Source.ICMS60));
    if Assigned(Source.ICMS70) then
      Json.ObjAddProp(Result, 'ICMS70', Self.TNfeSefazICMS70ToJsonValue(Source.ICMS70));
    if Assigned(Source.ICMS90) then
      Json.ObjAddProp(Result, 'ICMS90', Self.TNfeSefazICMS90ToJsonValue(Source.ICMS90));
    if Assigned(Source.ICMSPart) then
      Json.ObjAddProp(Result, 'ICMSPart', Self.TNfeSefazICMSPartToJsonValue(Source.ICMSPart));
    if Assigned(Source.ICMSST) then
      Json.ObjAddProp(Result, 'ICMSST', Self.TNfeSefazICMSSTToJsonValue(Source.ICMSST));
    if Assigned(Source.ICMSSN101) then
      Json.ObjAddProp(Result, 'ICMSSN101', Self.TNfeSefazICMSSN101ToJsonValue(Source.ICMSSN101));
    if Assigned(Source.ICMSSN102) then
      Json.ObjAddProp(Result, 'ICMSSN102', Self.TNfeSefazICMSSN102ToJsonValue(Source.ICMSSN102));
    if Assigned(Source.ICMSSN201) then
      Json.ObjAddProp(Result, 'ICMSSN201', Self.TNfeSefazICMSSN201ToJsonValue(Source.ICMSSN201));
    if Assigned(Source.ICMSSN202) then
      Json.ObjAddProp(Result, 'ICMSSN202', Self.TNfeSefazICMSSN202ToJsonValue(Source.ICMSSN202));
    if Assigned(Source.ICMSSN500) then
      Json.ObjAddProp(Result, 'ICMSSN500', Self.TNfeSefazICMSSN500ToJsonValue(Source.ICMSSN500));
    if Assigned(Source.ICMSSN900) then
      Json.ObjAddProp(Result, 'ICMSSN900', Self.TNfeSefazICMSSN900ToJsonValue(Source.ICMSSN900));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSToJson(Source: TNfeSefazICMS): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSFromJsonValue(Source: TJSONValue): TNfeSefazICMS;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS.Create;
  try
    if Json.ObjContains(Source, 'ICMS00', JValue) then
      Result.ICMS00 := Self.TNfeSefazICMS00FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS10', JValue) then
      Result.ICMS10 := Self.TNfeSefazICMS10FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS20', JValue) then
      Result.ICMS20 := Self.TNfeSefazICMS20FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS30', JValue) then
      Result.ICMS30 := Self.TNfeSefazICMS30FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS40', JValue) then
      Result.ICMS40 := Self.TNfeSefazICMS40FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS51', JValue) then
      Result.ICMS51 := Self.TNfeSefazICMS51FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS60', JValue) then
      Result.ICMS60 := Self.TNfeSefazICMS60FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS70', JValue) then
      Result.ICMS70 := Self.TNfeSefazICMS70FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS90', JValue) then
      Result.ICMS90 := Self.TNfeSefazICMS90FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSPart', JValue) then
      Result.ICMSPart := Self.TNfeSefazICMSPartFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSST', JValue) then
      Result.ICMSST := Self.TNfeSefazICMSSTFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSSN101', JValue) then
      Result.ICMSSN101 := Self.TNfeSefazICMSSN101FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSSN102', JValue) then
      Result.ICMSSN102 := Self.TNfeSefazICMSSN102FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSSN201', JValue) then
      Result.ICMSSN201 := Self.TNfeSefazICMSSN201FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSSN202', JValue) then
      Result.ICMSSN202 := Self.TNfeSefazICMSSN202FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSSN500', JValue) then
      Result.ICMSSN500 := Self.TNfeSefazICMSSN500FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSSN900', JValue) then
      Result.ICMSSN900 := Self.TNfeSefazICMSSN900FromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSFromJson(Source: string): TNfeSefazICMS;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIPITribToJsonValue(Source: TNfeSefazIPITrib): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PIPIHasValue then
      Json.ObjAddProp(Result, 'pIPI', Self.DoubleToJsonValue(Source.PIPI));
    if Source.QUnidHasValue then
      Json.ObjAddProp(Result, 'qUnid', Self.DoubleToJsonValue(Source.QUnid));
    if Source.VUnidHasValue then
      Json.ObjAddProp(Result, 'vUnid', Self.DoubleToJsonValue(Source.VUnid));
    if Source.VIPIHasValue then
      Json.ObjAddProp(Result, 'vIPI', Self.DoubleToJsonValue(Source.VIPI));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIPITribToJson(Source: TNfeSefazIPITrib): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazIPITribToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIPITribFromJsonValue(Source: TJSONValue): TNfeSefazIPITrib;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazIPITrib.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pIPI', JValue) then
      Result.PIPI := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qUnid', JValue) then
      Result.QUnid := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vUnid', JValue) then
      Result.VUnid := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vIPI', JValue) then
      Result.VIPI := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIPITribFromJson(Source: string): TNfeSefazIPITrib;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazIPITribFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIPINTToJsonValue(Source: TNfeSefazIPINT): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIPINTToJson(Source: TNfeSefazIPINT): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazIPINTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIPINTFromJsonValue(Source: TJSONValue): TNfeSefazIPINT;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazIPINT.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIPINTFromJson(Source: string): TNfeSefazIPINT;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazIPINTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIpiToJsonValue(Source: TNfeSefazIpi): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJProdHasValue then
      Json.ObjAddProp(Result, 'CNPJProd', Self.stringToJsonValue(Source.CNPJProd));
    if Source.CSeloHasValue then
      Json.ObjAddProp(Result, 'cSelo', Self.stringToJsonValue(Source.CSelo));
    if Source.QSeloHasValue then
      Json.ObjAddProp(Result, 'qSelo', Self.IntegerToJsonValue(Source.QSelo));
    if Source.CEnqHasValue then
      Json.ObjAddProp(Result, 'cEnq', Self.stringToJsonValue(Source.CEnq));
    if Assigned(Source.IPITrib) then
      Json.ObjAddProp(Result, 'IPITrib', Self.TNfeSefazIPITribToJsonValue(Source.IPITrib));
    if Assigned(Source.IPINT) then
      Json.ObjAddProp(Result, 'IPINT', Self.TNfeSefazIPINTToJsonValue(Source.IPINT));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIpiToJson(Source: TNfeSefazIpi): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazIpiToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIpiFromJsonValue(Source: TJSONValue): TNfeSefazIpi;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazIpi.Create;
  try
    if Json.ObjContains(Source, 'CNPJProd', JValue) then
      Result.CNPJProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cSelo', JValue) then
      Result.CSelo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qSelo', JValue) then
      Result.QSelo := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cEnq', JValue) then
      Result.CEnq := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IPITrib', JValue) then
      Result.IPITrib := Self.TNfeSefazIPITribFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IPINT', JValue) then
      Result.IPINT := Self.TNfeSefazIPINTFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIpiFromJson(Source: string): TNfeSefazIpi;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazIpiFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIIToJsonValue(Source: TNfeSefazII): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.VDespAduHasValue then
      Json.ObjAddProp(Result, 'vDespAdu', Self.DoubleToJsonValue(Source.VDespAdu));
    if Source.VIIHasValue then
      Json.ObjAddProp(Result, 'vII', Self.DoubleToJsonValue(Source.VII));
    if Source.VIOFHasValue then
      Json.ObjAddProp(Result, 'vIOF', Self.DoubleToJsonValue(Source.VIOF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIIToJson(Source: TNfeSefazII): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazIIToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIIFromJsonValue(Source: TJSONValue): TNfeSefazII;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazII.Create;
  try
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDespAdu', JValue) then
      Result.VDespAdu := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vII', JValue) then
      Result.VII := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vIOF', JValue) then
      Result.VIOF := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIIFromJson(Source: string): TNfeSefazII;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazIIFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazISSQNToJsonValue(Source: TNfeSefazISSQN): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.VAliqHasValue then
      Json.ObjAddProp(Result, 'vAliq', Self.DoubleToJsonValue(Source.VAliq));
    if Source.VISSQNHasValue then
      Json.ObjAddProp(Result, 'vISSQN', Self.DoubleToJsonValue(Source.VISSQN));
    if Source.CMunFGHasValue then
      Json.ObjAddProp(Result, 'cMunFG', Self.IntegerToJsonValue(Source.CMunFG));
    if Source.CListServHasValue then
      Json.ObjAddProp(Result, 'cListServ', Self.stringToJsonValue(Source.CListServ));
    if Source.VDeducaoHasValue then
      Json.ObjAddProp(Result, 'vDeducao', Self.DoubleToJsonValue(Source.VDeducao));
    if Source.VOutroHasValue then
      Json.ObjAddProp(Result, 'vOutro', Self.DoubleToJsonValue(Source.VOutro));
    if Source.VDescIncondHasValue then
      Json.ObjAddProp(Result, 'vDescIncond', Self.DoubleToJsonValue(Source.VDescIncond));
    if Source.VDescCondHasValue then
      Json.ObjAddProp(Result, 'vDescCond', Self.DoubleToJsonValue(Source.VDescCond));
    if Source.VISSRetHasValue then
      Json.ObjAddProp(Result, 'vISSRet', Self.DoubleToJsonValue(Source.VISSRet));
    if Source.IndISSHasValue then
      Json.ObjAddProp(Result, 'indISS', Self.IntegerToJsonValue(Source.IndISS));
    if Source.CServicoHasValue then
      Json.ObjAddProp(Result, 'cServico', Self.stringToJsonValue(Source.CServico));
    if Source.CMunHasValue then
      Json.ObjAddProp(Result, 'cMun', Self.IntegerToJsonValue(Source.CMun));
    if Source.CPaisHasValue then
      Json.ObjAddProp(Result, 'cPais', Self.IntegerToJsonValue(Source.CPais));
    if Source.NProcessoHasValue then
      Json.ObjAddProp(Result, 'nProcesso', Self.stringToJsonValue(Source.NProcesso));
    if Source.IndIncentivoHasValue then
      Json.ObjAddProp(Result, 'indIncentivo', Self.IntegerToJsonValue(Source.IndIncentivo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazISSQNToJson(Source: TNfeSefazISSQN): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazISSQNToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazISSQNFromJsonValue(Source: TJSONValue): TNfeSefazISSQN;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazISSQN.Create;
  try
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAliq', JValue) then
      Result.VAliq := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vISSQN', JValue) then
      Result.VISSQN := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMunFG', JValue) then
      Result.CMunFG := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cListServ', JValue) then
      Result.CListServ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDeducao', JValue) then
      Result.VDeducao := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vOutro', JValue) then
      Result.VOutro := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDescIncond', JValue) then
      Result.VDescIncond := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDescCond', JValue) then
      Result.VDescCond := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vISSRet', JValue) then
      Result.VISSRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indISS', JValue) then
      Result.IndISS := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cServico', JValue) then
      Result.CServico := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.CMun := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPais', JValue) then
      Result.CPais := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nProcesso', JValue) then
      Result.NProcesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indIncentivo', JValue) then
      Result.IndIncentivo := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazISSQNFromJson(Source: string): TNfeSefazISSQN;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazISSQNFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISAliqToJsonValue(Source: TNfeSefazPISAliq): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PPISHasValue then
      Json.ObjAddProp(Result, 'pPIS', Self.DoubleToJsonValue(Source.PPIS));
    if Source.VPISHasValue then
      Json.ObjAddProp(Result, 'vPIS', Self.DoubleToJsonValue(Source.VPIS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISAliqToJson(Source: TNfeSefazPISAliq): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazPISAliqToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISAliqFromJsonValue(Source: TJSONValue): TNfeSefazPISAliq;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazPISAliq.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pPIS', JValue) then
      Result.PPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPIS', JValue) then
      Result.VPIS := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISAliqFromJson(Source: string): TNfeSefazPISAliq;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazPISAliqFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISQtdeToJsonValue(Source: TNfeSefazPISQtde): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.QBCProdHasValue then
      Json.ObjAddProp(Result, 'qBCProd', Self.DoubleToJsonValue(Source.QBCProd));
    if Source.VAliqProdHasValue then
      Json.ObjAddProp(Result, 'vAliqProd', Self.DoubleToJsonValue(Source.VAliqProd));
    if Source.VPISHasValue then
      Json.ObjAddProp(Result, 'vPIS', Self.DoubleToJsonValue(Source.VPIS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISQtdeToJson(Source: TNfeSefazPISQtde): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazPISQtdeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISQtdeFromJsonValue(Source: TJSONValue): TNfeSefazPISQtde;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazPISQtde.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCProd', JValue) then
      Result.QBCProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAliqProd', JValue) then
      Result.VAliqProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPIS', JValue) then
      Result.VPIS := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISQtdeFromJson(Source: string): TNfeSefazPISQtde;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazPISQtdeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISNTToJsonValue(Source: TNfeSefazPISNT): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISNTToJson(Source: TNfeSefazPISNT): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazPISNTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISNTFromJsonValue(Source: TJSONValue): TNfeSefazPISNT;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazPISNT.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISNTFromJson(Source: string): TNfeSefazPISNT;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazPISNTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISOutrToJsonValue(Source: TNfeSefazPISOutr): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PPISHasValue then
      Json.ObjAddProp(Result, 'pPIS', Self.DoubleToJsonValue(Source.PPIS));
    if Source.QBCProdHasValue then
      Json.ObjAddProp(Result, 'qBCProd', Self.DoubleToJsonValue(Source.QBCProd));
    if Source.VAliqProdHasValue then
      Json.ObjAddProp(Result, 'vAliqProd', Self.DoubleToJsonValue(Source.VAliqProd));
    if Source.VPISHasValue then
      Json.ObjAddProp(Result, 'vPIS', Self.DoubleToJsonValue(Source.VPIS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISOutrToJson(Source: TNfeSefazPISOutr): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazPISOutrToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISOutrFromJsonValue(Source: TJSONValue): TNfeSefazPISOutr;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazPISOutr.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pPIS', JValue) then
      Result.PPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCProd', JValue) then
      Result.QBCProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAliqProd', JValue) then
      Result.VAliqProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPIS', JValue) then
      Result.VPIS := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISOutrFromJson(Source: string): TNfeSefazPISOutr;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazPISOutrFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISToJsonValue(Source: TNfeSefazPIS): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.PISAliq) then
      Json.ObjAddProp(Result, 'PISAliq', Self.TNfeSefazPISAliqToJsonValue(Source.PISAliq));
    if Assigned(Source.PISQtde) then
      Json.ObjAddProp(Result, 'PISQtde', Self.TNfeSefazPISQtdeToJsonValue(Source.PISQtde));
    if Assigned(Source.PISNT) then
      Json.ObjAddProp(Result, 'PISNT', Self.TNfeSefazPISNTToJsonValue(Source.PISNT));
    if Assigned(Source.PISOutr) then
      Json.ObjAddProp(Result, 'PISOutr', Self.TNfeSefazPISOutrToJsonValue(Source.PISOutr));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISToJson(Source: TNfeSefazPIS): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazPISToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISFromJsonValue(Source: TJSONValue): TNfeSefazPIS;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazPIS.Create;
  try
    if Json.ObjContains(Source, 'PISAliq', JValue) then
      Result.PISAliq := Self.TNfeSefazPISAliqFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PISQtde', JValue) then
      Result.PISQtde := Self.TNfeSefazPISQtdeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PISNT', JValue) then
      Result.PISNT := Self.TNfeSefazPISNTFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PISOutr', JValue) then
      Result.PISOutr := Self.TNfeSefazPISOutrFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISFromJson(Source: string): TNfeSefazPIS;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazPISFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISSTToJsonValue(Source: TNfeSefazPISST): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PPISHasValue then
      Json.ObjAddProp(Result, 'pPIS', Self.DoubleToJsonValue(Source.PPIS));
    if Source.QBCProdHasValue then
      Json.ObjAddProp(Result, 'qBCProd', Self.DoubleToJsonValue(Source.QBCProd));
    if Source.VAliqProdHasValue then
      Json.ObjAddProp(Result, 'vAliqProd', Self.DoubleToJsonValue(Source.VAliqProd));
    if Source.VPISHasValue then
      Json.ObjAddProp(Result, 'vPIS', Self.DoubleToJsonValue(Source.VPIS));
    if Source.IndSomaPISSTHasValue then
      Json.ObjAddProp(Result, 'indSomaPISST', Self.IntegerToJsonValue(Source.IndSomaPISST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISSTToJson(Source: TNfeSefazPISST): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazPISSTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISSTFromJsonValue(Source: TJSONValue): TNfeSefazPISST;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazPISST.Create;
  try
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pPIS', JValue) then
      Result.PPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCProd', JValue) then
      Result.QBCProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAliqProd', JValue) then
      Result.VAliqProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPIS', JValue) then
      Result.VPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indSomaPISST', JValue) then
      Result.IndSomaPISST := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISSTFromJson(Source: string): TNfeSefazPISST;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazPISSTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSAliqToJsonValue(Source: TNfeSefazCOFINSAliq): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PCOFINSHasValue then
      Json.ObjAddProp(Result, 'pCOFINS', Self.DoubleToJsonValue(Source.PCOFINS));
    if Source.VCOFINSHasValue then
      Json.ObjAddProp(Result, 'vCOFINS', Self.DoubleToJsonValue(Source.VCOFINS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSAliqToJson(Source: TNfeSefazCOFINSAliq): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCOFINSAliqToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSAliqFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSAliq;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCOFINSAliq.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pCOFINS', JValue) then
      Result.PCOFINS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCOFINS', JValue) then
      Result.VCOFINS := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSAliqFromJson(Source: string): TNfeSefazCOFINSAliq;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCOFINSAliqFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSQtdeToJsonValue(Source: TNfeSefazCOFINSQtde): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.QBCProdHasValue then
      Json.ObjAddProp(Result, 'qBCProd', Self.DoubleToJsonValue(Source.QBCProd));
    if Source.VAliqProdHasValue then
      Json.ObjAddProp(Result, 'vAliqProd', Self.DoubleToJsonValue(Source.VAliqProd));
    if Source.VCOFINSHasValue then
      Json.ObjAddProp(Result, 'vCOFINS', Self.DoubleToJsonValue(Source.VCOFINS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSQtdeToJson(Source: TNfeSefazCOFINSQtde): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCOFINSQtdeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSQtdeFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSQtde;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCOFINSQtde.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCProd', JValue) then
      Result.QBCProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAliqProd', JValue) then
      Result.VAliqProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCOFINS', JValue) then
      Result.VCOFINS := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSQtdeFromJson(Source: string): TNfeSefazCOFINSQtde;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCOFINSQtdeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSNTToJsonValue(Source: TNfeSefazCOFINSNT): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSNTToJson(Source: TNfeSefazCOFINSNT): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCOFINSNTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSNTFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSNT;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCOFINSNT.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSNTFromJson(Source: string): TNfeSefazCOFINSNT;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCOFINSNTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSOutrToJsonValue(Source: TNfeSefazCOFINSOutr): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CSTHasValue then
      Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PCOFINSHasValue then
      Json.ObjAddProp(Result, 'pCOFINS', Self.DoubleToJsonValue(Source.PCOFINS));
    if Source.QBCProdHasValue then
      Json.ObjAddProp(Result, 'qBCProd', Self.DoubleToJsonValue(Source.QBCProd));
    if Source.VAliqProdHasValue then
      Json.ObjAddProp(Result, 'vAliqProd', Self.DoubleToJsonValue(Source.VAliqProd));
    if Source.VCOFINSHasValue then
      Json.ObjAddProp(Result, 'vCOFINS', Self.DoubleToJsonValue(Source.VCOFINS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSOutrToJson(Source: TNfeSefazCOFINSOutr): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCOFINSOutrToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSOutrFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSOutr;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCOFINSOutr.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pCOFINS', JValue) then
      Result.PCOFINS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCProd', JValue) then
      Result.QBCProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAliqProd', JValue) then
      Result.VAliqProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCOFINS', JValue) then
      Result.VCOFINS := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSOutrFromJson(Source: string): TNfeSefazCOFINSOutr;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCOFINSOutrFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSToJsonValue(Source: TNfeSefazCOFINS): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.COFINSAliq) then
      Json.ObjAddProp(Result, 'COFINSAliq', Self.TNfeSefazCOFINSAliqToJsonValue(Source.COFINSAliq));
    if Assigned(Source.COFINSQtde) then
      Json.ObjAddProp(Result, 'COFINSQtde', Self.TNfeSefazCOFINSQtdeToJsonValue(Source.COFINSQtde));
    if Assigned(Source.COFINSNT) then
      Json.ObjAddProp(Result, 'COFINSNT', Self.TNfeSefazCOFINSNTToJsonValue(Source.COFINSNT));
    if Assigned(Source.COFINSOutr) then
      Json.ObjAddProp(Result, 'COFINSOutr', Self.TNfeSefazCOFINSOutrToJsonValue(Source.COFINSOutr));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSToJson(Source: TNfeSefazCOFINS): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCOFINSToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSFromJsonValue(Source: TJSONValue): TNfeSefazCOFINS;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCOFINS.Create;
  try
    if Json.ObjContains(Source, 'COFINSAliq', JValue) then
      Result.COFINSAliq := Self.TNfeSefazCOFINSAliqFromJsonValue(JValue);
    if Json.ObjContains(Source, 'COFINSQtde', JValue) then
      Result.COFINSQtde := Self.TNfeSefazCOFINSQtdeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'COFINSNT', JValue) then
      Result.COFINSNT := Self.TNfeSefazCOFINSNTFromJsonValue(JValue);
    if Json.ObjContains(Source, 'COFINSOutr', JValue) then
      Result.COFINSOutr := Self.TNfeSefazCOFINSOutrFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSFromJson(Source: string): TNfeSefazCOFINS;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCOFINSFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSSTToJsonValue(Source: TNfeSefazCOFINSST): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.PCOFINSHasValue then
      Json.ObjAddProp(Result, 'pCOFINS', Self.DoubleToJsonValue(Source.PCOFINS));
    if Source.QBCProdHasValue then
      Json.ObjAddProp(Result, 'qBCProd', Self.DoubleToJsonValue(Source.QBCProd));
    if Source.VAliqProdHasValue then
      Json.ObjAddProp(Result, 'vAliqProd', Self.DoubleToJsonValue(Source.VAliqProd));
    if Source.VCOFINSHasValue then
      Json.ObjAddProp(Result, 'vCOFINS', Self.DoubleToJsonValue(Source.VCOFINS));
    if Source.IndSomaCOFINSSTHasValue then
      Json.ObjAddProp(Result, 'indSomaCOFINSST', Self.IntegerToJsonValue(Source.IndSomaCOFINSST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSSTToJson(Source: TNfeSefazCOFINSST): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCOFINSSTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSSTFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSST;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCOFINSST.Create;
  try
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pCOFINS', JValue) then
      Result.PCOFINS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCProd', JValue) then
      Result.QBCProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAliqProd', JValue) then
      Result.VAliqProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCOFINS', JValue) then
      Result.VCOFINS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indSomaCOFINSST', JValue) then
      Result.IndSomaCOFINSST := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSSTFromJson(Source: string): TNfeSefazCOFINSST;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCOFINSSTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSUFDestToJsonValue(Source: TNfeSefazICMSUFDest): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VBCUFDestHasValue then
      Json.ObjAddProp(Result, 'vBCUFDest', Self.DoubleToJsonValue(Source.VBCUFDest));
    if Source.VBCFCPUFDestHasValue then
      Json.ObjAddProp(Result, 'vBCFCPUFDest', Self.DoubleToJsonValue(Source.VBCFCPUFDest));
    if Source.PFCPUFDestHasValue then
      Json.ObjAddProp(Result, 'pFCPUFDest', Self.DoubleToJsonValue(Source.PFCPUFDest));
    if Source.PICMSUFDestHasValue then
      Json.ObjAddProp(Result, 'pICMSUFDest', Self.DoubleToJsonValue(Source.PICMSUFDest));
    if Source.PICMSInterHasValue then
      Json.ObjAddProp(Result, 'pICMSInter', Self.DoubleToJsonValue(Source.PICMSInter));
    if Source.PICMSInterPartHasValue then
      Json.ObjAddProp(Result, 'pICMSInterPart', Self.DoubleToJsonValue(Source.PICMSInterPart));
    if Source.VFCPUFDestHasValue then
      Json.ObjAddProp(Result, 'vFCPUFDest', Self.DoubleToJsonValue(Source.VFCPUFDest));
    if Source.VICMSUFDestHasValue then
      Json.ObjAddProp(Result, 'vICMSUFDest', Self.DoubleToJsonValue(Source.VICMSUFDest));
    if Source.VICMSUFRemetHasValue then
      Json.ObjAddProp(Result, 'vICMSUFRemet', Self.DoubleToJsonValue(Source.VICMSUFRemet));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSUFDestToJson(Source: TNfeSefazICMSUFDest): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSUFDestToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSUFDestFromJsonValue(Source: TJSONValue): TNfeSefazICMSUFDest;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSUFDest.Create;
  try
    if Json.ObjContains(Source, 'vBCUFDest', JValue) then
      Result.VBCUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPUFDest', JValue) then
      Result.VBCFCPUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPUFDest', JValue) then
      Result.PFCPUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSUFDest', JValue) then
      Result.PICMSUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSInter', JValue) then
      Result.PICMSInter := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSInterPart', JValue) then
      Result.PICMSInterPart := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPUFDest', JValue) then
      Result.VFCPUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSUFDest', JValue) then
      Result.VICMSUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSUFRemet', JValue) then
      Result.VICMSUFRemet := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSUFDestFromJson(Source: string): TNfeSefazICMSUFDest;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSUFDestFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazImpostoToJsonValue(Source: TNfeSefazImposto): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VTotTribHasValue then
      Json.ObjAddProp(Result, 'vTotTrib', Self.DoubleToJsonValue(Source.VTotTrib));
    if Assigned(Source.ICMS) then
      Json.ObjAddProp(Result, 'ICMS', Self.TNfeSefazICMSToJsonValue(Source.ICMS));
    if Assigned(Source.IPI) then
      Json.ObjAddProp(Result, 'IPI', Self.TNfeSefazIpiToJsonValue(Source.IPI));
    if Assigned(Source.II) then
      Json.ObjAddProp(Result, 'II', Self.TNfeSefazIIToJsonValue(Source.II));
    if Assigned(Source.ISSQN) then
      Json.ObjAddProp(Result, 'ISSQN', Self.TNfeSefazISSQNToJsonValue(Source.ISSQN));
    if Assigned(Source.PIS) then
      Json.ObjAddProp(Result, 'PIS', Self.TNfeSefazPISToJsonValue(Source.PIS));
    if Assigned(Source.PISST) then
      Json.ObjAddProp(Result, 'PISST', Self.TNfeSefazPISSTToJsonValue(Source.PISST));
    if Assigned(Source.COFINS) then
      Json.ObjAddProp(Result, 'COFINS', Self.TNfeSefazCOFINSToJsonValue(Source.COFINS));
    if Assigned(Source.COFINSST) then
      Json.ObjAddProp(Result, 'COFINSST', Self.TNfeSefazCOFINSSTToJsonValue(Source.COFINSST));
    if Assigned(Source.ICMSUFDest) then
      Json.ObjAddProp(Result, 'ICMSUFDest', Self.TNfeSefazICMSUFDestToJsonValue(Source.ICMSUFDest));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazImpostoToJson(Source: TNfeSefazImposto): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazImpostoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazImpostoFromJsonValue(Source: TJSONValue): TNfeSefazImposto;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazImposto.Create;
  try
    if Json.ObjContains(Source, 'vTotTrib', JValue) then
      Result.VTotTrib := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS', JValue) then
      Result.ICMS := Self.TNfeSefazICMSFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IPI', JValue) then
      Result.IPI := Self.TNfeSefazIpiFromJsonValue(JValue);
    if Json.ObjContains(Source, 'II', JValue) then
      Result.II := Self.TNfeSefazIIFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ISSQN', JValue) then
      Result.ISSQN := Self.TNfeSefazISSQNFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PIS', JValue) then
      Result.PIS := Self.TNfeSefazPISFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PISST', JValue) then
      Result.PISST := Self.TNfeSefazPISSTFromJsonValue(JValue);
    if Json.ObjContains(Source, 'COFINS', JValue) then
      Result.COFINS := Self.TNfeSefazCOFINSFromJsonValue(JValue);
    if Json.ObjContains(Source, 'COFINSST', JValue) then
      Result.COFINSST := Self.TNfeSefazCOFINSSTFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSUFDest', JValue) then
      Result.ICMSUFDest := Self.TNfeSefazICMSUFDestFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazImpostoFromJson(Source: string): TNfeSefazImposto;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazImpostoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazImpostoDevolIPIToJsonValue(Source: TNfeSefazImpostoDevolIPI): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VIPIDevolHasValue then
      Json.ObjAddProp(Result, 'vIPIDevol', Self.DoubleToJsonValue(Source.VIPIDevol));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazImpostoDevolIPIToJson(Source: TNfeSefazImpostoDevolIPI): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazImpostoDevolIPIToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazImpostoDevolIPIFromJsonValue(Source: TJSONValue): TNfeSefazImpostoDevolIPI;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazImpostoDevolIPI.Create;
  try
    if Json.ObjContains(Source, 'vIPIDevol', JValue) then
      Result.VIPIDevol := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazImpostoDevolIPIFromJson(Source: string): TNfeSefazImpostoDevolIPI;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazImpostoDevolIPIFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazImpostoDevolToJsonValue(Source: TNfeSefazImpostoDevol): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.PDevolHasValue then
      Json.ObjAddProp(Result, 'pDevol', Self.DoubleToJsonValue(Source.PDevol));
    if Assigned(Source.IPI) then
      Json.ObjAddProp(Result, 'IPI', Self.TNfeSefazImpostoDevolIPIToJsonValue(Source.IPI));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazImpostoDevolToJson(Source: TNfeSefazImpostoDevol): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazImpostoDevolToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazImpostoDevolFromJsonValue(Source: TJSONValue): TNfeSefazImpostoDevol;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazImpostoDevol.Create;
  try
    if Json.ObjContains(Source, 'pDevol', JValue) then
      Result.PDevol := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IPI', JValue) then
      Result.IPI := Self.TNfeSefazImpostoDevolIPIFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazImpostoDevolFromJson(Source: string): TNfeSefazImpostoDevol;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazImpostoDevolFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetToJsonValue(Source: TNfeSefazDet): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NItemHasValue then
      Json.ObjAddProp(Result, 'nItem', Self.IntegerToJsonValue(Source.NItem));
    if Assigned(Source.Prod) then
      Json.ObjAddProp(Result, 'prod', Self.TNfeSefazProdToJsonValue(Source.Prod));
    if Assigned(Source.Imposto) then
      Json.ObjAddProp(Result, 'imposto', Self.TNfeSefazImpostoToJsonValue(Source.Imposto));
    if Assigned(Source.ImpostoDevol) then
      Json.ObjAddProp(Result, 'impostoDevol', Self.TNfeSefazImpostoDevolToJsonValue(Source.ImpostoDevol));
    if Source.InfAdProdHasValue then
      Json.ObjAddProp(Result, 'infAdProd', Self.stringToJsonValue(Source.InfAdProd));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetToJson(Source: TNfeSefazDet): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDetToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetFromJsonValue(Source: TJSONValue): TNfeSefazDet;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDet.Create;
  try
    if Json.ObjContains(Source, 'nItem', JValue) then
      Result.NItem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prod', JValue) then
      Result.Prod := Self.TNfeSefazProdFromJsonValue(JValue);
    if Json.ObjContains(Source, 'imposto', JValue) then
      Result.Imposto := Self.TNfeSefazImpostoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'impostoDevol', JValue) then
      Result.ImpostoDevol := Self.TNfeSefazImpostoDevolFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infAdProd', JValue) then
      Result.InfAdProd := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetFromJson(Source: string): TNfeSefazDet;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDetFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetListToJsonValue(Source: TNfeSefazDetList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazDetToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetListToJson(Source: TNfeSefazDetList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDetListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetListFromJsonValue(Source: TJSONValue): TNfeSefazDetList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDetList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazDetFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetListFromJson(Source: string): TNfeSefazDetList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDetListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSTotToJsonValue(Source: TNfeSefazICMSTot): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.VICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.VICMS));
    if Source.VICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.VICMSDeson));
    if Source.VFCPUFDestHasValue then
      Json.ObjAddProp(Result, 'vFCPUFDest', Self.DoubleToJsonValue(Source.VFCPUFDest));
    if Source.VICMSUFDestHasValue then
      Json.ObjAddProp(Result, 'vICMSUFDest', Self.DoubleToJsonValue(Source.VICMSUFDest));
    if Source.VICMSUFRemetHasValue then
      Json.ObjAddProp(Result, 'vICMSUFRemet', Self.DoubleToJsonValue(Source.VICMSUFRemet));
    if Source.VFCPHasValue then
      Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.VFCP));
    if Source.VBCSTHasValue then
      Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.VBCST));
    if Source.VSTHasValue then
      Json.ObjAddProp(Result, 'vST', Self.DoubleToJsonValue(Source.VST));
    if Source.VFCPSTHasValue then
      Json.ObjAddProp(Result, 'vFCPST', Self.DoubleToJsonValue(Source.VFCPST));
    if Source.VFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'vFCPSTRet', Self.DoubleToJsonValue(Source.VFCPSTRet));
    if Source.VProdHasValue then
      Json.ObjAddProp(Result, 'vProd', Self.DoubleToJsonValue(Source.VProd));
    if Source.VFreteHasValue then
      Json.ObjAddProp(Result, 'vFrete', Self.DoubleToJsonValue(Source.VFrete));
    if Source.VSegHasValue then
      Json.ObjAddProp(Result, 'vSeg', Self.DoubleToJsonValue(Source.VSeg));
    if Source.VDescHasValue then
      Json.ObjAddProp(Result, 'vDesc', Self.DoubleToJsonValue(Source.VDesc));
    if Source.VIIHasValue then
      Json.ObjAddProp(Result, 'vII', Self.DoubleToJsonValue(Source.VII));
    if Source.VIPIHasValue then
      Json.ObjAddProp(Result, 'vIPI', Self.DoubleToJsonValue(Source.VIPI));
    if Source.VIPIDevolHasValue then
      Json.ObjAddProp(Result, 'vIPIDevol', Self.DoubleToJsonValue(Source.VIPIDevol));
    if Source.VPISHasValue then
      Json.ObjAddProp(Result, 'vPIS', Self.DoubleToJsonValue(Source.VPIS));
    if Source.VCOFINSHasValue then
      Json.ObjAddProp(Result, 'vCOFINS', Self.DoubleToJsonValue(Source.VCOFINS));
    if Source.VOutroHasValue then
      Json.ObjAddProp(Result, 'vOutro', Self.DoubleToJsonValue(Source.VOutro));
    if Source.VNFHasValue then
      Json.ObjAddProp(Result, 'vNF', Self.DoubleToJsonValue(Source.VNF));
    if Source.VTotTribHasValue then
      Json.ObjAddProp(Result, 'vTotTrib', Self.DoubleToJsonValue(Source.VTotTrib));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSTotToJson(Source: TNfeSefazICMSTot): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSTotToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSTotFromJsonValue(Source: TJSONValue): TNfeSefazICMSTot;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSTot.Create;
  try
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.VICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.VICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPUFDest', JValue) then
      Result.VFCPUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSUFDest', JValue) then
      Result.VICMSUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSUFRemet', JValue) then
      Result.VICMSUFRemet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.VFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.VBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vST', JValue) then
      Result.VST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPST', JValue) then
      Result.VFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPSTRet', JValue) then
      Result.VFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vProd', JValue) then
      Result.VProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFrete', JValue) then
      Result.VFrete := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vSeg', JValue) then
      Result.VSeg := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDesc', JValue) then
      Result.VDesc := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vII', JValue) then
      Result.VII := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vIPI', JValue) then
      Result.VIPI := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vIPIDevol', JValue) then
      Result.VIPIDevol := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPIS', JValue) then
      Result.VPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCOFINS', JValue) then
      Result.VCOFINS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vOutro', JValue) then
      Result.VOutro := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vNF', JValue) then
      Result.VNF := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vTotTrib', JValue) then
      Result.VTotTrib := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSTotFromJson(Source: string): TNfeSefazICMSTot;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSTotFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazISSQNtotToJsonValue(Source: TNfeSefazISSQNtot): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VServHasValue then
      Json.ObjAddProp(Result, 'vServ', Self.DoubleToJsonValue(Source.VServ));
    if Source.VBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.VBC));
    if Source.VISSHasValue then
      Json.ObjAddProp(Result, 'vISS', Self.DoubleToJsonValue(Source.VISS));
    if Source.VPISHasValue then
      Json.ObjAddProp(Result, 'vPIS', Self.DoubleToJsonValue(Source.VPIS));
    if Source.VCOFINSHasValue then
      Json.ObjAddProp(Result, 'vCOFINS', Self.DoubleToJsonValue(Source.VCOFINS));
    if Source.DCompetHasValue then
      Json.ObjAddProp(Result, 'dCompet', Self.TDateToJsonValue(Source.DCompet));
    if Source.VDeducaoHasValue then
      Json.ObjAddProp(Result, 'vDeducao', Self.DoubleToJsonValue(Source.VDeducao));
    if Source.VOutroHasValue then
      Json.ObjAddProp(Result, 'vOutro', Self.DoubleToJsonValue(Source.VOutro));
    if Source.VDescIncondHasValue then
      Json.ObjAddProp(Result, 'vDescIncond', Self.DoubleToJsonValue(Source.VDescIncond));
    if Source.VDescCondHasValue then
      Json.ObjAddProp(Result, 'vDescCond', Self.DoubleToJsonValue(Source.VDescCond));
    if Source.VISSRetHasValue then
      Json.ObjAddProp(Result, 'vISSRet', Self.DoubleToJsonValue(Source.VISSRet));
    if Source.CRegTribHasValue then
      Json.ObjAddProp(Result, 'cRegTrib', Self.IntegerToJsonValue(Source.CRegTrib));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazISSQNtotToJson(Source: TNfeSefazISSQNtot): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazISSQNtotToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazISSQNtotFromJsonValue(Source: TJSONValue): TNfeSefazISSQNtot;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazISSQNtot.Create;
  try
    if Json.ObjContains(Source, 'vServ', JValue) then
      Result.VServ := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.VBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vISS', JValue) then
      Result.VISS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPIS', JValue) then
      Result.VPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCOFINS', JValue) then
      Result.VCOFINS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dCompet', JValue) then
      Result.DCompet := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDeducao', JValue) then
      Result.VDeducao := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vOutro', JValue) then
      Result.VOutro := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDescIncond', JValue) then
      Result.VDescIncond := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDescCond', JValue) then
      Result.VDescCond := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vISSRet', JValue) then
      Result.VISSRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cRegTrib', JValue) then
      Result.CRegTrib := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazISSQNtotFromJson(Source: string): TNfeSefazISSQNtot;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazISSQNtotFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRetTribToJsonValue(Source: TNfeSefazRetTrib): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VRetPISHasValue then
      Json.ObjAddProp(Result, 'vRetPIS', Self.DoubleToJsonValue(Source.VRetPIS));
    if Source.VRetCOFINSHasValue then
      Json.ObjAddProp(Result, 'vRetCOFINS', Self.DoubleToJsonValue(Source.VRetCOFINS));
    if Source.VRetCSLLHasValue then
      Json.ObjAddProp(Result, 'vRetCSLL', Self.DoubleToJsonValue(Source.VRetCSLL));
    if Source.VBCIRRFHasValue then
      Json.ObjAddProp(Result, 'vBCIRRF', Self.DoubleToJsonValue(Source.VBCIRRF));
    if Source.VIRRFHasValue then
      Json.ObjAddProp(Result, 'vIRRF', Self.DoubleToJsonValue(Source.VIRRF));
    if Source.VBCRetPrevHasValue then
      Json.ObjAddProp(Result, 'vBCRetPrev', Self.DoubleToJsonValue(Source.VBCRetPrev));
    if Source.VRetPrevHasValue then
      Json.ObjAddProp(Result, 'vRetPrev', Self.DoubleToJsonValue(Source.VRetPrev));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRetTribToJson(Source: TNfeSefazRetTrib): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazRetTribToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRetTribFromJsonValue(Source: TJSONValue): TNfeSefazRetTrib;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazRetTrib.Create;
  try
    if Json.ObjContains(Source, 'vRetPIS', JValue) then
      Result.VRetPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vRetCOFINS', JValue) then
      Result.VRetCOFINS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vRetCSLL', JValue) then
      Result.VRetCSLL := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCIRRF', JValue) then
      Result.VBCIRRF := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vIRRF', JValue) then
      Result.VIRRF := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCRetPrev', JValue) then
      Result.VBCRetPrev := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vRetPrev', JValue) then
      Result.VRetPrev := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRetTribFromJson(Source: string): TNfeSefazRetTrib;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazRetTribFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazTotalToJsonValue(Source: TNfeSefazTotal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.ICMSTot) then
      Json.ObjAddProp(Result, 'ICMSTot', Self.TNfeSefazICMSTotToJsonValue(Source.ICMSTot));
    if Assigned(Source.ISSQNtot) then
      Json.ObjAddProp(Result, 'ISSQNtot', Self.TNfeSefazISSQNtotToJsonValue(Source.ISSQNtot));
    if Assigned(Source.RetTrib) then
      Json.ObjAddProp(Result, 'retTrib', Self.TNfeSefazRetTribToJsonValue(Source.RetTrib));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazTotalToJson(Source: TNfeSefazTotal): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazTotalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazTotalFromJsonValue(Source: TJSONValue): TNfeSefazTotal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazTotal.Create;
  try
    if Json.ObjContains(Source, 'ICMSTot', JValue) then
      Result.ICMSTot := Self.TNfeSefazICMSTotFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ISSQNtot', JValue) then
      Result.ISSQNtot := Self.TNfeSefazISSQNtotFromJsonValue(JValue);
    if Json.ObjContains(Source, 'retTrib', JValue) then
      Result.RetTrib := Self.TNfeSefazRetTribFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazTotalFromJson(Source: string): TNfeSefazTotal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazTotalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazTransportaToJsonValue(Source: TNfeSefazTransporta): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.XNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.XNome));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.XEnderHasValue then
      Json.ObjAddProp(Result, 'xEnder', Self.stringToJsonValue(Source.XEnder));
    if Source.XMunHasValue then
      Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.XMun));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazTransportaToJson(Source: TNfeSefazTransporta): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazTransportaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazTransportaFromJsonValue(Source: TJSONValue): TNfeSefazTransporta;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazTransporta.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.XNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xEnder', JValue) then
      Result.XEnder := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.XMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazTransportaFromJson(Source: string): TNfeSefazTransporta;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazTransportaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRetTranspToJsonValue(Source: TNfeSefazRetTransp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VServHasValue then
      Json.ObjAddProp(Result, 'vServ', Self.DoubleToJsonValue(Source.VServ));
    if Source.VBCRetHasValue then
      Json.ObjAddProp(Result, 'vBCRet', Self.DoubleToJsonValue(Source.VBCRet));
    if Source.PICMSRetHasValue then
      Json.ObjAddProp(Result, 'pICMSRet', Self.DoubleToJsonValue(Source.PICMSRet));
    if Source.VICMSRetHasValue then
      Json.ObjAddProp(Result, 'vICMSRet', Self.DoubleToJsonValue(Source.VICMSRet));
    if Source.CFOPHasValue then
      Json.ObjAddProp(Result, 'CFOP', Self.IntegerToJsonValue(Source.CFOP));
    if Source.CMunFGHasValue then
      Json.ObjAddProp(Result, 'cMunFG', Self.IntegerToJsonValue(Source.CMunFG));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRetTranspToJson(Source: TNfeSefazRetTransp): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazRetTranspToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRetTranspFromJsonValue(Source: TJSONValue): TNfeSefazRetTransp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazRetTransp.Create;
  try
    if Json.ObjContains(Source, 'vServ', JValue) then
      Result.VServ := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCRet', JValue) then
      Result.VBCRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSRet', JValue) then
      Result.PICMSRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSRet', JValue) then
      Result.VICMSRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CFOP', JValue) then
      Result.CFOP := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMunFG', JValue) then
      Result.CMunFG := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRetTranspFromJson(Source: string): TNfeSefazRetTransp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazRetTranspFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVeiculoToJsonValue(Source: TNfeSefazVeiculo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.PlacaHasValue then
      Json.ObjAddProp(Result, 'placa', Self.stringToJsonValue(Source.Placa));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.RNTCHasValue then
      Json.ObjAddProp(Result, 'RNTC', Self.stringToJsonValue(Source.RNTC));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVeiculoToJson(Source: TNfeSefazVeiculo): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazVeiculoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVeiculoFromJsonValue(Source: TJSONValue): TNfeSefazVeiculo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazVeiculo.Create;
  try
    if Json.ObjContains(Source, 'placa', JValue) then
      Result.Placa := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'RNTC', JValue) then
      Result.RNTC := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVeiculoFromJson(Source: string): TNfeSefazVeiculo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazVeiculoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVeiculoListToJsonValue(Source: TNfeSefazVeiculoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazVeiculoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVeiculoListToJson(Source: TNfeSefazVeiculoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazVeiculoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVeiculoListFromJsonValue(Source: TJSONValue): TNfeSefazVeiculoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazVeiculoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazVeiculoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVeiculoListFromJson(Source: string): TNfeSefazVeiculoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazVeiculoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazLacresToJsonValue(Source: TNfeSefazLacres): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NLacreHasValue then
      Json.ObjAddProp(Result, 'nLacre', Self.stringToJsonValue(Source.NLacre));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazLacresToJson(Source: TNfeSefazLacres): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazLacresToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazLacresFromJsonValue(Source: TJSONValue): TNfeSefazLacres;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazLacres.Create;
  try
    if Json.ObjContains(Source, 'nLacre', JValue) then
      Result.NLacre := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazLacresFromJson(Source: string): TNfeSefazLacres;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazLacresFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazLacresListToJsonValue(Source: TNfeSefazLacresList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazLacresToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazLacresListToJson(Source: TNfeSefazLacresList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazLacresListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazLacresListFromJsonValue(Source: TJSONValue): TNfeSefazLacresList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazLacresList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazLacresFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazLacresListFromJson(Source: string): TNfeSefazLacresList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazLacresListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVolToJsonValue(Source: TNfeSefazVol): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.QVolHasValue then
      Json.ObjAddProp(Result, 'qVol', Self.IntegerToJsonValue(Source.QVol));
    if Source.EspHasValue then
      Json.ObjAddProp(Result, 'esp', Self.stringToJsonValue(Source.Esp));
    if Source.MarcaHasValue then
      Json.ObjAddProp(Result, 'marca', Self.stringToJsonValue(Source.Marca));
    if Source.NVolHasValue then
      Json.ObjAddProp(Result, 'nVol', Self.stringToJsonValue(Source.NVol));
    if Source.PesoLHasValue then
      Json.ObjAddProp(Result, 'pesoL', Self.DoubleToJsonValue(Source.PesoL));
    if Source.PesoBHasValue then
      Json.ObjAddProp(Result, 'pesoB', Self.DoubleToJsonValue(Source.PesoB));
    if Assigned(Source.Lacres) then
      Json.ObjAddProp(Result, 'lacres', Self.TNfeSefazLacresListToJsonValue(Source.Lacres));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVolToJson(Source: TNfeSefazVol): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazVolToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVolFromJsonValue(Source: TJSONValue): TNfeSefazVol;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazVol.Create;
  try
    if Json.ObjContains(Source, 'qVol', JValue) then
      Result.QVol := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'esp', JValue) then
      Result.Esp := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'marca', JValue) then
      Result.Marca := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nVol', JValue) then
      Result.NVol := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pesoL', JValue) then
      Result.PesoL := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pesoB', JValue) then
      Result.PesoB := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lacres', JValue) then
      Result.Lacres := Self.TNfeSefazLacresListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVolFromJson(Source: string): TNfeSefazVol;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazVolFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVolListToJsonValue(Source: TNfeSefazVolList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazVolToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVolListToJson(Source: TNfeSefazVolList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazVolListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVolListFromJsonValue(Source: TJSONValue): TNfeSefazVolList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazVolList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazVolFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVolListFromJson(Source: string): TNfeSefazVolList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazVolListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazTranspToJsonValue(Source: TNfeSefazTransp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.ModFreteHasValue then
      Json.ObjAddProp(Result, 'modFrete', Self.IntegerToJsonValue(Source.ModFrete));
    if Assigned(Source.Transporta) then
      Json.ObjAddProp(Result, 'transporta', Self.TNfeSefazTransportaToJsonValue(Source.Transporta));
    if Assigned(Source.RetTransp) then
      Json.ObjAddProp(Result, 'retTransp', Self.TNfeSefazRetTranspToJsonValue(Source.RetTransp));
    if Assigned(Source.VeicTransp) then
      Json.ObjAddProp(Result, 'veicTransp', Self.TNfeSefazVeiculoToJsonValue(Source.VeicTransp));
    if Assigned(Source.Reboque) then
      Json.ObjAddProp(Result, 'reboque', Self.TNfeSefazVeiculoListToJsonValue(Source.Reboque));
    if Source.VagaoHasValue then
      Json.ObjAddProp(Result, 'vagao', Self.stringToJsonValue(Source.Vagao));
    if Source.BalsaHasValue then
      Json.ObjAddProp(Result, 'balsa', Self.stringToJsonValue(Source.Balsa));
    if Assigned(Source.Vol) then
      Json.ObjAddProp(Result, 'vol', Self.TNfeSefazVolListToJsonValue(Source.Vol));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazTranspToJson(Source: TNfeSefazTransp): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazTranspToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazTranspFromJsonValue(Source: TJSONValue): TNfeSefazTransp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazTransp.Create;
  try
    if Json.ObjContains(Source, 'modFrete', JValue) then
      Result.ModFrete := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'transporta', JValue) then
      Result.Transporta := Self.TNfeSefazTransportaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'retTransp', JValue) then
      Result.RetTransp := Self.TNfeSefazRetTranspFromJsonValue(JValue);
    if Json.ObjContains(Source, 'veicTransp', JValue) then
      Result.VeicTransp := Self.TNfeSefazVeiculoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'reboque', JValue) then
      Result.Reboque := Self.TNfeSefazVeiculoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vagao', JValue) then
      Result.Vagao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'balsa', JValue) then
      Result.Balsa := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vol', JValue) then
      Result.Vol := Self.TNfeSefazVolListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazTranspFromJson(Source: string): TNfeSefazTransp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazTranspFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazFatToJsonValue(Source: TNfeSefazFat): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NFatHasValue then
      Json.ObjAddProp(Result, 'nFat', Self.stringToJsonValue(Source.NFat));
    if Source.VOrigHasValue then
      Json.ObjAddProp(Result, 'vOrig', Self.DoubleToJsonValue(Source.VOrig));
    if Source.VDescHasValue then
      Json.ObjAddProp(Result, 'vDesc', Self.DoubleToJsonValue(Source.VDesc));
    if Source.VLiqHasValue then
      Json.ObjAddProp(Result, 'vLiq', Self.DoubleToJsonValue(Source.VLiq));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazFatToJson(Source: TNfeSefazFat): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazFatToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazFatFromJsonValue(Source: TJSONValue): TNfeSefazFat;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazFat.Create;
  try
    if Json.ObjContains(Source, 'nFat', JValue) then
      Result.NFat := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vOrig', JValue) then
      Result.VOrig := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDesc', JValue) then
      Result.VDesc := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vLiq', JValue) then
      Result.VLiq := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazFatFromJson(Source: string): TNfeSefazFat;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazFatFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDupToJsonValue(Source: TNfeSefazDup): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NDupHasValue then
      Json.ObjAddProp(Result, 'nDup', Self.stringToJsonValue(Source.NDup));
    if Source.DVencHasValue then
      Json.ObjAddProp(Result, 'dVenc', Self.TDateToJsonValue(Source.DVenc));
    if Source.VDupHasValue then
      Json.ObjAddProp(Result, 'vDup', Self.DoubleToJsonValue(Source.VDup));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDupToJson(Source: TNfeSefazDup): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDupToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDupFromJsonValue(Source: TJSONValue): TNfeSefazDup;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDup.Create;
  try
    if Json.ObjContains(Source, 'nDup', JValue) then
      Result.NDup := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dVenc', JValue) then
      Result.DVenc := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDup', JValue) then
      Result.VDup := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDupFromJson(Source: string): TNfeSefazDup;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDupFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDupListToJsonValue(Source: TNfeSefazDupList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazDupToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDupListToJson(Source: TNfeSefazDupList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDupListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDupListFromJsonValue(Source: TJSONValue): TNfeSefazDupList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDupList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazDupFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDupListFromJson(Source: string): TNfeSefazDupList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDupListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCobrToJsonValue(Source: TNfeSefazCobr): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.Fat) then
      Json.ObjAddProp(Result, 'fat', Self.TNfeSefazFatToJsonValue(Source.Fat));
    if Assigned(Source.Dup) then
      Json.ObjAddProp(Result, 'dup', Self.TNfeSefazDupListToJsonValue(Source.Dup));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCobrToJson(Source: TNfeSefazCobr): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCobrToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCobrFromJsonValue(Source: TJSONValue): TNfeSefazCobr;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCobr.Create;
  try
    if Json.ObjContains(Source, 'fat', JValue) then
      Result.Fat := Self.TNfeSefazFatFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dup', JValue) then
      Result.Dup := Self.TNfeSefazDupListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCobrFromJson(Source: string): TNfeSefazCobr;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCobrFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCardToJsonValue(Source: TNfeSefazCard): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TpIntegraHasValue then
      Json.ObjAddProp(Result, 'tpIntegra', Self.IntegerToJsonValue(Source.TpIntegra));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.TBandHasValue then
      Json.ObjAddProp(Result, 'tBand', Self.stringToJsonValue(Source.TBand));
    if Source.CAutHasValue then
      Json.ObjAddProp(Result, 'cAut', Self.stringToJsonValue(Source.CAut));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCardToJson(Source: TNfeSefazCard): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCardToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCardFromJsonValue(Source: TJSONValue): TNfeSefazCard;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCard.Create;
  try
    if Json.ObjContains(Source, 'tpIntegra', JValue) then
      Result.TpIntegra := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tBand', JValue) then
      Result.TBand := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cAut', JValue) then
      Result.CAut := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCardFromJson(Source: string): TNfeSefazCard;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCardFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetPagToJsonValue(Source: TNfeSefazDetPag): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.IndPagHasValue then
      Json.ObjAddProp(Result, 'indPag', Self.IntegerToJsonValue(Source.IndPag));
    if Source.TPagHasValue then
      Json.ObjAddProp(Result, 'tPag', Self.stringToJsonValue(Source.TPag));
    if Source.XPagHasValue then
      Json.ObjAddProp(Result, 'xPag', Self.stringToJsonValue(Source.XPag));
    if Source.VPagHasValue then
      Json.ObjAddProp(Result, 'vPag', Self.DoubleToJsonValue(Source.VPag));
    if Assigned(Source.Card) then
      Json.ObjAddProp(Result, 'card', Self.TNfeSefazCardToJsonValue(Source.Card));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetPagToJson(Source: TNfeSefazDetPag): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDetPagToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetPagFromJsonValue(Source: TJSONValue): TNfeSefazDetPag;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDetPag.Create;
  try
    if Json.ObjContains(Source, 'indPag', JValue) then
      Result.IndPag := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tPag', JValue) then
      Result.TPag := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xPag', JValue) then
      Result.XPag := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPag', JValue) then
      Result.VPag := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'card', JValue) then
      Result.Card := Self.TNfeSefazCardFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetPagFromJson(Source: string): TNfeSefazDetPag;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDetPagFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetPagListToJsonValue(Source: TNfeSefazDetPagList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazDetPagToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetPagListToJson(Source: TNfeSefazDetPagList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDetPagListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetPagListFromJsonValue(Source: TJSONValue): TNfeSefazDetPagList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDetPagList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazDetPagFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetPagListFromJson(Source: string): TNfeSefazDetPagList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDetPagListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPagToJsonValue(Source: TNfeSefazPag): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.DetPag) then
      Json.ObjAddProp(Result, 'detPag', Self.TNfeSefazDetPagListToJsonValue(Source.DetPag));
    if Source.VTrocoHasValue then
      Json.ObjAddProp(Result, 'vTroco', Self.DoubleToJsonValue(Source.VTroco));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPagToJson(Source: TNfeSefazPag): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazPagToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPagFromJsonValue(Source: TJSONValue): TNfeSefazPag;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazPag.Create;
  try
    if Json.ObjContains(Source, 'detPag', JValue) then
      Result.DetPag := Self.TNfeSefazDetPagListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vTroco', JValue) then
      Result.VTroco := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPagFromJson(Source: string): TNfeSefazPag;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazPagFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfIntermedToJsonValue(Source: TNfeSefazInfIntermed): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.IdCadIntTranHasValue then
      Json.ObjAddProp(Result, 'idCadIntTran', Self.stringToJsonValue(Source.IdCadIntTran));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfIntermedToJson(Source: TNfeSefazInfIntermed): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfIntermedToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfIntermedFromJsonValue(Source: TJSONValue): TNfeSefazInfIntermed;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfIntermed.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idCadIntTran', JValue) then
      Result.IdCadIntTran := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfIntermedFromJson(Source: string): TNfeSefazInfIntermed;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfIntermedFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazObsContToJsonValue(Source: TNfeSefazObsCont): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XCampoHasValue then
      Json.ObjAddProp(Result, 'xCampo', Self.stringToJsonValue(Source.XCampo));
    if Source.XTextoHasValue then
      Json.ObjAddProp(Result, 'xTexto', Self.stringToJsonValue(Source.XTexto));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazObsContToJson(Source: TNfeSefazObsCont): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazObsContToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazObsContFromJsonValue(Source: TJSONValue): TNfeSefazObsCont;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazObsCont.Create;
  try
    if Json.ObjContains(Source, 'xCampo', JValue) then
      Result.XCampo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTexto', JValue) then
      Result.XTexto := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazObsContFromJson(Source: string): TNfeSefazObsCont;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazObsContFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazObsContListToJsonValue(Source: TNfeSefazObsContList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazObsContToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazObsContListToJson(Source: TNfeSefazObsContList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazObsContListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazObsContListFromJsonValue(Source: TJSONValue): TNfeSefazObsContList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazObsContList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazObsContFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazObsContListFromJson(Source: string): TNfeSefazObsContList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazObsContListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazObsFiscoToJsonValue(Source: TNfeSefazObsFisco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XCampoHasValue then
      Json.ObjAddProp(Result, 'xCampo', Self.stringToJsonValue(Source.XCampo));
    if Source.XTextoHasValue then
      Json.ObjAddProp(Result, 'xTexto', Self.stringToJsonValue(Source.XTexto));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazObsFiscoToJson(Source: TNfeSefazObsFisco): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazObsFiscoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazObsFiscoFromJsonValue(Source: TJSONValue): TNfeSefazObsFisco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazObsFisco.Create;
  try
    if Json.ObjContains(Source, 'xCampo', JValue) then
      Result.XCampo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTexto', JValue) then
      Result.XTexto := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazObsFiscoFromJson(Source: string): TNfeSefazObsFisco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazObsFiscoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazObsFiscoListToJsonValue(Source: TNfeSefazObsFiscoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazObsFiscoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazObsFiscoListToJson(Source: TNfeSefazObsFiscoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazObsFiscoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazObsFiscoListFromJsonValue(Source: TJSONValue): TNfeSefazObsFiscoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazObsFiscoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazObsFiscoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazObsFiscoListFromJson(Source: string): TNfeSefazObsFiscoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazObsFiscoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazProcRefToJsonValue(Source: TNfeSefazProcRef): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.NProcHasValue then
      Json.ObjAddProp(Result, 'nProc', Self.stringToJsonValue(Source.NProc));
    if Source.IndProcHasValue then
      Json.ObjAddProp(Result, 'indProc', Self.IntegerToJsonValue(Source.IndProc));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazProcRefToJson(Source: TNfeSefazProcRef): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazProcRefToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazProcRefFromJsonValue(Source: TJSONValue): TNfeSefazProcRef;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazProcRef.Create;
  try
    if Json.ObjContains(Source, 'nProc', JValue) then
      Result.NProc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indProc', JValue) then
      Result.IndProc := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazProcRefFromJson(Source: string): TNfeSefazProcRef;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazProcRefFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazProcRefListToJsonValue(Source: TNfeSefazProcRefList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazProcRefToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazProcRefListToJson(Source: TNfeSefazProcRefList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazProcRefListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazProcRefListFromJsonValue(Source: TJSONValue): TNfeSefazProcRefList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazProcRefList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazProcRefFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazProcRefListFromJson(Source: string): TNfeSefazProcRefList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazProcRefListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicToJsonValue(Source: TNfeSefazInfAdic): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.InfAdFiscoHasValue then
      Json.ObjAddProp(Result, 'infAdFisco', Self.stringToJsonValue(Source.InfAdFisco));
    if Source.InfCplHasValue then
      Json.ObjAddProp(Result, 'infCpl', Self.stringToJsonValue(Source.InfCpl));
    if Assigned(Source.ObsCont) then
      Json.ObjAddProp(Result, 'obsCont', Self.TNfeSefazObsContListToJsonValue(Source.ObsCont));
    if Assigned(Source.ObsFisco) then
      Json.ObjAddProp(Result, 'obsFisco', Self.TNfeSefazObsFiscoListToJsonValue(Source.ObsFisco));
    if Assigned(Source.ProcRef) then
      Json.ObjAddProp(Result, 'procRef', Self.TNfeSefazProcRefListToJsonValue(Source.ProcRef));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicToJson(Source: TNfeSefazInfAdic): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfAdicToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicFromJsonValue(Source: TJSONValue): TNfeSefazInfAdic;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfAdic.Create;
  try
    if Json.ObjContains(Source, 'infAdFisco', JValue) then
      Result.InfAdFisco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCpl', JValue) then
      Result.InfCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'obsCont', JValue) then
      Result.ObsCont := Self.TNfeSefazObsContListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'obsFisco', JValue) then
      Result.ObsFisco := Self.TNfeSefazObsFiscoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'procRef', JValue) then
      Result.ProcRef := Self.TNfeSefazProcRefListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicFromJson(Source: string): TNfeSefazInfAdic;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfAdicFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazExportaToJsonValue(Source: TNfeSefazExporta): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.UFSaidaPaisHasValue then
      Json.ObjAddProp(Result, 'UFSaidaPais', Self.stringToJsonValue(Source.UFSaidaPais));
    if Source.XLocExportaHasValue then
      Json.ObjAddProp(Result, 'xLocExporta', Self.stringToJsonValue(Source.XLocExporta));
    if Source.XLocDespachoHasValue then
      Json.ObjAddProp(Result, 'xLocDespacho', Self.stringToJsonValue(Source.XLocDespacho));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazExportaToJson(Source: TNfeSefazExporta): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazExportaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazExportaFromJsonValue(Source: TJSONValue): TNfeSefazExporta;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazExporta.Create;
  try
    if Json.ObjContains(Source, 'UFSaidaPais', JValue) then
      Result.UFSaidaPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xLocExporta', JValue) then
      Result.XLocExporta := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xLocDespacho', JValue) then
      Result.XLocDespacho := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazExportaFromJson(Source: string): TNfeSefazExporta;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazExportaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCompraToJsonValue(Source: TNfeSefazCompra): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XNEmpHasValue then
      Json.ObjAddProp(Result, 'xNEmp', Self.stringToJsonValue(Source.XNEmp));
    if Source.XPedHasValue then
      Json.ObjAddProp(Result, 'xPed', Self.stringToJsonValue(Source.XPed));
    if Source.XContHasValue then
      Json.ObjAddProp(Result, 'xCont', Self.stringToJsonValue(Source.XCont));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCompraToJson(Source: TNfeSefazCompra): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCompraToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCompraFromJsonValue(Source: TJSONValue): TNfeSefazCompra;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCompra.Create;
  try
    if Json.ObjContains(Source, 'xNEmp', JValue) then
      Result.XNEmp := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xPed', JValue) then
      Result.XPed := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCont', JValue) then
      Result.XCont := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCompraFromJson(Source: string): TNfeSefazCompra;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCompraFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazForDiaToJsonValue(Source: TNfeSefazForDia): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.DiaHasValue then
      Json.ObjAddProp(Result, 'dia', Self.IntegerToJsonValue(Source.Dia));
    if Source.QtdeHasValue then
      Json.ObjAddProp(Result, 'qtde', Self.DoubleToJsonValue(Source.Qtde));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazForDiaToJson(Source: TNfeSefazForDia): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazForDiaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazForDiaFromJsonValue(Source: TJSONValue): TNfeSefazForDia;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazForDia.Create;
  try
    if Json.ObjContains(Source, 'dia', JValue) then
      Result.Dia := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qtde', JValue) then
      Result.Qtde := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazForDiaFromJson(Source: string): TNfeSefazForDia;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazForDiaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazForDiaListToJsonValue(Source: TNfeSefazForDiaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazForDiaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazForDiaListToJson(Source: TNfeSefazForDiaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazForDiaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazForDiaListFromJsonValue(Source: TJSONValue): TNfeSefazForDiaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazForDiaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazForDiaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazForDiaListFromJson(Source: string): TNfeSefazForDiaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazForDiaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDeducToJsonValue(Source: TNfeSefazDeduc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XDedHasValue then
      Json.ObjAddProp(Result, 'xDed', Self.stringToJsonValue(Source.XDed));
    if Source.VDedHasValue then
      Json.ObjAddProp(Result, 'vDed', Self.DoubleToJsonValue(Source.VDed));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDeducToJson(Source: TNfeSefazDeduc): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDeducToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDeducFromJsonValue(Source: TJSONValue): TNfeSefazDeduc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDeduc.Create;
  try
    if Json.ObjContains(Source, 'xDed', JValue) then
      Result.XDed := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDed', JValue) then
      Result.VDed := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDeducFromJson(Source: string): TNfeSefazDeduc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDeducFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDeducListToJsonValue(Source: TNfeSefazDeducList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazDeducToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDeducListToJson(Source: TNfeSefazDeducList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDeducListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDeducListFromJsonValue(Source: TJSONValue): TNfeSefazDeducList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDeducList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazDeducFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDeducListFromJson(Source: string): TNfeSefazDeducList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDeducListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCanaToJsonValue(Source: TNfeSefazCana): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.SafraHasValue then
      Json.ObjAddProp(Result, 'safra', Self.stringToJsonValue(Source.Safra));
    if Source.RefHasValue then
      Json.ObjAddProp(Result, 'ref', Self.stringToJsonValue(Source.Ref));
    if Assigned(Source.ForDia) then
      Json.ObjAddProp(Result, 'forDia', Self.TNfeSefazForDiaListToJsonValue(Source.ForDia));
    if Source.QTotMesHasValue then
      Json.ObjAddProp(Result, 'qTotMes', Self.DoubleToJsonValue(Source.QTotMes));
    if Source.QTotAntHasValue then
      Json.ObjAddProp(Result, 'qTotAnt', Self.DoubleToJsonValue(Source.QTotAnt));
    if Source.QTotGerHasValue then
      Json.ObjAddProp(Result, 'qTotGer', Self.DoubleToJsonValue(Source.QTotGer));
    if Assigned(Source.Deduc) then
      Json.ObjAddProp(Result, 'deduc', Self.TNfeSefazDeducListToJsonValue(Source.Deduc));
    if Source.VForHasValue then
      Json.ObjAddProp(Result, 'vFor', Self.DoubleToJsonValue(Source.VFor));
    if Source.VTotDedHasValue then
      Json.ObjAddProp(Result, 'vTotDed', Self.DoubleToJsonValue(Source.VTotDed));
    if Source.VLiqForHasValue then
      Json.ObjAddProp(Result, 'vLiqFor', Self.DoubleToJsonValue(Source.VLiqFor));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCanaToJson(Source: TNfeSefazCana): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCanaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCanaFromJsonValue(Source: TJSONValue): TNfeSefazCana;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCana.Create;
  try
    if Json.ObjContains(Source, 'safra', JValue) then
      Result.Safra := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ref', JValue) then
      Result.Ref := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'forDia', JValue) then
      Result.ForDia := Self.TNfeSefazForDiaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTotMes', JValue) then
      Result.QTotMes := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTotAnt', JValue) then
      Result.QTotAnt := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTotGer', JValue) then
      Result.QTotGer := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'deduc', JValue) then
      Result.Deduc := Self.TNfeSefazDeducListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFor', JValue) then
      Result.VFor := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vTotDed', JValue) then
      Result.VTotDed := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vLiqFor', JValue) then
      Result.VLiqFor := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCanaFromJson(Source: string): TNfeSefazCana;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCanaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfRespTecToJsonValue(Source: TNfeSefazInfRespTec): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.XContatoHasValue then
      Json.ObjAddProp(Result, 'xContato', Self.stringToJsonValue(Source.XContato));
    if Source.EmailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.Email));
    if Source.FoneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.Fone));
    if Source.IdCSRTHasValue then
      Json.ObjAddProp(Result, 'idCSRT', Self.IntegerToJsonValue(Source.IdCSRT));
    if Source.HashCSRTHasValue then
      Json.ObjAddProp(Result, 'hashCSRT', Self.stringToJsonValue(Source.HashCSRT));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfRespTecToJson(Source: TNfeSefazInfRespTec): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfRespTecToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfRespTecFromJsonValue(Source: TJSONValue): TNfeSefazInfRespTec;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfRespTec.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xContato', JValue) then
      Result.XContato := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.Email := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.Fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idCSRT', JValue) then
      Result.IdCSRT := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'hashCSRT', JValue) then
      Result.HashCSRT := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfRespTecFromJson(Source: string): TNfeSefazInfRespTec;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfRespTecFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfSolicNFFToJsonValue(Source: TNfeSefazInfSolicNFF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.XSolicHasValue then
      Json.ObjAddProp(Result, 'xSolic', Self.stringToJsonValue(Source.XSolic));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfSolicNFFToJson(Source: TNfeSefazInfSolicNFF): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfSolicNFFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfSolicNFFFromJsonValue(Source: TJSONValue): TNfeSefazInfSolicNFF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfSolicNFF.Create;
  try
    if Json.ObjContains(Source, 'xSolic', JValue) then
      Result.XSolic := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfSolicNFFFromJson(Source: string): TNfeSefazInfSolicNFF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfSolicNFFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfNFeToJsonValue(Source: TNfeSefazInfNFe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.VersaoHasValue then
      Json.ObjAddProp(Result, 'versao', Self.stringToJsonValue(Source.Versao));
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'Id', Self.stringToJsonValue(Source.Id));
    if Assigned(Source.Ide) then
      Json.ObjAddProp(Result, 'ide', Self.TNfeSefazIdeToJsonValue(Source.Ide));
    if Assigned(Source.Emit) then
      Json.ObjAddProp(Result, 'emit', Self.TNfeSefazEmitToJsonValue(Source.Emit));
    if Assigned(Source.Avulsa) then
      Json.ObjAddProp(Result, 'avulsa', Self.TNfeSefazAvulsaToJsonValue(Source.Avulsa));
    if Assigned(Source.Dest) then
      Json.ObjAddProp(Result, 'dest', Self.TNfeSefazDestToJsonValue(Source.Dest));
    if Assigned(Source.Retirada) then
      Json.ObjAddProp(Result, 'retirada', Self.TNfeSefazLocalToJsonValue(Source.Retirada));
    if Assigned(Source.Entrega) then
      Json.ObjAddProp(Result, 'entrega', Self.TNfeSefazLocalToJsonValue(Source.Entrega));
    if Assigned(Source.AutXML) then
      Json.ObjAddProp(Result, 'autXML', Self.TNfeSefazAutXMLListToJsonValue(Source.AutXML));
    if Assigned(Source.Det) then
      Json.ObjAddProp(Result, 'det', Self.TNfeSefazDetListToJsonValue(Source.Det));
    if Assigned(Source.Total) then
      Json.ObjAddProp(Result, 'total', Self.TNfeSefazTotalToJsonValue(Source.Total));
    if Assigned(Source.Transp) then
      Json.ObjAddProp(Result, 'transp', Self.TNfeSefazTranspToJsonValue(Source.Transp));
    if Assigned(Source.Cobr) then
      Json.ObjAddProp(Result, 'cobr', Self.TNfeSefazCobrToJsonValue(Source.Cobr));
    if Assigned(Source.Pag) then
      Json.ObjAddProp(Result, 'pag', Self.TNfeSefazPagToJsonValue(Source.Pag));
    if Assigned(Source.InfIntermed) then
      Json.ObjAddProp(Result, 'infIntermed', Self.TNfeSefazInfIntermedToJsonValue(Source.InfIntermed));
    if Assigned(Source.InfAdic) then
      Json.ObjAddProp(Result, 'infAdic', Self.TNfeSefazInfAdicToJsonValue(Source.InfAdic));
    if Assigned(Source.Exporta) then
      Json.ObjAddProp(Result, 'exporta', Self.TNfeSefazExportaToJsonValue(Source.Exporta));
    if Assigned(Source.Compra) then
      Json.ObjAddProp(Result, 'compra', Self.TNfeSefazCompraToJsonValue(Source.Compra));
    if Assigned(Source.Cana) then
      Json.ObjAddProp(Result, 'cana', Self.TNfeSefazCanaToJsonValue(Source.Cana));
    if Assigned(Source.InfRespTec) then
      Json.ObjAddProp(Result, 'infRespTec', Self.TNfeSefazInfRespTecToJsonValue(Source.InfRespTec));
    if Assigned(Source.InfSolicNFF) then
      Json.ObjAddProp(Result, 'infSolicNFF', Self.TNfeSefazInfSolicNFFToJsonValue(Source.InfSolicNFF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfNFeToJson(Source: TNfeSefazInfNFe): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfNFeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfNFeFromJsonValue(Source: TJSONValue): TNfeSefazInfNFe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfNFe.Create;
  try
    if Json.ObjContains(Source, 'versao', JValue) then
      Result.Versao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ide', JValue) then
      Result.Ide := Self.TNfeSefazIdeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'emit', JValue) then
      Result.Emit := Self.TNfeSefazEmitFromJsonValue(JValue);
    if Json.ObjContains(Source, 'avulsa', JValue) then
      Result.Avulsa := Self.TNfeSefazAvulsaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dest', JValue) then
      Result.Dest := Self.TNfeSefazDestFromJsonValue(JValue);
    if Json.ObjContains(Source, 'retirada', JValue) then
      Result.Retirada := Self.TNfeSefazLocalFromJsonValue(JValue);
    if Json.ObjContains(Source, 'entrega', JValue) then
      Result.Entrega := Self.TNfeSefazLocalFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autXML', JValue) then
      Result.AutXML := Self.TNfeSefazAutXMLListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'det', JValue) then
      Result.Det := Self.TNfeSefazDetListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'total', JValue) then
      Result.Total := Self.TNfeSefazTotalFromJsonValue(JValue);
    if Json.ObjContains(Source, 'transp', JValue) then
      Result.Transp := Self.TNfeSefazTranspFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cobr', JValue) then
      Result.Cobr := Self.TNfeSefazCobrFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pag', JValue) then
      Result.Pag := Self.TNfeSefazPagFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infIntermed', JValue) then
      Result.InfIntermed := Self.TNfeSefazInfIntermedFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infAdic', JValue) then
      Result.InfAdic := Self.TNfeSefazInfAdicFromJsonValue(JValue);
    if Json.ObjContains(Source, 'exporta', JValue) then
      Result.Exporta := Self.TNfeSefazExportaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'compra', JValue) then
      Result.Compra := Self.TNfeSefazCompraFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cana', JValue) then
      Result.Cana := Self.TNfeSefazCanaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infRespTec', JValue) then
      Result.InfRespTec := Self.TNfeSefazInfRespTecFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infSolicNFF', JValue) then
      Result.InfSolicNFF := Self.TNfeSefazInfSolicNFFFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfNFeFromJson(Source: string): TNfeSefazInfNFe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfNFeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfNFeSuplToJsonValue(Source: TNfeSefazInfNFeSupl): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.QrCodeHasValue then
      Json.ObjAddProp(Result, 'qrCode', Self.stringToJsonValue(Source.QrCode));
    if Source.UrlChaveHasValue then
      Json.ObjAddProp(Result, 'urlChave', Self.stringToJsonValue(Source.UrlChave));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfNFeSuplToJson(Source: TNfeSefazInfNFeSupl): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfNFeSuplToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfNFeSuplFromJsonValue(Source: TJSONValue): TNfeSefazInfNFeSupl;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfNFeSupl.Create;
  try
    if Json.ObjContains(Source, 'qrCode', JValue) then
      Result.QrCode := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'urlChave', JValue) then
      Result.UrlChave := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfNFeSuplFromJson(Source: string): TNfeSefazInfNFeSupl;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfNFeSuplFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoToJsonValue(Source: TNfePedidoEmissao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.InfNFe) then
      Json.ObjAddProp(Result, 'infNFe', Self.TNfeSefazInfNFeToJsonValue(Source.InfNFe));
    if Assigned(Source.InfNFeSupl) then
      Json.ObjAddProp(Result, 'infNFeSupl', Self.TNfeSefazInfNFeSuplToJsonValue(Source.InfNFeSupl));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.ReferenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.Referencia));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoToJson(Source: TNfePedidoEmissao): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfePedidoEmissaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoFromJsonValue(Source: TJSONValue): TNfePedidoEmissao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfePedidoEmissao.Create;
  try
    if Json.ObjContains(Source, 'infNFe', JValue) then
      Result.InfNFe := Self.TNfeSefazInfNFeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infNFeSupl', JValue) then
      Result.InfNFeSupl := Self.TNfeSefazInfNFeSuplFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.Referencia := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoFromJson(Source: string): TNfePedidoEmissao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfePedidoEmissaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoListToJsonValue(Source: TNfePedidoEmissaoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfePedidoEmissaoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoListToJson(Source: TNfePedidoEmissaoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfePedidoEmissaoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoListFromJsonValue(Source: TJSONValue): TNfePedidoEmissaoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfePedidoEmissaoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfePedidoEmissaoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoListFromJson(Source: string): TNfePedidoEmissaoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfePedidoEmissaoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoLoteToJsonValue(Source: TNfePedidoEmissaoLote): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.Documentos) then
      Json.ObjAddProp(Result, 'documentos', Self.TNfePedidoEmissaoListToJsonValue(Source.Documentos));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.ReferenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.Referencia));
    if Source.IdLoteHasValue then
      Json.ObjAddProp(Result, 'id_lote', Self.stringToJsonValue(Source.IdLote));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoLoteToJson(Source: TNfePedidoEmissaoLote): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfePedidoEmissaoLoteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoLoteFromJsonValue(Source: TJSONValue): TNfePedidoEmissaoLote;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfePedidoEmissaoLote.Create;
  try
    if Json.ObjContains(Source, 'documentos', JValue) then
      Result.Documentos := Self.TNfePedidoEmissaoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.Referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id_lote', JValue) then
      Result.IdLote := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoLoteFromJson(Source: string): TNfePedidoEmissaoLote;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfePedidoEmissaoLoteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoCancelamentoToJsonValue(Source: TNfePedidoCancelamento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.JustificativaHasValue then
      Json.ObjAddProp(Result, 'justificativa', Self.stringToJsonValue(Source.Justificativa));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoCancelamentoToJson(Source: TNfePedidoCancelamento): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfePedidoCancelamentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoCancelamentoFromJsonValue(Source: TJSONValue): TNfePedidoCancelamento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfePedidoCancelamento.Create;
  try
    if Json.ObjContains(Source, 'justificativa', JValue) then
      Result.Justificativa := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoCancelamentoFromJson(Source: string): TNfePedidoCancelamento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfePedidoCancelamentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoCartaCorrecaoToJsonValue(Source: TNfePedidoCartaCorrecao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CorrecaoHasValue then
      Json.ObjAddProp(Result, 'correcao', Self.stringToJsonValue(Source.Correcao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoCartaCorrecaoToJson(Source: TNfePedidoCartaCorrecao): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfePedidoCartaCorrecaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoCartaCorrecaoFromJsonValue(Source: TJSONValue): TNfePedidoCartaCorrecao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfePedidoCartaCorrecao.Create;
  try
    if Json.ObjContains(Source, 'correcao', JValue) then
      Result.Correcao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoCartaCorrecaoFromJson(Source: string): TNfePedidoCartaCorrecao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfePedidoCartaCorrecaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeCartaCorrecaoToJsonValue(Source: TDfeCartaCorrecao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CorrecaoHasValue then
      Json.ObjAddProp(Result, 'correcao', Self.stringToJsonValue(Source.Correcao));
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.Id));
    if Source.AmbienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.Ambiente));
    if Source.StatusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.Status));
    if Assigned(Source.Autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.Autor));
    if Source.ChaveAcessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.ChaveAcesso));
    if Source.DataEventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.DataEvento));
    if Source.NumeroSequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.NumeroSequencial));
    if Source.DataRecebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.DataRecebimento));
    if Source.CodigoStatusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.CodigoStatus));
    if Source.MotivoStatusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.MotivoStatus));
    if Source.NumeroProtocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.NumeroProtocolo));
    if Source.CodigoMensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.CodigoMensagem));
    if Source.MensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.Mensagem));
    if Source.TipoEventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.TipoEvento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeCartaCorrecaoToJson(Source: TDfeCartaCorrecao): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeCartaCorrecaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeCartaCorrecaoFromJsonValue(Source: TJSONValue): TDfeCartaCorrecao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeCartaCorrecao.Create;
  try
    if Json.ObjContains(Source, 'correcao', JValue) then
      Result.Correcao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.Ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.Status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.Autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.ChaveAcesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.DataEvento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.NumeroSequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.DataRecebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.CodigoStatus := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.MotivoStatus := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.NumeroProtocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.CodigoMensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.Mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.TipoEvento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeCartaCorrecaoFromJson(Source: string): TDfeCartaCorrecao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeCartaCorrecaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjNaturezaJuridicaToJsonValue(Source: TCnpjNaturezaJuridica): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CodigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.Codigo));
    if Source.DescricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.Descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjNaturezaJuridicaToJson(Source: TCnpjNaturezaJuridica): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjNaturezaJuridicaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjNaturezaJuridicaFromJsonValue(Source: TJSONValue): TCnpjNaturezaJuridica;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjNaturezaJuridica.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.Codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.Descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjNaturezaJuridicaFromJson(Source: string): TCnpjNaturezaJuridica;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjNaturezaJuridicaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjPorteEmpresaToJsonValue(Source: TCnpjPorteEmpresa): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CodigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.Codigo));
    if Source.DescricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.Descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjPorteEmpresaToJson(Source: TCnpjPorteEmpresa): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjPorteEmpresaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjPorteEmpresaFromJsonValue(Source: TJSONValue): TCnpjPorteEmpresa;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjPorteEmpresa.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.Codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.Descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjPorteEmpresaFromJson(Source: string): TCnpjPorteEmpresa;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjPorteEmpresaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjSituacaoCadastralToJsonValue(Source: TCnpjSituacaoCadastral): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.DataHasValue then
      Json.ObjAddProp(Result, 'data', Self.TDateToJsonValue(Source.Data));
    if Source.CodigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.Codigo));
    if Source.DescricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.Descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjSituacaoCadastralToJson(Source: TCnpjSituacaoCadastral): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjSituacaoCadastralToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjSituacaoCadastralFromJsonValue(Source: TJSONValue): TCnpjSituacaoCadastral;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjSituacaoCadastral.Create;
  try
    if Json.ObjContains(Source, 'data', JValue) then
      Result.Data := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.Codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.Descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjSituacaoCadastralFromJson(Source: string): TCnpjSituacaoCadastral;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjSituacaoCadastralFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjPaisToJsonValue(Source: TCnpjPais): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CodigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.Codigo));
    if Source.DescricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.Descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjPaisToJson(Source: TCnpjPais): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjPaisToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjPaisFromJsonValue(Source: TJSONValue): TCnpjPais;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjPais.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.Codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.Descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjPaisFromJson(Source: string): TCnpjPais;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjPaisFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjCnaeToJsonValue(Source: TCnpjCnae): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CodigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.Codigo));
    if Source.DescricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.Descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjCnaeToJson(Source: TCnpjCnae): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjCnaeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjCnaeFromJsonValue(Source: TJSONValue): TCnpjCnae;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjCnae.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.Codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.Descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjCnaeFromJson(Source: string): TCnpjCnae;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjCnaeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjCnaeListToJsonValue(Source: TCnpjCnaeList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCnpjCnaeToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjCnaeListToJson(Source: TCnpjCnaeList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjCnaeListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjCnaeListFromJsonValue(Source: TJSONValue): TCnpjCnaeList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjCnaeList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCnpjCnaeFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjCnaeListFromJson(Source: string): TCnpjCnaeList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjCnaeListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjMunicipioToJsonValue(Source: TCnpjMunicipio): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CodigoTomHasValue then
      Json.ObjAddProp(Result, 'codigo_tom', Self.stringToJsonValue(Source.CodigoTom));
    if Source.CodigoIbgeHasValue then
      Json.ObjAddProp(Result, 'codigo_ibge', Self.stringToJsonValue(Source.CodigoIbge));
    if Source.DescricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.Descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjMunicipioToJson(Source: TCnpjMunicipio): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjMunicipioToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjMunicipioFromJsonValue(Source: TJSONValue): TCnpjMunicipio;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjMunicipio.Create;
  try
    if Json.ObjContains(Source, 'codigo_tom', JValue) then
      Result.CodigoTom := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_ibge', JValue) then
      Result.CodigoIbge := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.Descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjMunicipioFromJson(Source: string): TCnpjMunicipio;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjMunicipioFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjEnderecoToJsonValue(Source: TCnpjEndereco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.TipoLogradouroHasValue then
      Json.ObjAddProp(Result, 'tipo_logradouro', Self.stringToJsonValue(Source.TipoLogradouro));
    if Source.LogradouroHasValue then
      Json.ObjAddProp(Result, 'logradouro', Self.stringToJsonValue(Source.Logradouro));
    if Source.NumeroHasValue then
      Json.ObjAddProp(Result, 'numero', Self.stringToJsonValue(Source.Numero));
    if Source.ComplementoHasValue then
      Json.ObjAddProp(Result, 'complemento', Self.stringToJsonValue(Source.Complemento));
    if Source.BairroHasValue then
      Json.ObjAddProp(Result, 'bairro', Self.stringToJsonValue(Source.Bairro));
    if Source.CepHasValue then
      Json.ObjAddProp(Result, 'cep', Self.stringToJsonValue(Source.Cep));
    if Source.UfHasValue then
      Json.ObjAddProp(Result, 'uf', Self.stringToJsonValue(Source.Uf));
    if Assigned(Source.Municipio) then
      Json.ObjAddProp(Result, 'municipio', Self.TCnpjMunicipioToJsonValue(Source.Municipio));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjEnderecoToJson(Source: TCnpjEndereco): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjEnderecoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjEnderecoFromJsonValue(Source: TJSONValue): TCnpjEndereco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjEndereco.Create;
  try
    if Json.ObjContains(Source, 'tipo_logradouro', JValue) then
      Result.TipoLogradouro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'logradouro', JValue) then
      Result.Logradouro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.Numero := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'complemento', JValue) then
      Result.Complemento := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'bairro', JValue) then
      Result.Bairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cep', JValue) then
      Result.Cep := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf', JValue) then
      Result.Uf := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'municipio', JValue) then
      Result.Municipio := Self.TCnpjMunicipioFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjEnderecoFromJson(Source: string): TCnpjEndereco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjEnderecoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjTelefoneToJsonValue(Source: TCnpjTelefone): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.DddHasValue then
      Json.ObjAddProp(Result, 'ddd', Self.stringToJsonValue(Source.Ddd));
    if Source.NumeroHasValue then
      Json.ObjAddProp(Result, 'numero', Self.stringToJsonValue(Source.Numero));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjTelefoneToJson(Source: TCnpjTelefone): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjTelefoneToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjTelefoneFromJsonValue(Source: TJSONValue): TCnpjTelefone;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjTelefone.Create;
  try
    if Json.ObjContains(Source, 'ddd', JValue) then
      Result.Ddd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.Numero := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjTelefoneFromJson(Source: string): TCnpjTelefone;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjTelefoneFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjTelefoneListToJsonValue(Source: TCnpjTelefoneList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCnpjTelefoneToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjTelefoneListToJson(Source: TCnpjTelefoneList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjTelefoneListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjTelefoneListFromJsonValue(Source: TJSONValue): TCnpjTelefoneList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjTelefoneList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCnpjTelefoneFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjTelefoneListFromJson(Source: string): TCnpjTelefoneList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjTelefoneListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjOpcaoSimplesToJsonValue(Source: TCnpjOpcaoSimples): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.OptanteHasValue then
      Json.ObjAddProp(Result, 'optante', Self.BooleanToJsonValue(Source.Optante));
    if Source.DataOpcaoHasValue then
      Json.ObjAddProp(Result, 'data_opcao', Self.TDateToJsonValue(Source.DataOpcao));
    if Source.DataExclusaoHasValue then
      Json.ObjAddProp(Result, 'data_exclusao', Self.TDateToJsonValue(Source.DataExclusao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjOpcaoSimplesToJson(Source: TCnpjOpcaoSimples): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjOpcaoSimplesToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjOpcaoSimplesFromJsonValue(Source: TJSONValue): TCnpjOpcaoSimples;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjOpcaoSimples.Create;
  try
    if Json.ObjContains(Source, 'optante', JValue) then
      Result.Optante := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_opcao', JValue) then
      Result.DataOpcao := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_exclusao', JValue) then
      Result.DataExclusao := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjOpcaoSimplesFromJson(Source: string): TCnpjOpcaoSimples;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjOpcaoSimplesFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjIdentificadorSocioToJsonValue(Source: TCnpjIdentificadorSocio): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CodigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.Codigo));
    if Source.DescricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.Descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjIdentificadorSocioToJson(Source: TCnpjIdentificadorSocio): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjIdentificadorSocioToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjIdentificadorSocioFromJsonValue(Source: TJSONValue): TCnpjIdentificadorSocio;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjIdentificadorSocio.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.Codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.Descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjIdentificadorSocioFromJson(Source: string): TCnpjIdentificadorSocio;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjIdentificadorSocioFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjQualificacaoSocioToJsonValue(Source: TCnpjQualificacaoSocio): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CodigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.Codigo));
    if Source.DescricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.Descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjQualificacaoSocioToJson(Source: TCnpjQualificacaoSocio): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjQualificacaoSocioToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjQualificacaoSocioFromJsonValue(Source: TJSONValue): TCnpjQualificacaoSocio;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjQualificacaoSocio.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.Codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.Descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjQualificacaoSocioFromJson(Source: string): TCnpjQualificacaoSocio;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjQualificacaoSocioFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjRepresentanteLegalToJsonValue(Source: TCnpjRepresentanteLegal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CpfHasValue then
      Json.ObjAddProp(Result, 'cpf', Self.stringToJsonValue(Source.Cpf));
    if Source.NomeHasValue then
      Json.ObjAddProp(Result, 'nome', Self.stringToJsonValue(Source.Nome));
    if Assigned(Source.Qualificacao) then
      Json.ObjAddProp(Result, 'qualificacao', Self.TCnpjQualificacaoSocioToJsonValue(Source.Qualificacao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjRepresentanteLegalToJson(Source: TCnpjRepresentanteLegal): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjRepresentanteLegalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjRepresentanteLegalFromJsonValue(Source: TJSONValue): TCnpjRepresentanteLegal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjRepresentanteLegal.Create;
  try
    if Json.ObjContains(Source, 'cpf', JValue) then
      Result.Cpf := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome', JValue) then
      Result.Nome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qualificacao', JValue) then
      Result.Qualificacao := Self.TCnpjQualificacaoSocioFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjRepresentanteLegalFromJson(Source: string): TCnpjRepresentanteLegal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjRepresentanteLegalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjFaixaEtariaToJsonValue(Source: TCnpjFaixaEtaria): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CodigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.Codigo));
    if Source.DescricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.Descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjFaixaEtariaToJson(Source: TCnpjFaixaEtaria): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjFaixaEtariaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjFaixaEtariaFromJsonValue(Source: TJSONValue): TCnpjFaixaEtaria;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjFaixaEtaria.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.Codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.Descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjFaixaEtariaFromJson(Source: string): TCnpjFaixaEtaria;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjFaixaEtariaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjSocioToJsonValue(Source: TCnpjSocio): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.IdentificadorSocio) then
      Json.ObjAddProp(Result, 'identificador_socio', Self.TCnpjIdentificadorSocioToJsonValue(Source.IdentificadorSocio));
    if Source.NomeHasValue then
      Json.ObjAddProp(Result, 'nome', Self.stringToJsonValue(Source.Nome));
    if Source.CpfCnpjHasValue then
      Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.CpfCnpj));
    if Assigned(Source.Qualificacao) then
      Json.ObjAddProp(Result, 'qualificacao', Self.TCnpjQualificacaoSocioToJsonValue(Source.Qualificacao));
    if Source.DataEntradaSociedadeHasValue then
      Json.ObjAddProp(Result, 'data_entrada_sociedade', Self.TDateToJsonValue(Source.DataEntradaSociedade));
    if Assigned(Source.Pais) then
      Json.ObjAddProp(Result, 'pais', Self.TCnpjPaisToJsonValue(Source.Pais));
    if Assigned(Source.RepresentanteLegal) then
      Json.ObjAddProp(Result, 'representante_legal', Self.TCnpjRepresentanteLegalToJsonValue(Source.RepresentanteLegal));
    if Assigned(Source.FaixaEtaria) then
      Json.ObjAddProp(Result, 'faixa_etaria', Self.TCnpjFaixaEtariaToJsonValue(Source.FaixaEtaria));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjSocioToJson(Source: TCnpjSocio): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjSocioToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjSocioFromJsonValue(Source: TJSONValue): TCnpjSocio;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjSocio.Create;
  try
    if Json.ObjContains(Source, 'identificador_socio', JValue) then
      Result.IdentificadorSocio := Self.TCnpjIdentificadorSocioFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome', JValue) then
      Result.Nome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.CpfCnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qualificacao', JValue) then
      Result.Qualificacao := Self.TCnpjQualificacaoSocioFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_entrada_sociedade', JValue) then
      Result.DataEntradaSociedade := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pais', JValue) then
      Result.Pais := Self.TCnpjPaisFromJsonValue(JValue);
    if Json.ObjContains(Source, 'representante_legal', JValue) then
      Result.RepresentanteLegal := Self.TCnpjRepresentanteLegalFromJsonValue(JValue);
    if Json.ObjContains(Source, 'faixa_etaria', JValue) then
      Result.FaixaEtaria := Self.TCnpjFaixaEtariaFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjSocioFromJson(Source: string): TCnpjSocio;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjSocioFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjSocioListToJsonValue(Source: TCnpjSocioList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCnpjSocioToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjSocioListToJson(Source: TCnpjSocioList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjSocioListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjSocioListFromJsonValue(Source: TJSONValue): TCnpjSocioList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjSocioList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCnpjSocioFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjSocioListFromJson(Source: string): TCnpjSocioList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjSocioListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjEmpresaToJsonValue(Source: TCnpjEmpresa): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CnpjHasValue then
      Json.ObjAddProp(Result, 'cnpj', Self.stringToJsonValue(Source.Cnpj));
    if Source.RazaoSocialHasValue then
      Json.ObjAddProp(Result, 'razao_social', Self.stringToJsonValue(Source.RazaoSocial));
    if Source.NomeFantasiaHasValue then
      Json.ObjAddProp(Result, 'nome_fantasia', Self.stringToJsonValue(Source.NomeFantasia));
    if Source.DataInicioAtividadeHasValue then
      Json.ObjAddProp(Result, 'data_inicio_atividade', Self.TDateToJsonValue(Source.DataInicioAtividade));
    if Source.MatrizHasValue then
      Json.ObjAddProp(Result, 'matriz', Self.BooleanToJsonValue(Source.Matriz));
    if Assigned(Source.NaturezaJuridica) then
      Json.ObjAddProp(Result, 'natureza_juridica', Self.TCnpjNaturezaJuridicaToJsonValue(Source.NaturezaJuridica));
    if Source.CapitalSocialHasValue then
      Json.ObjAddProp(Result, 'capital_social', Self.DoubleToJsonValue(Source.CapitalSocial));
    if Assigned(Source.Porte) then
      Json.ObjAddProp(Result, 'porte', Self.TCnpjPorteEmpresaToJsonValue(Source.Porte));
    if Source.EnteFederativoResponsavelHasValue then
      Json.ObjAddProp(Result, 'ente_federativo_responsavel', Self.stringToJsonValue(Source.EnteFederativoResponsavel));
    if Assigned(Source.SituacaoCadastral) then
      Json.ObjAddProp(Result, 'situacao_cadastral', Self.TCnpjSituacaoCadastralToJsonValue(Source.SituacaoCadastral));
    if Assigned(Source.MotivoSituacaoCadastral) then
      Json.ObjAddProp(Result, 'motivo_situacao_cadastral', Self.TCnpjSituacaoCadastralToJsonValue(Source.MotivoSituacaoCadastral));
    if Source.NomeDaCidadeNoExteriorHasValue then
      Json.ObjAddProp(Result, 'nome_da_cidade_no_exterior', Self.stringToJsonValue(Source.NomeDaCidadeNoExterior));
    if Assigned(Source.Pais) then
      Json.ObjAddProp(Result, 'pais', Self.TCnpjPaisToJsonValue(Source.Pais));
    if Assigned(Source.AtividadePrincipal) then
      Json.ObjAddProp(Result, 'atividade_principal', Self.TCnpjCnaeToJsonValue(Source.AtividadePrincipal));
    if Assigned(Source.AtividadesSecundarias) then
      Json.ObjAddProp(Result, 'atividades_secundarias', Self.TCnpjCnaeListToJsonValue(Source.AtividadesSecundarias));
    if Assigned(Source.Endereco) then
      Json.ObjAddProp(Result, 'endereco', Self.TCnpjEnderecoToJsonValue(Source.Endereco));
    if Assigned(Source.Telefones) then
      Json.ObjAddProp(Result, 'telefones', Self.TCnpjTelefoneListToJsonValue(Source.Telefones));
    if Source.EmailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.Email));
    if Assigned(Source.SituacaoEspecial) then
      Json.ObjAddProp(Result, 'situacao_especial', Self.TCnpjSituacaoCadastralToJsonValue(Source.SituacaoEspecial));
    if Assigned(Source.Simples) then
      Json.ObjAddProp(Result, 'simples', Self.TCnpjOpcaoSimplesToJsonValue(Source.Simples));
    if Assigned(Source.Simei) then
      Json.ObjAddProp(Result, 'simei', Self.TCnpjOpcaoSimplesToJsonValue(Source.Simei));
    if Assigned(Source.Socios) then
      Json.ObjAddProp(Result, 'socios', Self.TCnpjSocioListToJsonValue(Source.Socios));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjEmpresaToJson(Source: TCnpjEmpresa): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjEmpresaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjEmpresaFromJsonValue(Source: TJSONValue): TCnpjEmpresa;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjEmpresa.Create;
  try
    if Json.ObjContains(Source, 'cnpj', JValue) then
      Result.Cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'razao_social', JValue) then
      Result.RazaoSocial := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_fantasia', JValue) then
      Result.NomeFantasia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_inicio_atividade', JValue) then
      Result.DataInicioAtividade := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'matriz', JValue) then
      Result.Matriz := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'natureza_juridica', JValue) then
      Result.NaturezaJuridica := Self.TCnpjNaturezaJuridicaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'capital_social', JValue) then
      Result.CapitalSocial := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'porte', JValue) then
      Result.Porte := Self.TCnpjPorteEmpresaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ente_federativo_responsavel', JValue) then
      Result.EnteFederativoResponsavel := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'situacao_cadastral', JValue) then
      Result.SituacaoCadastral := Self.TCnpjSituacaoCadastralFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_situacao_cadastral', JValue) then
      Result.MotivoSituacaoCadastral := Self.TCnpjSituacaoCadastralFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_da_cidade_no_exterior', JValue) then
      Result.NomeDaCidadeNoExterior := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pais', JValue) then
      Result.Pais := Self.TCnpjPaisFromJsonValue(JValue);
    if Json.ObjContains(Source, 'atividade_principal', JValue) then
      Result.AtividadePrincipal := Self.TCnpjCnaeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'atividades_secundarias', JValue) then
      Result.AtividadesSecundarias := Self.TCnpjCnaeListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'endereco', JValue) then
      Result.Endereco := Self.TCnpjEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'telefones', JValue) then
      Result.Telefones := Self.TCnpjTelefoneListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.Email := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'situacao_especial', JValue) then
      Result.SituacaoEspecial := Self.TCnpjSituacaoCadastralFromJsonValue(JValue);
    if Json.ObjContains(Source, 'simples', JValue) then
      Result.Simples := Self.TCnpjOpcaoSimplesFromJsonValue(JValue);
    if Json.ObjContains(Source, 'simei', JValue) then
      Result.Simei := Self.TCnpjOpcaoSimplesFromJsonValue(JValue);
    if Json.ObjContains(Source, 'socios', JValue) then
      Result.Socios := Self.TCnpjSocioListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjEmpresaFromJson(Source: string): TCnpjEmpresa;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjEmpresaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCepEnderecoToJsonValue(Source: TCepEndereco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.BairroHasValue then
      Json.ObjAddProp(Result, 'bairro', Self.stringToJsonValue(Source.Bairro));
    if Source.CepHasValue then
      Json.ObjAddProp(Result, 'cep', Self.stringToJsonValue(Source.Cep));
    if Source.CodigoIbgeHasValue then
      Json.ObjAddProp(Result, 'codigo_ibge', Self.stringToJsonValue(Source.CodigoIbge));
    if Source.ComplementoHasValue then
      Json.ObjAddProp(Result, 'complemento', Self.stringToJsonValue(Source.Complemento));
    if Source.LogradouroHasValue then
      Json.ObjAddProp(Result, 'logradouro', Self.stringToJsonValue(Source.Logradouro));
    if Source.MunicipioHasValue then
      Json.ObjAddProp(Result, 'municipio', Self.stringToJsonValue(Source.Municipio));
    if Source.TipoLogradouroHasValue then
      Json.ObjAddProp(Result, 'tipo_logradouro', Self.stringToJsonValue(Source.TipoLogradouro));
    if Source.UfHasValue then
      Json.ObjAddProp(Result, 'uf', Self.stringToJsonValue(Source.Uf));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCepEnderecoToJson(Source: TCepEndereco): string;
var
  JValue: TJSONValue;
begin
  JValue := TCepEnderecoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCepEnderecoFromJsonValue(Source: TJSONValue): TCepEndereco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCepEndereco.Create;
  try
    if Json.ObjContains(Source, 'bairro', JValue) then
      Result.Bairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cep', JValue) then
      Result.Cep := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_ibge', JValue) then
      Result.CodigoIbge := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'complemento', JValue) then
      Result.Complemento := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'logradouro', JValue) then
      Result.Logradouro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'municipio', JValue) then
      Result.Municipio := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_logradouro', JValue) then
      Result.TipoLogradouro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf', JValue) then
      Result.Uf := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCepEnderecoFromJson(Source: string): TCepEndereco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCepEnderecoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

end.
